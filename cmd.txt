@Система команд микропроцессора MC96002
:ABS
^ABS                     АБСОЛЮТНАЯ  ВЕЛИЧИНА                     ABS
 --------------------------------------------------------------------
 Операция:   │ D.L │ --> D.L  (параллельная пересылка)

 Синтаксис:  ABS D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Абсолютное значение младшей части операнда-Приемника запоминается в
 младшей части D.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - Не меняется.
   V - 1, если было переполнение; иначе 0.
   Z - 1, если результат равен 0; иначе 0.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ABS D   (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0100  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:ADD
^ADD                          СЛОЖЕНИЕ                            ADD
 --------------------------------------------------------------------
 Операция:   D.L + S.L --> D.L  (параллельная пересылка)

 Синтаксис:  ADD S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Складываются младшие части указанных операндов, результат  запомина-
 ется в младшей части операнда-Приемника D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - 1, если был перенос из старшего значащего бита, иначе 0.
   V - 1, если было переполнение, иначе 0.
   Z - 1, если результат равен 0, иначе 0.
   N - 1, если результат отрицательный, иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ADD S,D  (синтаксис операции MOVE см.описание MOVE.)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  1sss  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:ADDC
^ADDC                СЛОЖЕНИЕ С БИТОМ ПЕРЕНОСА                   ADDC
 --------------------------------------------------------------------
 Операция:   D.L + S.L + C --> D.L  (параллельная пересылка)

 Синтаксис:  ADDC S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Складываются  младшие части указанных операндов и бит C регистра ко-
 дов условий, результат запоминается в младшей части  операнда-прием-
 ника  D.  При  реализации сложения чисел высокой разрядности старшие
 слова операндов следует предварительно сдвигать в нижнюю  часть  ре-
 гистра Dn.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - 1, если был перенос из старшего значащего бита; иначе 0.
   V - 1, если было переполнение; иначе 0.
   Z - 0, если результат не равен 0; иначе не меняется.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ADDC S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  1sss  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:AND
^AND                       ЛОГИЧЕСКОЕ "И"                         AND
 --------------------------------------------------------------------
 Операция:   D.L & S.L --> D.L  (параллельная пересылка)

 Синтаксис:  AND S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычисляется конъюнкция младших частей указанных операндов, результат
 запоминается в младшей части операнда-приемника D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - Не меняется.
   V - Всегда 0.
   Z - 1, если результат равен 0; иначе 0.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: AND S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  0sss  uu00  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:ANDC
^ANDC                ЛОГИЧЕСКОЕ "И" С ДОПОЛНЕНИЕМ                ANDC
 --------------------------------------------------------------------
 Операция:   D.L & ~~S.L --> D.L  (параллельная пересылка)

 Синтаксис:  ANDC S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычисляется  конъюнкция  младшей  части  D  и логического дополнения
 младшей части S, результат запоминается в младшей части D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - Не меняется.
   V - Всегда 0.
   Z - 1, если результат равен 0; иначе 0.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ANDC  S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  1000  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:ANDI
^ANDI    ЛОГИЧЕСКОЕ "И" НЕПОСРЕДСТВЕННЫХ ДАННЫХ С СОДЕРЖИМЫМ     ANDI
^                     РЕГИСТРА УПРАВЛЕНИЯ
 --------------------------------------------------------------------
 Операция:   D & #xx --> D

 Синтаксис:  AND(I) #Byte,D

 Описание:

 Вычисляется конъюнкция содержимого регистра управления и  8-битного
 непосредственного операнда. Результат запоминается в регистре управ-
 ления.

 Коды условия регистра CCR:

 Если операнд CCR:
   C - 0, если бит 0 непосредственного операнда равен 0;
          иначе не меняется.
   V - 0, если бит 1 непосредственного операнда равен 0;
          иначе не меняется.
   Z - 0, если бит 2 непосредственного операнда равен 0;
          иначе не меняется.
   N - 0, если бит 3 непосредственного операнда равен 0;
          иначе не меняется.
   I - 0, если бит 4 непосредственного операнда равен 0;
          иначе не меняется.
  LR - 0, если бит 5 непосредственного операнда равен 0;
          иначе не меняется.
  ^R - 0, если бит 6 непосредственного операнда равен 0;
          иначе не меняется.
   A - 0, если бит 7 непосредственного операнда равен 0;
          иначе не меняется.

 Если операнд OMR,MR,IER или ER:
   C - Не меняется.
   V - Не меняется.
   Z - Не меняется.
   N - Не меняется.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER:

 Если операнд ER:
   INX  - 0, если бит 0 непосредственного операнда равен 0;
             иначе не меняется.
   DZ   - 0, если бит 1 непосредственного операнда равен 0;
             иначе не меняется.
   UNF  - 0, если бит 2 непосредственного операнда равен 0;
             иначе не меняется.
   OVF  - 0, если бит 3 непосредственного операнда равен 0;
             иначе не меняется.
   OPE  - 0, если бит 4 непосредственного операнда равен 0;
             иначе не меняется.
   SNAN - 0, если бит 5 непосредственного операнда равен 0;
             иначе не меняется.
   NAN  - 0, если бит 6 непосредственного операнда равен 0;
             иначе не меняется.
   UNCC - 0, если бит 7 непосредственного операнда равен 0;
             иначе не меняется.

 Если операнд OMR,MR,IER или CCR:
   INX  - Не меняется.
   DZ   - Не меняется.
   UNF  - Не меняется.
   OVF  - Не меняется.
   OPE  - Не меняется.
   SNAN - Не меняется.
   NAN  - Не меняется.
   UNCC - Не меняется.

 Флаги регистра IER:

 Если операнд IER:
   SINX - 0, если бит 0 непосредственного операнда равен 0;
             иначе не меняется.
   SDZ  - 0, если бит 1 непосредственного операнда равен 0;
             иначе не меняется.
   SUNF - 0, если бит 2 непосредственного операнда равен 0;
             иначе не меняется.
   SOVF - 0, если бит 3 непосредственного операнда равен 0;
             иначе не меняется.
   SIOP - 0, если бит 4 непосредственного операнда равен 0;
             иначе не меняется.

 Если операнд OMR, MR, ER или CCR:
   SINX - Не меняется.
   SDZ  - Не меняется.
   SUNF - Не меняется.
   SOVF - Не меняется.
   SIOP - Не меняется.

 Формат команды: AND(I) #Byte,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0001   0001    iiii   ii   │  ii   00ff  0111  10EE   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Непосредственный короткий операнд - iiiiiiii (8 бит)
          D     EEff
          CCR   0100
          ER    0101
          IER   0110
          MR    0111
          OMR   1000

 Время исполнения: 2 такта
 Расход памяти:    1 слово
:ASL
^ASL                 АРИФМЕТИЧЕСКИЙ СДВИГ ВЛЕВО                   ASL
 --------------------------------------------------------------------
 Операция:

      31...............0
      ┌────────────────┐
 C <--  <-- ....... <--  <-- 0       (параллельная пересылка)
      └────────────────┘

 Синтаксис:  ASL D   (синтаксис операции MOVE см.описание MOVE)
             ASL S,D  (синтаксис операции MOVE см.описание MOVE)
             ASL #shift,D

 Описание:

 Сдвиг на один бит: Арифметический сдвиг влево младшей части  указан-
 ного операнда на один бит. В бит переноса C заносится старший знача-
 щий  бит  младшей  части  операнда-Источника. В младший значащий бит
 операнда-Приемника записывается 0. Результат запоминается в  младшей
 части D.

 Сдвиг  на  несколько битов: Арифметический сдвиг влево младшей части
 указанного операнда на N бит (до 63 бит). Величина сдвига  определя-
 ется  11-битным  целым  числом, расположенным в старшей части S, или
 6-битным непосредственным числом, расположенным в поле операции. Бит
 переноса C равен N-му из вытесняемых битов младшей  части  операнда-
 Источника.  N  нулей  записывается в младшие значащие биты операнда-
 Приемника. Если сдвиг производится более, чем на 32 бита, операнд-П-
 риемник D и бит C будут заполнены нулями. Результат  запоминается  в
 младшей части D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - 1, если последний вытесненный бит операнда = 1; иначе 0.
       0, если величина сдвига нулевая.
   V - 1, если  старший  значащий бит менялся хоть один раз во время
          операции сдвига; иначе 0.
   Z - 1, если результат равен 0; иначе 0.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ASL D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0101  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: ASL S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  0011  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: ASL #shift,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000   10  │   01  001n  nnnn  nddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.H    nnn  ,   где nnn = 0-7

         N       nnnnnn
         0       000000
         1       000001
         2       000010
        ...        ...

         62      111110
         63      111111

 Время исполнения: 2 + mv тактов  (2 такта для ASL #shift)
 Расход памяти:    1 + mv слов    (1 слово для ASL #shift)
:ASR
^ASR                 АРИФМЕТИЧЕСКИЙ СДВИГ ВПРАВО                  ASR
 --------------------------------------------------------------------
 Операция:

      31................0
      ┌─────────────────┐
  ┌──>  --> ....... -->  --> C       (параллельная пересылка)
  │   └┬────────────────┘
  └────┘

 Синтаксис:  ASR D  (синтаксис операции MOVE см.описание MOVE)
             ASR S,D  (синтаксис операции MOVE см.описание MOVE)
             ASR #shift,D

 Описание:

 Сдвиг на один бит: Арифметический сдвиг вправо младшей части указан-
 ного  операнда  на  один  бит. В бит переноса C записывается младший
 значащий бит младшей части операнда-Источника. Старший значащий  бит
 не изменяется. Результат запоминается в младшей части D.

 Сдвиг  на несколько битов: Арифметический сдвиг вправо младшей части
 указанного операнда на N бит (до 63 бит). Величина сдвига  определя-
 ется  11-битным  целым  числом, расположенным в старшей части S, или
 6-битным непосредственным числом, расположенным в поле команды.  Бит
 C  равен N-му из вытесняемых битов младшей части операнда-Источника.
 N копий старшего значащего бита операнда записывается  в  N  старших
 значащих  битов  операнда-Приемника.  Если сдвиг производится более,
 чем на 32 бита, операнд-Приемник D и бит C  будут  заполнены  копией
 старшего значащего бита. Результат запоминается в младшей части D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - 1, если последний вытесненный бит операнда = 1; иначе 0.
       0, если величина сдвига нулевая.
   V - Всегда 0.
   Z - 1, если результат равен 0; иначе 0.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ASR D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0000  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: ASR S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  0011  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: ASR #shift,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000   10  │   01  000n  nnnn  nddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.H    nnn  ,   где nnn = 0-7

         N       nnnnnn
         0       000000
         1       000001
         2       000010
        ...        ...

         62      111110
         63      111111

 Время исполнения: 2 + mv тактов  (2 такта для ASR #shift)
 Расход памяти:    1 + mv слов    (1 слово для ASR #shift)
:Bcc
^Bcc                     УСЛОВНЫЙ  ПЕРЕХОД                        Bcc
 --------------------------------------------------------------------
 Операция:   Если cc, то    PC + xx --> PC   либо  PC + xxxx --> PC
                                             либо  PC + Rn   --> PC
                     иначе  PC + 1  --> PC

 Синтаксис:  Bcc label (short)
             Bcc label
             Bcc Rn

 Описание:

 Если  указанное условие истинно, выполнение программы продолжается с
 адреса PC+смещение. PC содержит адрес следующей команды.  Если  ука-
 занное  условие ложно, то PC увеличивается на 1, и программа продол-
 жает выполняться последовательно. Смещение - это 32-битное  целое  в
 двоично-дополнительном   коде,  представляющее  собой  относительное
 расстояние между текущим и новым значением PC. Могут  использоваться
 режимы адресации: с коротким смещением, с длинным смещением, адреса-
 ция относительно PC. Дополнительная информация - в Разделе A.10.

 "cc" может определять следующие условия перехода:

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: Bcc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    10aa    aaaa    aa  │  1c  cccc  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: Bcc label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    0000    00  │   1c  cccc  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: Bcc Rn
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    001R    RR  │  1c  cccc  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение - 32 бита
 Короткое смещение - aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110

 Время исполнения: 6 + jx  тактов
 Расход памяти:    1 + ea  слов
:BCHG
^BCHG                ПРОВЕРКА И ИЗМЕНЕНИЕ БИТА                   BCHG
 --------------------------------------------------------------------
 Операция:   D{n} --> C
            ~~D{n} --> D{n}

 Синтаксис:  BCHG #bit,X:ea
             BCHG #bit,X:aa
             BCHG #bit,X:pp
             BCHG #bit,Y:ea
             BCHG #bit,Y:aa
             BCHG #bit,Y:pp
             BCHG #bit,D

 Описание:

 Тестируется n-ый бит операнда-Приемника, и его состояние фиксируется
 в бите C кода условия. После тестирования n-ый бит операнда-Приемни-
 ка  инвертируется. Могут использоваться все режимы адресации с моди-
 фикацией операнда в памяти. Могут также  использоваться  регистровые
 методы  адресации,  с абсолютным коротким адресом и коротким адресом
 ввода-вывода.

 Номер тестируемого бита (0-31) задается  непосредственными  данными.
 Команда выполняет над операндом-Приемником операцию чтения-модифика-
 ции-записи,  т.е.  дважды  обращается  к операнду-Приемнику. Команда
 обеспечивает возможность одновременной проверки  и  изменения  бита,
 что может быть использовано для синхронизации нескольких процессоров
 с общей памятью. Дополнительная информация - в Разделе A.10.

 Коды условия регистра CCR:

 Если SR - операнд-Приемник:
   C - Изменяется, если указан бит 0; иначе не меняется.
   V - Изменяется, если указан бит 1; иначе не меняется.
   Z - Изменяется, если указан бит 2; иначе не меняется.
   N - Изменяется, если указан бит 3; иначе не меняется.
   I - Изменяется, если указан бит 4; иначе не меняется.
  LR - Изменяется, если указан бит 5; иначе не меняется.
  ^R - Изменяется, если указан бит 6; иначе не меняется.
   A - Изменяется, если указан бит 7; иначе не меняется.

 Если другие операнды:
   C - 1, если тестируемый бит = 1; иначе 0.
   V - Не меняется.
   Z - Не меняется.
   N - Не меняется.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER:

 Если SR - операнд-Приемник:
   INX   - Изменяется, если указан бит  8; иначе не меняется.
   DZ    - Изменяется, если указан бит  9; иначе не меняется.
   UNF   - Изменяется, если указан бит 10; иначе не меняется.
   OVF   - Изменяется, если указан бит 11; иначе не меняется.
   OPERR - Изменяется, если указан бит 12; иначе не меняется.
   SNAN  - Изменяется, если указан бит 13; иначе не меняется.
   NAN   - Изменяется, если указан бит 14; иначе не меняется.
   UNCC  - Изменяется, если указан бит 15; иначе не меняется.

 Если другие операнды:
   INX   - Не меняется.
   DZ    - Не меняется.
   UNF   - Не меняется.
   OVF   - Не меняется.
   OPERR - Не меняется.
   SNAN  - Не меняется.
   NAN   - Не меняется.
   UNCC  - Не меняется.

 Флаги регистра IER:

 Если SR - операнд-Приемник:
  SINX - Изменяется, если указан бит 16; иначе не меняется.
  SDZ  - Изменяется, если указан бит 17; иначе не меняется.
  SUNF - Изменяется, если указан бит 18; иначе не меняется.
  SOVF - Изменяется, если указан бит 19; иначе не меняется.
  SIOP - Изменяется, если указан бит 20; иначе не меняется.

 Если другие операнды:
  SINX - Не меняется.
  SDZ  - Не меняется.
  SUNF - Не меняется.
  SOVF - Не меняется.
  SIOP - Не меняется.

 Формат команды: BCHG #bit,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0111    dddd    dd  │ d0   0100   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BCHG #bit,X:pp
                 BCHG #bit,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0110    1ppp    pp  │ pp   010S   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BCHG #bit,X:aa
                 BCHG #bit,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0110    0aaa    aa  │ aa   010S   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BCHG #bit,X:ea
                 BCHG #bit,Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0101    MMMR    RR  │ 00   010S   000b   bbbb  │
 ├───────────────────────────────────────┴──────────────────────────┤
 │необязательное дополнительное слово,содержащее исполнительный адр.│
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea> Rn - R0-R7 (Только для режимов адресации с модификацией операн-
                  да в памяти)

 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти  S           Номер бита   bbbbb
 X-память    0           Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память    1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111


 Время исполнения: 4 + mvb  тактов
 Расход памяти:    1 + ea   слов
:BCLR
^BCLR                ПРОВЕРКА И ОЧИСТКА БИТА                     BCLR
 --------------------------------------------------------------------
 Операция:   D{n} --> C ;
             0    --> D{n}

 Синтаксис:  BCLR #bit,X:ea
             BCLR #bit,X:aa
             BCLR #bit,X:pp
             BCLR #bit,Y:ea
             BCLR #bit,Y:aa
             BCLR #bit,Y:pp
             BCLR #bit,D

 Описание:

 Тестируется n-ый бит операнда-Приемника, и его состояние фиксируется
 в бите C кода условия. После тестирования n-ый бит операнда-Приемни-
 ка  очищается. Могут использоваться все режимы адресации с модифика-
 цией операнда в памяти. Могут также использоваться регистровые мето-
 ды адресации, с абсолютным коротким адресом и коротким адресом  вво-
 да-вывода.

 Номер  тестируемого  бита (0-31) задается непосредственными данными.
 Команда выполняет над операндом-Приемником операцию чтения-модифика-
 ции-записи, т.е. дважды  обращается  к  операнду-Приемнику.  Команда
 обеспечивает  возможность одновременной проверки и очистки бита, что
 может быть использовано для синхронизации нескольких  процессоров  с
 общей памятью. Дополнительная информация - в Разделе A.10.

 Коды условия регистра CCR:

 Если SR - операнд-Приемник:
   C - 0, если указан бит 0; иначе не меняется.
   V - 0, если указан бит 1; иначе не меняется.
   Z - 0, если указан бит 2; иначе не меняется.
   N - 0, если указан бит 3; иначе не меняется.
   I - 0, если указан бит 4; иначе не меняется.
  LR - 0, если указан бит 5; иначе не меняется.
  ^R - 0, если указан бит 6; иначе не меняется.
   A - 0, если указан бит 7; иначе не меняется.

 Если другие операнды:
   C - 1, если тестируемый бит = 1; иначе 0.
   V - Не меняется.
   Z - Не меняется.
   N - Не меняется.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER:

 Если SR - операнд-Приемник:
   INX   - 0, если указан бит  8; иначе не меняется.
   DZ    - 0, если указан бит  9; иначе не меняется.
   UNF   - 0, если указан бит 10; иначе не меняется.
   OVF   - 0, если указан бит 11; иначе не меняется.
   OPERR - 0, если указан бит 12; иначе не меняется.
   SNAN  - 0, если указан бит 13; иначе не меняется.
   NAN   - 0, если указан бит 14; иначе не меняется.
   UNCC  - 0, если указан бит 15; иначе не меняется.

 Если другие операнды:
   INX   - Не меняется.
   DZ    - Не меняется.
   UNF   - Не меняется.
   OVF   - Не меняется.
   OPERR - Не меняется.
   SNAN  - Не меняется.
   NAN   - Не меняется.
   UNCC  - Не меняется.

 Флаги регистра IER:

 Если SR - операнд-Приемник:
  SINX - 0, если указан бит 16; иначе не меняется.
  SDZ  - 0, если указан бит 17; иначе не меняется.
  SUNF - 0, если указан бит 18; иначе не меняется.
  SOVF - 0, если указан бит 19; иначе не меняется.
  SIOP - 0, если указан бит 20; иначе не меняется.

 Если другие операнды:
  SINX - Не меняется.
  SDZ  - Не меняется.
  SUNF - Не меняется.
  SOVF - Не меняется.
  SIOP - Не меняется.

 Формат команды: BCHG #bit,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0011    dddd    dd  │ d0   0100   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BCLR #bit,X:pp
                 BCLR #bit,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0010    1ppp    pp  │ pp   010S   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BCLR #bit,X:aa
                 BCLR #bit,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0010    0aaa    aa  │ aa   010S   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BCLR #bit,X:ea
                 BCLR #bit,Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0001    MMMR    RR  │ 00   010S   000b   bbbb  │
 ├───────────────────────────────────────┴──────────────────────────┤
 │необязательное дополнительное слово,содержащее исполнительный адр.│
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea> Rn - R0-R7 (Только для режимов адресации с модификацией операн-
                  да в памяти)

 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти  S           Номер бита   bbbbb
 X-память    0           Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память    1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 4 + mvb  тактов
 Расход памяти:    1 + ea  слов
:BFIND
^BFIND             ПОИСК ПЕРВОГО ЗНАЧИМОГО РАЗРЯДА              BFIND
 --------------------------------------------------------------------
 Операция:   Первый значимый разряд (S.L) --> D.H  (параллельная
                                                    пересылка)

 Синтаксис:  BFIND S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычисляется  позиция  первого  значимого разряда операнда-Источника,
 считая слева направо. Результат записывается в  двоично-дополнитель-
 ном коде в старшую часть операнда-Приемника D. Если операнд-Источник
 = 0, то результат равен $80000000.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C - Не меняется.
   V - Всегда 0.
   Z - 1, если результат равен 0; иначе 0.
   N - 1, если результат отрицательный; иначе 0.
   I - Не меняется.
  LR - Не меняется.
  ^R - Не меняется.
   A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BFIND S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │ поле операции пересылки MOVE          │   11  0sss  0111  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

         D       ddd
         Dn.H    nnn  ,   где nnn = 0-7

         S       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:BRA
^BRA                     БЕЗУСЛОВНЫЙ ПЕРЕХОД                      BRA
 --------------------------------------------------------------------
 Операция:   PC + xx --> PC    либо  PC + xxxx --> PC
                               либо  PC + Rn   --> PC

 Синтаксис:  BRA label(short)
             BRA label
             BRA Rn

 Описание:

 Выполнение  программы продолжается с адреса PC+смещение. PC содержит
 адрес следующей команды. Смещение - это 32-битное целое  в  двоично-
 дополнительном  коде,  представляющее собой относительное расстояние
 между текущим и новым значением PC. Могут использоваться режимы  ад-
 ресации  с коротким смещением, с длинным смещением, относительно PC.
 Дополнительная информация - в Разделе A.10.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BRA label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    10aa    aaaa    aa  │  11  1111  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BRA label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    0000    00  │   11  1111  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRA Rn
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    001R    RR  │  11  1111  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение - 32 бита
 Короткое смещение - aaaaaaaaaaaaaaa (15 бит)

 Время исполнения: 6 + jx тактов
 Расход памяти:    1 + ea слов
:BRCLR
^BRCLR               ПЕРЕХОД,  ЕСЛИ  БИТ  РАВЕН  0              BRCLR
 --------------------------------------------------------------------
 Операция:   Если S{n}=0,  то    PC + xxxx --> PC
                           иначе PC + 1    --> PC

 Синтаксис:  BRCLR #bit,X:ea,label
             BRCLR #bit,X:aa,label
             BRCLR #bit,X:pp,label
             BRCLR #bit,Y:ea,label
             BRCLR #bit,Y:aa,label
             BRCLR #bit,Y:pp,label
             BRCLR #bit,S,label

 Описание:

 Проверяется n-ный бит операнда. Если проверяемый бит равен нулю,  то
 выполнение  программы продолжается с адреса PC+смещение. PC содержит
 адрес следующей команды. Если проверяемый бит равен 1, то PC  увели-
 чивается  на  1, и программа продолжает выполняться последовательно.
 Однако, адресный регистр, указанный в поле  исполнительного  адреса,
 изменяется  всегда,  независимо от условия. Смещение - это 32-битное
 целое в двоично-дополнительном коде,  представляющее  собой  относи-
 тельное  расстояние  между  текущим  и новым значением PC. 32-битное
 смещение содержится в дополнительном  слове  команды.  Для  указания
 операнда-Источника могут использоваться все режимы адресации с моди-
 фикацией  операнда  в  памяти. Могут также использоваться абсолютная
 короткая адресация, короткая адресация ввода-вывода и прямая регист-
 ровая. Отметим, что если в качестве  операнда  S  будет  использован
 SSH,  то регистр указателя стека уменьшится на 1. Номер проверяемого
 бита (0-31) задается непосредственными данными.  Дополнительная  ин-
 формация - в Разделе A.10.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BRCLR #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1011    dddd    dd  │   d0  0100  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRCLR #bit,X:pp,label
                 BRCLR #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    1ppp    pp  │   pp  010S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRCLR #bit,X:aa,label
                 BRCLR #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    0aaa    aa  │   aa  010S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRCLR #bit,X:ea,label
                 BRCLR #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1000    MMMR    RR  │   00  010S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxxx))
 Смещение относительно PC - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти   S          Номер бита   bbbbb
 X-память     0          Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 8 + jx  тактов
 Расход памяти:    2       слова
:BRSET
^BRSET               ПЕРЕХОД,  ЕСЛИ  БИТ  РАВЕН  1              BRSET
 --------------------------------------------------------------------
 Операция:   Если S{n}=1, то    PC + xxxx --> PC
                                иначе PC + 1    --> PC

 Синтаксис:  BRSET #bit,X:ea,label
             BRSET #bit,X:aa,label
             BRSET #bit,X:pp,label
             BRSET #bit,Y:ea,label
             BRSET #bit,Y:aa,label
             BRSET #bit,Y:pp,label
             BRSET #bit,S,label

 Описание:

 Проверяется n-ный бит операнда. Если проверяемый бит равен 1, то вы-
 полнение  программы  продолжается  с адреса PC+смещение. PC содержит
 адрес следующей команды. Если проверяемый бит равен 0, то PC  увели-
 чивается  на  1, и программа продолжает выполняться последовательно.
 Однако адресный регистр, указанный в  поле  исполнительного  адреса,
 изменяется  всегда,  независимо от условия. Смещение - это 32-битное
 целое в двоично-дополнительном коде,  представляющее  собой  относи-
 тельное  расстояние  между  текущим  и новым значением PC. 32-битное
 смещение содержится в дополнительном  слове  команды.  Для  указания
 операнда  могут  использоваться  все режимы адресации с модификацией
 операнда в памяти. Может также  использоваться  абсолютная  короткая
 адресация, короткая адресация ввода-вывода и прямая регистровая. От-
 метим,  что если в качестве операнда S будет использован SSH, то ре-
 гистр указателя стека уменьшится на 1. Номер проверяемого  бита  (0-
 31)  задается непосредственными данными. Дополнительная информация -
 в Разделе A.10.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BRSET #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1011    dddd    dd  │   d0  1100  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRSET #bit,X:pp,label
                 BRSET #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    1ppp    pp  │   pp  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRSET #bit,X:aa,label
                 BRSET #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    0aaa    aa  │   aa  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BRSET #bit,X:ea,label
                 BRSET #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1000    MMMR    RR  │   00  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxxx))
 Смещение относительно PC - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти   S          Номер бита   bbbbb
 X-память     0          Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 8 + jx  тактов
 Расход памяти:    2 слова
:BScc
^BScc                УСЛОВНЫЙ ВЫЗОВ ПОДПРОГРАММЫ                 BScc
 --------------------------------------------------------------------
 Операция:   Если cc, то    PC      --> SSH
                            SR      --> SSL
                            PC + xx --> PC   либо   PC + xxxx --> PC
                                             либо   PC + Rn   --> PC
                      иначе PC + 1  --> PC

 Синтаксис:  BScc label(short)
             BScc label
             BScc Rn

 Описание:

 Если указанное условие истинно, то адрес команды,  следующей  непос-
 редственно  за  командой BScc, и регистр состояния заносятся в стек.
 Выполнение программы продолжается с адреса PC+смещение. PC  содержит
 адрес  следующей команды. Если указанное условие ложно, то PC увели-
 чивается на 1, и программа продолжает  выполняться  последовательно.
 Смещение - это 32-битное целое в двоично-дополнительном коде, предс-
 тавляющее  собой относительное расстояние между текущим и новым зна-
 чением PC. Могут использоваться режимы адресации с коротким смещени-
 ем,с длинным смещением, адресация относительно PC. 15-битное  корот-
 кое  смещение расширяется знаковым разрядом, чтобы образовывать кор-
 ректное смещение относительно PC. Дополнительная информация - в раз-
 деле A.10.

 "cc" может задавать следующие условия перехода :

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BScc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    11aa    aaaa    aa  │  1c  cccc  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BScc label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    0000    00  │   1c  cccc  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BScc Rn
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    001R    RR  │  1c  cccc  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение - 32 бита
 Короткое смещение - aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110

 Время исполнения: 6 + jx  тактов
 Расход памяти:    1 + ea  слов
:BSCLR
^BSCLR           ВЫЗОВ ПОДПРОГРАММЫ, ЕСЛИ БИТ РАВЕН 0           BSCLR
 --------------------------------------------------------------------
 Операция:   Если S{n}=0, то    PC        --> SSH
                                SR        --> SSL
                                PC + xxxx --> PC
                          иначе PC + 1    --> PC

 Синтаксис:  BSCLR #bit,X:ea,label
             BSCLR #bit,X:aa,label
             BSCLR #bit,X:pp,label
             BSCLR #bit,Y:ea,label
             BSCLR #bit,Y:aa,label
             BSCLR #bit,Y:pp,label
             BSCLR #bit,S,label

 Описание:

 Проверяется n-ный бит операнда. Если он равен нулю, то адрес  коман-
 ды, следующей непосредственно за командой BSCLR, и регистр состояния
 записываются  в  стек.  Выполнение  программы  продолжается с адреса
 PC+смещение. PC содержит адрес следующей команды.  Если  проверяемый
 бит равен 1, то PC увеличивается на 1, и программа продолжает выпол-
 няться  последовательно.  Однако  адресный регистр, указанный в поле
 исполнительного адреса, изменяется всегда,  независимо  от  условия.
 Смещение - это 32-битное целое в двоично-дополнительном коде, предс-
 тавляющее  собой относительное расстояние между текущим и новым зна-
 чением PC. 32-битное смещение содержится в дополнительном слове  ко-
 манды. Для указания операнда могут использоваться все режимы адреса-
 ции с модификацией операнда в памяти. Может также использоваться аб-
 солютная  короткая адресация, короткая адресация ввода-вывода и пря-
 мая регистровая. Отметим, что если в качестве  операнда-Источника  S
 используется  SSH, то регистр указателя стека уменьшится на 1; если,
 кроме этого, условие истинно, PC и регистр состояния запишутся в  ту
 позицию стека, откуда выбирался бит для тестирования. Номер проверя-
 емого бита (0-31) задается непосредственными данными. Дополнительная
 информация - в Разделе A.10.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BSCLR #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1111    dddd    dd  │   d0  0100  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSCLR #bit,X:pp,label
                 BSCLR #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1110    1ppp    pp  │   pp  010S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSCLR #bit,X:aa,label
                 BSCLR #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1110    0aaa    aa  │   aa  010S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSCLR #bit,X:ea,label
                 BSCLR #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1100    MMMR    RR  │   00  010S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Флаги регистра IER: не меняются

 Поля команды:

 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Смещение относительно PC - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти   S          Номер бита   bbbbb
 X-память     0          Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 8 + jx  тактов
 Расход памяти:    2 слова
:BSET
^BSET                ПРОВЕРКА  И  УСТАНОВКА  БИТА                BSET
 --------------------------------------------------------------------
 Операция:   D{n} --> C
             1    --> D{n}

 Синтаксис:  BSET #bit,X:ea
             BSET #bit,X:aa
             BSET #bit,X:pp
             BSET #bit,Y:ea
             BSET #bit,Y:aa
             BSET #bit,Y:pp
             BSET #bit,D

 Описание:

 Проверяется  n-ый бит операнда, и его состояние фиксируется в бите C
 кода условия. После проверки n-ый бит операнда устанавливается в  1.
 Могут  использоваться все режимы адресации с модификацией операнда в
 памяти. Может также использоваться регистровая, абсолютная  короткая
 и короткая адресация ввода-вывода.

 Номер  проверяемого  бита (0-31) задается непосредственными данными.
 Команда выполняет над операндом операцию  чтения-модификации-записи,
 т.е.  обращается к операнду дважды. Команда обеспечивает возможность
 одновременной проверки и установки в 1 бита, что может использовать-
 ся для синхронизации нескольких процессоров с общей памятью.  Допол-
 нительная информация - в Разделе A.10.

 Коды условия регистра CCR:

 Если SR  - операнд-Приемник:
    C  - 1, если указан бит 0; иначе не меняется.
    V  - 1, если указан бит 1; иначе не меняется.
    Z  - 1, если указан бит 2; иначе не меняется.
    N  - 1, если указан бит 3; иначе не меняется.
    I  - 1, если указан бит 4; иначе не меняется.
   LR  - 1, если указан бит 5; иначе не меняется.
   ^R  - 1, если указан бит 6; иначе не меняется.
    A  - 1, если указан бит 7; иначе не меняется.

 Для других операндов-Приемников:
    C  - 1, если тестируемый бит = 1; иначе 0.
    V  - Не меняется.
    Z  - Не меняется.
    N  - Не меняется.
    I  - Не меняется.
   LR  - Не меняется.
   ^R  - Не меняется.
    A  - Не меняется.

 Биты состояния регистра ER:

 Если SR - операнд-Приемник:
    INX   - 1, если указан бит  8; иначе не меняется.
    DZ    - 1, если указан бит  9; иначе не меняется.
    UNF   - 1, если указан бит 10; иначе не меняется.
    OVF   - 1, если указан бит 11; иначе не меняется.
    OPERR - 1, если указан бит 12; иначе не меняется.
    SNAN  - 1, если указан бит 13; иначе не меняется.
    NAN   - 1, если указан бит 14; иначе не меняется.
    UNCC  - 1, если указан бит 15; иначе не меняется.

 Для других операндов-Приемников:
    INX   - Не меняется.
    DZ    - Не меняется.
    UNF   - Не меняется.
    OVF   - Не меняется.
    OPERR - Не меняется.
    SNAN  - Не меняется.
    NAN   - Не меняется.
    UNCC  - Не меняется.

 Флаги регистра IER:

 Если SR - операнд-Приемник:
   SINX   - 1, если указан бит 16; иначе не меняется.
   SDZ    - 1, если указан бит 17; иначе не меняется.
   SUNF   - 1, если указан бит 18; иначе не меняется.
   SOVF   - 1, если указан бит 19; иначе не меняется.
   SIOP   - 1, если указан бит 20; иначе не меняется.

 Для других операндов-Приемников:
   SINX   - Не меняется.
   SDZ    - Не меняется.
   SUNF   - Не меняется.
   SOVF   - Не меняется.
   SIOP   - Не меняется.

 Формат команды: BSET #bit,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0011    dddd    dd  │ d0   1100   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BSET #bit,X:pp
                 BSET #bit,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0010    1ppp    pp  │ pp   110S   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BSET #bit,X:aa
                 BSET #bit,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0010    0aaa    aa  │ aa   110S   000b   bbbb  │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BSET #bit,X:ea
                 BSET #bit,Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0000    MMMR    RR  │ 00   110S   000b   bbbb  │
 ├───────────────────────────────────────┴──────────────────────────┤
 │необязательное дополнительное слово,содержащее исполнительный адр.│
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea> Rn - R0-R7 (только для режимов адресации с модификацией операн-
                  да в памяти)

 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти   S          Номер бита   bbbbb
 X-память     0          Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111


 Время исполнения: 4 + mvb  тактов
 Расход памяти:    1 + ea   слов
:BSR
^BSR                     ВЫЗОВ ПОДПРОГРАММЫ                       BSR
 --------------------------------------------------------------------
 Операция:   PC      --> SSH
             SR      --> SSL
             PC + xx --> PC   либо   PC + xxxx --> PC
                              либо   PC + Rn   --> PC

 Синтаксис:  BSR label(short)
             BSR label
             BSR Rn

 Описание:

 Адрес  команды, следующей непосредственно за командой BSR, и регистр
 состояния записываются в стек. Выполнение программы  продолжается  с
 адреса  PC+смещение. PC содержит адрес следующей команды. Смещение -
 это 32-битное целое в  двоично-дополнительном  коде,  представляющее
 собой  относительное  расстояние между текущим и новым значением PC.
 32-битное смещение содержится в дополнительном слове команды.  Могут
 использоваться режимы адресации с коротким смещением, с длинным сме-
 щением,  адресация относительно PC. 15-битное короткое смещение рас-
 ширяется знаковым разрядом, чтобы образовывать  корректное  смещение
 относительно PC. Дополнительная информация - в разделе A.10.

 Коды условия регистра CCR:  Не меняется.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BSR label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    11aa    aaaa    aa  │  11  1111  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: BSR label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    0000    00  │   11  1111  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSR Rn
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    001R    RR  │  11  1111  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение  - 32 бита
 Короткое смещение - aaaaaaaaaaaaaaa (15 бит)

 Время исполнения: 6 + jx  тактов
 Расход памяти:    1 + ea  слов
:BSSET
^BSSET           ВЫЗОВ ПОДПРОГРАММЫ, ЕСЛИ БИТ РАВЕН 1           BSSET
 --------------------------------------------------------------------
 Операция:   Если S{n}=1, то    PC        --> SSH
                                SR        --> SSL
                                PC + xxxx --> PC
                          иначе PC + 1    --> PC

 Синтаксис:  BSSET #bit,X:ea,label
             BSSET #bit,X:aa,label
             BSSET #bit,X:pp,label
             BSSET #bit,Y:ea,label
             BSSET #bit,Y:aa,label
             BSSET #bit,Y:pp,label
             BSSET #bit,S,label

 Описание:

 Проверяется  n-ный  бит операнда. Если он равен 1, то адрес команды,
 следующей непосредственно за командой BSSET, и регистр состояния за-
 писываются  в  стек.  Выполнение  программы  продолжается  с  адреса
 PC+смещение.  PC  содержит адрес следующей команды. Если проверяемый
 бит равен 0, то PC увеличивается на 1, и программа продолжает выпол-
 няться последовательно. Однако адресный регистр,  указанный  в  поле
 исполнительного  адреса,  изменяется  всегда, независимо от условия.
 Смещение - это 32-битное целое в двоично-дополнительном коде, предс-
 тавляющее собой относительное расстояние между текущим и новым  зна-
 чением  PC. 32-битное смещение содержится в дополнительном слове ко-
 манды. Для указания операнда-Источника могут использоваться все  ре-
 жимы адресации с модификацией операнда в памяти. Могут также исполь-
 зоваться абсолютная короткая адресация, короткая адресация ввода-вы-
 вода  и  прямая регистровая. Отметим, что если в качестве операнда S
 используется SSH, то регистр указателя стека уменьшится на  1;  если
 при  этом  условие истинно, то PC и регистр состояния запишутся в ту
 позицию стека, откуда выбирался бит для тестирования. Номер проверя-
 емого бита (0-31) задается непосредственными данными. Дополнительная
 информация - в Разделе A.10.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: BSSET #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1111    dddd    dd  │   d0  1100  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSSET #bit,X:pp,label
                 BSSET #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1110    1ppp    pp  │   pp  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSSET #bit,X:aa,label
                 BSSET #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1110    0aaa    aa  │   aa  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BSSET #bit,X:ea,label
                 BSSET #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1100    MMMR    RR  │   00  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Смещение относительно PC - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти   S          Номер бита   bbbbb
 X-память     0          Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-Память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 8 + jx  тактов
 Расход памяти:    2 слова
:BTST
^BTST                    ПРОВЕРКА БИТА                           BTST
 --------------------------------------------------------------------
 Операция:   S{n} --> C

 Синтаксис:  BTST #bit,X:ea
             BTST #bit,X:aa
             BTST #bit,X:pp
             BTST #bit,Y:ea
             BTST #bit,Y:aa
             BTST #bit,Y:pp
             BTST #bit,S

 Описание:

 Проверяется n-ый бит операнда, и его состояние отображается в бите C
 кода условия. Могут использоваться все режимы адресации с  модифика-
 цией операнда в памяти. Могут также использоваться абсолютная корот-
 кая адресация, короткая адресация ввода-вывода и прямая регистровая.

 Номер  проверяемого  бита (0-31) задается непосредственными данными.
 Эта команда в  сочетании  с  соответсвущими  командами  циклического
 сдвига полезна для преобразований из последовательного кода в парал-
 лельный.

 Если  в  качестве  операнда  указан регистр системного стека SSH, то
 после чтения из SSH указатель системного стека SP уменьшится на 1.

 Коды условия CCR:
             C  - 1, если тестируемый бит = 1; иначе 0.
             V  - Не меняется.
             Z  - Не меняется.
             N  - Не меняется.
             I  - Не меняется.
             LR - Не меняется.
             ^R - Не меняется.
             A  - Не меняется.

 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: BTST #bit,S

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    0111    dddd    dd  │   d0  1100  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BTST #bit,X:pp
                 BTST #bit,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    0110    1ppp    pp  │   pp  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BTST #bit,X:aa
                 BTST #bit,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    0110    0aaa    aa  │   aa  110S  000b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: BTST #bit,X:ea
                 BTST #bit,Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000    0010    0100    MMMR    RR  │ 00   110S   000b   bbbb  │
 ├───────────────────────────────────────┴──────────────────────────┤
 │необязательное дополнительное слово,содержащее исполнительный адр.│
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 <ea> Rn - R0-R7 (только для режимов адресации с модификацией операн-
                  да в памяти)

 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти   S          Номер бита   bbbbb
 X-память     0          Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-Память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111


 Время исполнения: 4 + mvb  тактов
 Расход памяти:    1 + ea   слов
:CLR
^CLR                         ОЧИСТКА                              CLR
 --------------------------------------------------------------------
 Операция:   0 --> D.L  (параллельная пересылка)

 Синтаксис:  CLR D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая часть операнда очищается. Эта команда не имеет  специального
 кода операции, она реализуется командой ANDC D,D.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - не меняется
   V  - всегда очищается
   Z  - всегда устанавливается в 1
   N  - всегда очищается
   I  - не меняется
   LR - не меняется
   ^R - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: CLR D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0uuu  1000  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                (uuu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:CMP
^CMP                         СРАВНЕНИЕ                            CMP
 --------------------------------------------------------------------
 Операция:   S2.L - S1.L   (параллельная пересылка)

 Синтаксис:  CMP S1,S2  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая  часть первого операнда вычитается из младшей части второго.
 Результат нигде не запоминается, однако устанавливаются  коды  усло-
 вия.

 Главное  различие  между командами CMPG и CMP - в условиях установки
 битов LR и ^R регистра кодов условий. Эти различия особенно  полезны
 при  выполнении  операций  отсечения  в  графических приложениях. Во
 фрагменте программы рисования отрезка команда CMP сравнивает  первую
 точку  отрезка X0 с Xmin и согласно результату устанавливает бит LR;
 команда CMPG сравнивает вторую точку отрезка X1 с Xmin, и устанавли-
 вает бит ^R в зависимости от значения LR. Отметим, что отрезок будет
 целиком допущен к рисованию, если бит A установлен (и  ^R=1),  в  то
 время  как  он  будет просто отвергнут, если бит ^R очищен ( и A=0).
 Такой выбор условий "допущен/отвергнут" был сделан для  того,  чтобы
 сделать  возможным  установку начального значения CCR одной командой
 ORI.

    ORI  #$E0,CCR   ; A, ^R, LR устанавливаются в 1, т.е. первона-
                    ; чально предполагается, что отрезок допущен
                    ; к рисованию, а не отвергнут

    MOVE         X:(R0)+N0,D0.L  Y:(R4)+,D1.S    ; загрузка X0, Xmin
    CMP   D1,D0  X:(R0)-N0,D0.L               ; X0-Xmin, загрузка X1
    CMPG  D1,D0                               ; X1=Xmin

 Разрядность операнда: 32-битное целое в двоично-доплонительном  коде
 Разрядность результата: отсутствует

 Коды условия регистра CCR:

   C  - 1, если был перенос из старшего значащего бита; иначе 0.
   V  - 1, если было переполнение; иначе 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - 0, если результат равен 0 или положительный без переполнения;
        0, если результат отрицательный с переполнением;
        иначе не меняется. См. пример команды FCMPG.
   ^R - не меняется. См. пример команды FCMPG.
   A  - 0, если результат отрицательный с переполнением;
        0, если результат положительный с переполнением;
        иначе не меняется. См. пример команды FCMPG.

 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: CMP S1,S2 (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   00  0sss  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:                       S2      (uu)
   S1      sss                       D       ddd
   Dn.L    nnn  ,   где nnn = 0-7    Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:CMPG
^CMPG                    ГРАФИЧЕСКОЕ СРАВНЕНИЕ                   CMPG
^                С УСТАНОВКОЙ ФЛАГА "ДОПУЩЕН/ОТВЕРГНУТ"
 --------------------------------------------------------------------
 Операция:   S2.L - S1.L  (параллельная пересылка)

 Синтаксис:  CMPG S1,S2  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая  часть первого операнда вычитается из младшей части второго.
 Результат нигде не запоминается, однако устанавливаются  коды  усло-
 вия.  Главное различие между командами CMPG и CMP - в условиях уста-
 новки битов LR и ^R регистра кодов условий.  Эти  различия  особенно
 полезны при выполнении операций отсечения в графических приложениях.
 Во фрагменте программы рисования отрезка команда CMP сравнивает пер-
 вую  точку отрезка X0 с Xmin и согласно результату устанавливает бит
 LR; команда CMPG сравнивает вторую точку отрезка X1 с Xmin, и  уста-
 навливает  бит ^R в зависимости от значения LR. Отметим, что отрезок
 будет целиком допущен к рисованию, если бит A установлен (и ^R=1), в
 то время как он будет просто отвергнут, если бит ^R очищен ( и A=0).
 Такой выбор условий "допущен/отвергнут" был сделан для  того,  чтобы
 сделать  возможным  установку начального значения CCR одной командой
 ORI.

    ORI  #$E0,CCR   ; A, ^R, LR устанавливаются в 1, т.е. первона-
                    ; чально предполагается, что отрезок допущен
                    ; к рисованию, а не отвергнут

    MOVE X:(R0)+N0,D0.L  Y:(R4)+,D1.S    ; загрузка X0, Xmin
    CMP  D1,D0  X:(R0)-N0,D0.L           ; X0-Xmin, загрузка X1
    CMPG D1,D0                           ; X1=Xmin

 Разрядность операнда:  32-битное целое в двоично-дополнительном коде
 Разрядность результата: отсутствует

 Коды условия регистра CCR:

   C  - 1, если результат отрицательный без переполнения;
        1, если результат положительный с переполнением; иначе 0.
   V  - 1, если было переполнение; иначе 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - 1 всегда (установливается для следующей комбинации CMP,CMPG.)
        См. пример команды FCMPG.
   ^R - 0, если LR=1 и результат отрицательный без переполнения;
        0, если LR=1 и результат положительный с переполнением;
        иначе не меняется. См. пример команды FCMPG.
   A  - 0, если результат отрицательный без переполнения;
        0, если результат положительный с переполнением;
        иначе не меняется. См. пример команды FCMPG.

 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: CMPG S1,S2  (синтаксис операции MOVE
                              см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  0sss  0110  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
   S1      sss                       S2      ddd
   Dn.L    nnn  ,   где nnn = 0-7    Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов команды MOVE
:DEBUGcc
^DEBUGcc         УСЛОВНЫЙ ПЕРЕХОД В РЕЖИМ ОТЛАДКИ             DEBUGcc
 --------------------------------------------------------------------
 Операция:   Если  cc, то войти в режим отладки

 Синтаксис:  DEBUGcc

 Описание:

 Если указанное условие истинно, то войти в  режим  отладки  DEBUG  и
 ждать  команд  типа OnCE. Если указанное условие ложно, то перейти к
 выполнению следующей команды.

 "cc" может задавать следующие условия перехода:

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1
       AL     - всегда истинно                   отсутствует

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: DEBUGcc
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    01  │  0c  cccc  1111   1111   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110
         AL         11111

 Время исполнения: 4 такта
 Расход памяти:    1 слово
:DEC
^DEC                     УМЕНЬШЕНИЕ НА ЕДИНИЦУ                    DEC
 --------------------------------------------------------------------
 Операция:   D.L - 1 --> D.L (параллельная пересылка)

 Синтаксис:  DEC D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Значение младшей части заданного операнда уменьшается на 1.  Резуль-
 тат запоминается в младшей части D.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если был перенос из старшего значащего бита; иначе 0.
   V  - 1, если было переполнение; иначе 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: DEC  D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0111  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:DO
^DO                          НАЧАТЬ ЦИКЛ                           DO
 --------------------------------------------------------------------
 Операция:   LA     --> SSH
             LC     --> SSL
             X:<ea> --> LC    либо    Y:<ea> --> LC
                              либо    S      --> LC
                              либо    #xxx   --> LC
             PC     --> SSH
             SR     --> SSL
             expr   --> LA
             1      --> LF

 Синтаксис:  DO X:ea,label
             DO Y:ea,label
             DO S,label
             DO #число_циклов,label

 Описание:

 Начать цикл DO с заданным числом повторений и количеством входящих в
 цикл  команд (параметр "expr"). Чтобы начать выполнение цикла, ника-
 ких других действий, кроме команды DO, не требуется. Цикл  DO  может
 быть вложенным, а число повторений может передаваться как параметр.

 На  первом такте исполнения команды текущее содержимое регистров ад-
 реса цикла (LA) и счетчика циклов (LC) засылаются в стек. Затем опе-
 ранд-Источник команды DO загружается в регистр счетчика циклов (LC).
 Регистр LC содержит количество повторений  цикла,  которое  осталось
 выполнить,  и  доступен изнутри цикла DO с некоторыми ограничениями.
 Если LC равен 0, то DO цикл выполняется 2**32 раз. Для  задания  ис-
 полнительного  адреса операнда-Источника могут быть использованы все
 косвенные режимы адресации через адресный регистр (кроме адресации с
 длинным смещением). Может использоваться  также  прямой  регистровый
 режим  адресации. Если задан   короткий непосредственный операнд, то
 в LC загружается 19-битное число, дополненное слева нулями.

 На втором такте исполнения команды текущее содержимое регистра счет-
 чика команд (PC) и регистр состояния (SR) засылаются в стек. Запоми-
 нание в стеке регистров LA, LC, PC  и  SR  позволяет  организовывать
 вложенные  циклы.  Затем регистр LA загружается 32-битным абсолютным
 адресом из дополнительного слова команды DO. Значение регистра счет-
 чика команд (PC), записанное в системный  стек,  представляет  собой
 адрес  первой команды, следующей за командой DO (т.е. первой команды
 цикла). Это значение прочитывается (т.е. копируется, а не выталкива-
 ется) из вершины системного стека для того, чтобы вернуться в начало
 цикла для следующего прохода.

 На третьем такте исполнения команды устанавливается флаг цикла (LF).
 Это приводит к тому, что PC будет постоянно сравниваться  с  LA  для
 выяснения, не была ли выбрана последняя команда цикла. Если LA равен
 PC,  то  последняя  команда  цикла была выбрана, и тогда проверяется
 счетчик циклов (LC). Если LC не равен 1, то он уменьшается  на  1  и
 SSH  загружается в PC, чтобы перейти к первой команде цикла. Если LC
 равен 1, то начинается отработка завершения цикла.

 При выполнении цикла DO команды фактически выбираются на каждом про-
 ходе. Следовательно, цикл DO может прерываться. Циклы DO могут  быть
 вложенными.  Когда  циклы  DO вложены, то адреса концов циклов также
 должны быть вложенными и не допускается их равенство. Ассемблер  ге-
 нерирует  сообщение  об  ошибке, когда циклы DO вложены неправильно.
 Вложенные циклы DO показаны в примере.

 ПРИМЕЧАНИЕ: Ассемблер рассчитывает адрес конца цикла, который должен
     быть загружен в LA (дополнительное слово с абсолютным  адресом),
     следующим  образом: вычисляет "выражение" конца цикла и вычитает
     из него 1. Это сделано для учета случая, когда последнее слово в
     цикле DO является двусловной командой. Таким  образом,  "выраже-
     ние" конца цикла в исходном коде должно представлять собой адрес
     команды,  следующей  за последней командой цикла, как показано в
     примере. Это является отличительной особенностью размещения  ме-
     ток  для команд DO и DOR от других команд. В данном случае метки
     размещаются на той же самой строке, что и  команда,  на  которую
     осуществляется выход из цикла.

 При  обработке  конца  цикла  флаг цикла (LF) из младшей части (SSL)
 верхнего слова стека (SP) записывается в регистр состояния (SR), со-
 держимое регистра адреса цикла  (LA)  восстанавливается  из  старшей
 части  (SSH)  второго сверху слова стека (SP-1), содержимое счетчика
 цикла (LC) восстанавливается из младшей части (SSL)  второго  сверху
 слова  стека (SP-1), и указатель стека уменьшается на 2. Выборка ко-
 манд теперь продолжается с адреса команды,  следующей  за  последней
 командой  цикла  DO. Отметим, что LF является единственным битом ре-
 гистра состояния (SR), который  восстанавливается  после  выхода  из
 цикла DO.

 Примечание: Флаг цикла (LF) очищается по аппаратному сбросу (RESET).

 Ограничения:

 Сравнение  на конец цикла, описанное выше, в действительности проис-
 ходит во время выборки команды. Т.е. LA сравнивается с PC, когда вы-
 полняется команда по адресу LA-2.  Следовательно,  команды,  которые
 обращаются  к регистрам управления программой и/или изменяют порядок
 выполнения команд программы не могут использоваться по адресам LA-2,
 LA-1 или LA.

 Правильное выполнение операций цикла DO не гарантируется,  если  ко-
 манды  по адресам LA-2, LA-1 или LA используют один из регистров уп-
 равления программой SR, SP, SSL, LA, LC или (неявно) PC  в  качестве
 регистра-Приемника. Аналогично, регистр управления программой SSH не
 может  быть  определен  как регистр-Источник или Приемник в команде,
 начинающихся с адреса LA-2, LA-1 или LA. Более того, регистр SSH  не
 может  быть определен как регистр-Источник собственно в команде DO и
 LA не может использоваться как адрес перехода в командах перехода на
 подпрограмму (т.е. JSR, JScc, JSSET или JSCLR на LA). Команда DO  не
 может быть повторена командой REP.

 Следующие  команды  не могут находиться на указанной позиции в конце
 цикла DO:

   по адресам LA-2, LA-1 и LA:
         DO
         BCHG/BCLR/BSET  LA, LC, SR, SP, SSH, SSL
         BTST SSH
         JCLR/JSET/JSCLR/JSSET SSH
         LEA   в  LA, LC, SR, SP, SSH, SSL
         LRA в LA, LC, SR, SP, SSH, SSL
         MOVEC/M/P/S из SSH
         MOVEC/I/M/P/S в LA, LC, SR, SP, SSH, SSL
         ANDI MR
         ORI MR

   по адресу LA:
         любые двухсловные команды
         (F)Jcc, JMP, (F)JScc, JSR, (F)Bcc, BRA, (F)BScc, BSR
         LRA, REP, RESET, RTI, RTR, RTS, STOP, WAIT

   Другие ограничения:
         BSR     в (LA), если флаг цикла установлен в 1
         (F)BScc в (LA), если флаг цикла установлен в 1
         JSR     в (LA), если флаг цикла установлен в 1
         (F)JScc в (LA), если флаг цикла установлен в 1
         JSCLR   в (LA), если флаг цикла установлен в 1
         JSSET   в (LA), если флаг цикла установлен в 1
         BSCLR   в (LA), если флаг цикла установлен в 1
         BSSET   в (LA), если флаг цикла установлен в 1

 Команда DO не может повторяться командой REP.

 Примечание: Вследствие конвейеризации новое содержимое адресного ре-
     гистра-Приемника не будет доступно для следующей  команды  (т.е.
     существует  задержка  конвейера на один такт), если адресный ре-
     гистр (R0-R7, N0-N7 или M0-M7)  изменяется  командой  типа  MOVE
     (LUA,  Tcc,  MOVE, MOVEC, MOVEM, MOVEP или параллельная пересыл-
     ка). Это ограничение также применимо в ситуации, когда последняя
     команда цикла DO изменяет адресный  регистр,  а  первая  команда
     цикла  использует  этот же регистр. Первая команда цикла следует
     за последней.

 Аналогично, так как команда DO  обращается  к  регистрам  управления
 программой, то перед командой DO не должны использоваться никакие из
 следующих команд:

 Непосредственно перед DO:

         BCHG/BCLR/BSET    LA, LC, SSH, SSL, SP
         LEA            в  LA, LC, SSH, SSL, SP
         LRA            в  LA, LC, SSH, SSL, SP
         MOVEC/I/M/S    в  LA, LC, SSH, SSL, SP
         MOVEC/M/S      из SSH

 При  повторении  цикла  каждая  команда каждый раз выбирается снова.
 Следовательно, команды, выполняемые в цикле, могут быть  прерваны  и
 могут  быть вложения. Значение PC, записанное в стек, является адре-
 сом первой команды после DO. Это значение прочитывается  из  вершины
 системного  стека  для возврата в начало цикла. Когда циклы вложены,
 адреса конца циклов также должны быть вложенными  и  не  допускается
 равенства.

 Пример:
         DO      #n1,END1
         DO      #n2,END2
         MOVE    D0,X:(R0)+
 END2
         ADD     D1,D2   X:(R1)+,D3
 END1

 Ассемблер  подсчитывает адрес конца цикла (LA) (дополнительное слово
 с абсолютным адресом xxxx), следующим образом: вычисляет "выражение"
 ("expr") конца цикла и вычитает из него 1. Таким  образом,  "выраже-
 ние"  конца  цикла в исходном коде представляет собой адрес команды,
 следующей за последней командой цикла. Если  для  обозначения  конца
 цикла  используется  метка,  то ее следует размещать после последней
 команды цикла.

 Регистр LA сравнивается с PC, чтобы выяснить, не достигнут ли  конец
 цикла. Если конец цикла достигнут, то счетчик цикла (LC) проверяется
 на  равенство 1. Если LC не равен 1, тогда он уменьшается на 1. Если
 LC равен 1, то указатель системного стека продвигается и продолжает-
 ся последовательная выборка команд. В противном случае  значение  PC
 выбирается из вершины стека и в результате извлекается первая коман-
 да цикла.

 Т.к.  сравнение  на конец цикла происходит во время выборки и до вы-
 полнения последней команды цикла, команды, изменяющие последователь-
 ность исполнения программы или системный стек, могут быть  использо-
 ваны  вблизи  конца  цикла  с некоторыми ограничениями. Правильность
 операций цикла DO гарантируется, если ни одна команда, расположенная
 по адресам LA-2, LA-1 или LA, не обращается к  регистрам  управления
 программой  SR, SP, SSL, LA, LC или (неявно) PC как регистрам-Прием-
 никам и не обращается к SSH как  регистру-Источнику  или  Приемнику.
 SSH  не может быть использован как регистр-Источник собственно в ко-
 манде DO. Ассемблер будет выдавать  предупреждение,  если  подпавшие
 под  ограничения команды быдут обнаружены в запретных для них грани-
 цах. Полный список ограничений см. в Разделе A.10.

 Замечания по применению:

   DO SP,label   Фактическим значение, которое будет загружено в LC,
                 будет значение SP перед командой DO, увеличенное на
                 единицу.

   DO SSL,label  В LC будет загружено  предыдущее  значение,  которое
                 было сохранено в стеке собственно командой DO.

 Коды условия регистра CCR:  Не меняются
 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: DO #число_циклов,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    1011    iiii    ii  │   ii  iiii  1iii  iiii   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: DO S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    1010    0000    00  │   00  0000  1ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: DO X:ea,label
                 DO Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    100S    MMMR    RR  │   00  0000  1000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Абсолютный адрес - 32 бита
 Непосредственный короткий операнд - iiiiiiiiiiiiiiiiiii (19 бит)

 Тип памяти   S
 X-память     0
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 6 + mv  тактов
 Расход памяти:    2 слова
:DOR
^DOR                 НАЧАТЬ ЦИКЛ ОТНОСИТЕЛЬНО PC                  DOR
 --------------------------------------------------------------------
 Операция:   LA        --> SSH
             LC        --> SSL
             X:<ea>    --> LC    либо    Y:<ea> --> LC
                                 либо    S      --> LC
                                 либо    #xxx   --> LC
             PC        --> SSH
             SR        --> SSL
             PC + xxxx --> LA
             1         --> LF

 Синтаксис:  DOR  X:ea,label
             DOR  Y:ea,label
             DOR  S,label
             DOR  #число_циклов,label

 Описание:

 Эта  команда  инициирует начало цикла с указанием конца относительно
 PC. Текущее значение адреса цикла (LA) и счетчика циклов (LC)  засы-
 лаются в стек. Организовав соответствующее управление системным сте-
 ком,  можно  обеспечить неограниченное число вложений. PC и SR также
 засылаются в системный стек. PC складывается с  32-битным  смещением
 из  дополнительного  слова  и полученный результат загружается в ре-
 гистр адреса цикла (LA). Во время сложения PC указывает на следующую
 команду. Исполнительный адрес указывает на число  повторений  цикла,
 которое  загружается  в  счетчик циклов (LC). Цикл DO повторяется LC
 раз. Если LC=0, то цикл повторяется 2**32 раз. Могут быть  использо-
 ваны  все  косвенные  режимы адресации через адресный регистр (кроме
 адресации с длинным смещением). Может  также  использоваться  прямой
 регистровый режим адресации. Если задается короткий непосредственный
 операнд,  то  он  загружается в LC, предварительно дополненный до 19
 битов нулями.

 При повторении цикла каждая команда  каждый  раз  выбирается  снова.
 Следовательно,  команды,  выполняемые в цикле, могут быть прерваны и
 могут быть вложения. Значение PC, записанное в стек, является  адре-
 сом  первой команды после DOR. Это значение прочитывается из вершины
 системного стека для возврата в начало цикла. Если команды DOR  вло-
 жены, адрес конца цикла также должен быть вложенным и не допускается
 равенства. Ниже приводится пример:

 Пример:
         DOR     #n1,END1
         DOR     #n2,END2
         MOVE    D0,X:(R0)+
 END2
         ADD     D1,D2   X:(R1)+,D3
 END1

 Ассемблер  подсчитывает адрес конца цикла LA (дополнительное слово с
 адресом xxxx относительно PC), следующим образом: вычисляет  выраже-
 ние и вычитает из него 1. Таким образом, в исходном коде конец цикла
 представляется командой, следующей за последней командой цикла. Если
 для обозначения конца цикла используется метка, то ее следует разме-
 щать после последней команды цикла.

 Регистр  LA  сравнивается  с PC для выяснения, не достигнут ли конец
 цикла. Если конец цикла достигнут, то счетчик цикла (LC) проверяется
 на равенство 1. Если LC не равен 1, тогда он уменьшается на 1.  Если
 LC равен 1, то указатель системного стека продвигается и продолжает-
 ся  последовательная  выборка команд. В противном случае значение PC
 прочитывается из вершины стека, и снова  выбирается  первая  команда
 цикла.

 Так  как  сравнение  на конец цикла происходит во время выборки и до
 выполнения команды, то команды, изменяющие последовательность испол-
 нения программы или системный стек, могут быть  использованы  вблизи
 конца  цикла с некоторыми ограничениями. Правильность операций цикла
 гарантируется, если ни одна команда, расположенная по адресам  LA-2,
 LA-1 или LA, не обращается к регистрам управления программой SR, SP,
 SSL, LA, LC или (неявно) PC как регистрам-Приемникам и не обращается
 к  SSH как регистру-Источнику или Приемнику. SSH не может быть также
 использован как регистр-Источник собственно в команде DOR. Ассемблер
 будет выдавать предупреждение, если подпавшие под ограничения коман-
 ды быдут обнаружены в запретных для них границах. Полный список  ог-
 раничений см. в Разделе A.10.

 Замечания по использованию:

   DOR SP,label  Фактическим значением, которое будет загружено в LC,
                 будет значение SP перед командой DOR, увеличенное на
                 единицу.

   DOR SSL,label В  LC  будет  загружено предыдущее значение, которое
                 было сохранено в стеке собственно командой DOR.

 Коды условия регистра CCR:  Не меняются
 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: DOR #число_циклов,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    1011    iiii    ii  │   ii  iiii  0iii  iiii   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  смещение относительно PC                        │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: DOR S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    1010    0000    00  │   00  0000  0ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  смещение относительно PC                        │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: DOR X:ea,label
                 DOR Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    100S    MMMR    RR  │   00  0000  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  смещение относительно PC                        │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Смещение относительно PC - 32 бита
 Непосредственный короткий операнд - iiiiiiiiiiiiiiiiiii (19 бит)

 Тип памяти   S
 X-память     0
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 8 + mv   тактов
 Расход памяти:    2 слова
:ENDDO
^ENDDO               ЗАВЕРШИТЬ ТЕКУЩИЙ ЦИКЛ DO                  ENDDO
 --------------------------------------------------------------------
 Операция:   SSL (LF) --> SR
             SP-1     --> SP
             SSH      --> LA
             SSL      --> LC
             SP-1     --> SP

 Синтаксис:  ENDDO

 Описание:

 Эта команда вызывает завершение текущего цикла DO до того, как теку-
 щий счетчик цикла (LC) станет равным 1. Если требуется, текущее зна-
 чение счетчика циклов может быть прочитано перед выполнением команды
 ENDDO. Вначале из  системного  стека  восстанавливается  флаг  цикла
 (LF), а оставшаяся часть регистра состояния (SR) и программный счет-
 чик (PC) из системого стека выталкиваются. Затем из системного стека
 восстанавливаются регистры адреса цикла (LA) и счетчик циклов (LC).

 Ограничения:

 Вследствие конвейеризации и того факта, что команда ENDDO обращается
 к  регистрам  управления  программой, перед командой ENDDO не должны
 использоваться никакие из следующих команд:

 Непосредственно перед ENDDO:

         MOVEC          в  LA, LC, SSH, SSL, SP
         MOVEM          в  LA, LC, SSH, SSL, SP
         MOVEP          в  LA, LC, SSH, SSL, SP
         MOVEC          из SSH
         MOVEM          из SSH
         MOVEP          из SSH
         ORI MR
         ANDI MR

 Команда ENDDO не может также располагаться непосредственно  за  пос-
 ледней командой цикла DO (по адресу LA-1).

 Коды условия регистра CCR:  Не меняются
 Биты состояния регистра ER: Не меняются
 Флаги регистра IER:         Не меняются

 Формат команды: ENDDO
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  00  0000  0000   0111   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  отсутствуют

 Время исполнения: 2 такта
 Расход памяти:    1 слово
:EOR
^EOR                     ИСКЛЮЧАЮЩЕЕ "ИЛИ"                        EOR
 --------------------------------------------------------------------
 Операция:   D.L && S.L --> D.L    (параллельная пересылка)

 Синтаксис:  EOR S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычисляется  "исключающее  или" младших частей указанных операндов и
 результат запоминается в младшей части D.

 Разрядность операндов:  32-битные целые.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: EOR S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   00  0sss  uu10  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:EXT
^EXT                 РАСШИРЕНИЕ ЗНАКОМ ПОЛУСЛОВА                  EXT
 --------------------------------------------------------------------
 Операция:   D.L {15:0} --> D.L {15:0}   (параллельная пересылка)
             D.L {15}   --> D.L {31:16}

 Синтаксис:  EXT D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Заполнение знаковым разрядом младшего 16-битного слова  D.L  старших
 16 битов D.L.

 Разрядность операнда:   16-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется
   V  - всегда 0
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: EXT  D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0001  uu00  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:EXTB
^EXTB                    РАСШИРЕНИЕ ЗНАКОМ БАЙТА                 EXTB
 --------------------------------------------------------------------
 Операция:   D.L {7:0} --> D.L {7:0}   (параллельная пересылка)
             D.L {7}   --> D.L {31:8}

 Синтаксис:  EXTB D  (синтаксис операции MOVE см.описание MOVE)


%ВНИМАНИЕ: эта команда на процессоре (но не в симуляторе) НЕ РАБОТАЕТ -
%после первого отрицательного байта все последующие будут расширяться
%со знаком МИНУС. Рекомендуется заменять одну команду
%       extb d0
%на 2 команды
%       asl     #8,d0
%       splitb  d0,d0


 Описание:
 Заполнение  знаковым  разрядом  младшего  байта D.L старших 24 битов
 D.L.

 Разрядность операнда:   8-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется
   V  - всегда 0
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: EXTB D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0001  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:FABS.S
^FABS.S                  АБСОЛЮТНАЯ ВЕЛИЧИНА                   FABS.S
 --------------------------------------------------------------------
 Операция:   D --> округление --> D      (параллельная пересылка)
                  до одинарной
                   точности

 Синтаксис:  FABS.S D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Абсолютное значение операнда округляется до одинарной точности и ре-
 зультат запоминается в D.

 Разрядность операнда:   повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: одинарной точности с плавающей точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - всегда 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0
   DZ    - всегда 0
   UNF   - 1, если результат потерял значимость; иначе 0
   OVF   - 1, если было переполнение результата; иначе 0
   OPERR - всегда 0
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0
   NAN   - 1, если результат NaN (не число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FABS.S D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0001  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FABS.X
 FABS.X                  АБСОЛЮТНАЯ ВЕЛИЧИНА                   FABS.X
 --------------------------------------------------------------------
 Операция:   D --> D     (параллельная пересылка)

 Синтаксис:  FABS.X D  (синтаксис операции MOVE см.описание MOVE)

 Описание:
 Абсолютное значение операнда запоминается в качестве результата.

 Разрядность операнда:   повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - всегда 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - всегда 0
   DZ    - всегда 0
   UNF   - всегда 0
   OVF   - всегда 0
   OPERR - всегда 0
   SNAN  - 1, если операнд - сигнализирующее NaN (не-число); иначе 0
   NAN   - 1, если результат NaN (не-число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FABS.X D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0001  uu10  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FADD.S
^FADD.S              СЛОЖЕНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ               FADD.S
 --------------------------------------------------------------------
 Операция:   D + S --> округление --> D    (параллельная пересылка)
                      до одинарной
                        точности

 Синтаксис:  FADD.S S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Складываются  два  указанных операнда, результат округляется до оди-
 нарной точности и запоминается в D.

 Разрядность операндов:  повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: одинарной точности с плавающей точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0
   DZ    - всегда 0
   UNF   - 1, если результат потерял значимость; иначе 0
   OVF   - 1, если было переполнение результата; иначе 0
   OPERR - 1, если операнды - противоположные по знаку бесконечности;
           иначе 0.
   SNAN  - 1, если операнд - сигнализирующее NaN (не число); иначе 0
   NAN   - 1, если результат NaN (не число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FADD.S S,D  (синтаксис операции MOVE
                              см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FADD.X
^FADD.X              СЛОЖЕНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ               FADD.X
 --------------------------------------------------------------------
 Операция:   D + S --> округление --> D    (параллельная пересылка)
                      до одинарной
                       повышенной
                        точности

 Синтаксис:  FADD.X S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:
 Складываются два указанных операнда и результат запоминается в D.

 Разрядность операндов:  повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0
   DZ    - всегда 0
   UNF   - 1, если результат потерял значимость; иначе 0
   OVF   - 1, если было переполнение результата; иначе 0
   OPERR - 1, если операнды - противоположные по знаку бесконечности;
           иначе 0.
   SNAN  - 1, если операнд - сигнализирующее NaN (не число); иначе 0
   NAN   - 1, если результат NaN (не число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FADD.X S,D   (синтаксис операции MOVE
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu00  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da   тактов
 Расход памяти:    1 + mv        слов
:FADDSUB.S
^FADDSUB.S               СЛОЖЕНИЕ И ВЫЧИТАНИЕ               FADDSUB.S
 --------------------------------------------------------------------
 Операция:   D1 + D2 --> округление --> D2  (параллельная пересылка)
                        до одинарной
                          точности

             D1 - D2 --> округление --> D1
                        до одинарной
                          точности

 Синтаксис:  FADDSUB.S D1,D2  (синтаксис операции MOVE
                               см.описание MOVE)

 Описание:

 Складываются и вычитаются два указанных операнда, результаты  округ-
 ляются до одинарной точности. Округленный результат сложения запоми-
 нается в D2, а вычитания - в D1.

 Разрядность операндов:  повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: одинарной точности с плавающей точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат сложения или вычитания неточный; иначе 0
   DZ    - всегда 0
   UNF   - 1,  если  результат сложения или вычитания потерял
           значимость; иначе 0
   OVF   - 1, если было переполнение результата сложения или
           вычитания; иначе 0
   OPERR - 1, если операнды сложения - противоположные по знаку
           бесконечности или операнды вычитания - бесконечности
           одинакового знака; иначе 0.
   SNAN  - 1, если любой операнд - сигнализирующее NaN  (не  число);
           иначе 0
   NAN   - 1, если результат сложения NaN (не число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FADDSUB.S D1,D2  (синтаксис операции MOVE
                                   см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      sss
         Dn      nnn  ,   где nnn = 0-7

         D2      ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FADDSUB.X
^FADDSUB.X               СЛОЖЕНИЕ И ВЫЧИТАНИЕ               FADDSUB.X
 --------------------------------------------------------------------
 Операция:   D1 + D2 --> округление --> D2  (параллельная пересылка)
                        до одинарной
                         повышенной
                          точности

             D1 - D2 --> округление --> D1
                        до одинарной
                         повышенной
                          точности

 Синтаксис:  FADDSUB.X D1,D2  (синтаксис операции MOVE
                               см.описание MOVE)

 Описание:

 Складываются  и вычитаются два указанных операнда, результаты округ-
 ляются до повышенной одинарной точности. Результат сложения  запоми-
 нается в D2, а вычитания - в D1.

 Разрядность операндов:  повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат сложения или вычитания неточный; иначе 0
   DZ    - всегда 0
   UNF   - 1,  если  результат сложения или вычитания потерял
           значимость; иначе 0
   OVF   - 1, если было переполнение результата сложения или
           вычитания; иначе 0
   OPERR - 1, если операнды сложения - противоположные по знаку
           бесконечности или операнды вычитания - бесконечности
           одинакового знака; иначе 0.
   SNAN  - 1, если любой операнд - сигнализирующий NaN  (не-число);
           иначе 0
   NAN   - 1, если результат сложения NaN (не-число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FADDSUB.X D1,D2   (синтаксис операции MOVE
                                    см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu01  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      sss
         Dn      nnn  ,   где nnn = 0-7

         D2      ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FBcc
^FBcc                    УСЛОВНЫЙ ПЕРЕХОД                        FBcc
 --------------------------------------------------------------------
 Операция:   Если  cc, то    PC + xx --> PC   либо  PC + xxxx --> PC
                                              либо  PC + Rn   --> PC
                       иначе PC + 1  --> PC

 Синтаксис:  FBcc label (short)
             FBcc label
             FBcc Rn

 Описание:

 Если указанное условие истинно,  то  адрес  команды,  непоседственно
 следующей  за FBcc, и регистр состояния запоминаются в стеке. Выпол-
 нение программы затем продолжается с адреса PC+смещение. PC содержит
 адрес следующей команды. Если указанное условие ложно, то PC  увели-
 чивается, и программа продолжает выполняться последовательно. Смеще-
 ние - это 32-битное целое в двоично-дополнительном коде, представля-
 ющее  собой относительное расстояние между текущим и новым значением
 PC. Могут использоваться режимы адресации с  коротким  смещением,  с
 длинным смещением, относительно PC. Короткое 15-битное смещение рас-
 ширяется  знаковым  разрядом, чтобы образовывать корректное смещение
 относительно PC. Ограничения см. в Разделе A.10.
 Бит  UNCC  регистра

 ER и флаг
 SIOP
 регистра IER устанавливаются,
 если был установлен бит

 NAN регистра ER
 и условие отмечено признаком "Да"
 в последней
 колон-

 ке.

 "cc" может задавать следующие условия:


      Дополнительное условие

   Мнемоника                     Условие           установки
  UNCC
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочены          N = 0                  Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочены        N = 1                  Нет

 Примечание: Операнды для условия ERR берутся из регистра ER.
             См.описание UNCC в Разделе A.4.

 Коды условия регистра CCR:    Не меняются.

 Биты состояния регистра ER:

   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется

   UNCC  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Флаги регистра IER:

   SINX  - не меняются
   SDZ   - не меняются
   SUNF  - не меняются
   SOVF  - не меняются

   SIOP  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Формат команды: FBcc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    10aa    aaaa    aa  │  1c  cccc  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: FBcc label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    0000    00  │   1c  cccc  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: FBcc Rn
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    001R    RR  │  1c  cccc  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение - 32 бита
 Короткое смещение - aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 6 + jx  тактов
 Расход памяти:    1 + ea  слов
:FBScc
^FBScc               УСЛОВНЫЙ ВЫЗОВ ПОДПРОГРАММЫ                FBScc
 --------------------------------------------------------------------
 Операция:   Если  cc, то  PC      --> SSH
                           SR      --> SSL
                           PC + xx --> PC   либо  PC + xxxx --> PC
                                            либо  PC + Rn   --> PC
                    иначе  PC + 1  --> PC

 Синтаксис:  FBScc label (short)
             FBScc label
             FBScc Rn

 Описание:

 Если  указанное  условие истинно, то адрес команды, следующей непос-
 редственно за командой FBScc, и  регистр  состояния  записываются  в
 стек.  Выполнение  программы  продолжается с точки, заданной адресом
 относительного PC. Если указанное условие ложно, то PC  увеличивает-
 ся, и адрес относительно PC игнорируется. Могут использоваться режи-
 мы адресации с коротким смещением, с длинным смещением, относительно
 PC. 15-битное короткое смещение расширяется знаковым разрядом, чтобы
 образовывать  корректное  смещение  относительно PC. При сложении со
 смещением PC указывает на следующую команду. Ограничения см. в  Раз-
 деле  A.10.
 Бит UNCC регистра ER и флаг SIOP регистра IER устанавли-

 ваются,
 если
 был установлен бит NAN регистра ER и  условие  отмечено
 признаком  "Да"
 в  последней
 колонке. Это действие происходит перед
 записью в стек регистра состояния.

 "cc" может задавать следующие условия:


      Дополнительное условие

   Мнемоника                     Условие           установки
  UNCC
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочено          N = 0                  Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочено        N = 1                  Нет

 Примечание: Операнды для условия ERR берутся из регистра ER.
             * См.описание UNCC в Разделе A.4.

 Коды условия регистра CCR:   Не меняются.

 Биты состояния регистра ER:

   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется

   UNCC  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Флаги регистра IER:

   SINX  - не меняются
   SDZ   - не меняются
   SUNF  - не меняются
   SOVF  - не меняются

   SIOP  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Формат команды: FBScc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    11aa    aaaa    aa  │  1c  cccc  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: FBScc метка
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    0000    00  │   1c  cccc  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    смещение относительно PC                      │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: FBScc Rn
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    001R    RR  │  1c  cccc  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение - 32 бита
 Короткое смещение - aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 6 + jx  тактов
 Расход памяти:    1 + ea  слов
:FCLR
^FCLR            ОЧИСТКА РЕГИСТРА ПЛАВАЮЩЕЙ АРИФМЕТИКИ           FCLR
 --------------------------------------------------------------------
 Операция:   0 --> D     (параллельная пересылка)

 Синтаксис:  FCLR D  (синтаксис операции MOVE см.описание MOVE)

 Описание:  Очищаются все 96 бит операнда.

 Разрядность операнда:   повышенной двойной точности с плавающей
                         точкой
 Разрядность результата: повышенной двойной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется
   V  - Не меняется
   Z  - всегда 1
   N  - всегда 0
   I  - всегда 0
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

     INX   - всегда 0
     DZ    - всегда 0
     UNF   - всегда 0
     OVF   - всегда 0
     OPERR - всегда 0
     SNAN  - не меняется
     NAN   - всегда 0
     UNCC  - всегда 0

 Флаги регистра IER:     Не меняются.

 Формат команды: FCLR  D   (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0000  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FCMP
^FCMP            СРАВНЕНИЕ ОПЕРАНДОВ С ПЛАВАЮЩЕЙ ТОЧКОЙ          FCMP
 --------------------------------------------------------------------
 Операция:   S2 - S1     (параллельная пересылка)

 Синтаксис:
 FCMP S1,S2  (синтаксис операции MOVE см. описание MOVE.)

 Описание:

 Первый операнд вычитается из второго. Результат не запоминается, од-
 нако формируются коды условия. В смысле формирования  кодов  условий
 эта команда отличается от FSUB, когда S1=S2; в этом случае результат
 всегда  равен +0, и следовательно, бит N очищается. Заметим, что это
 справедливо даже в случае, когда S1 и S2 - бесконечности.

 Разрядность операндов:  повышенной одинарной точности с плавающей
                         точкой

 Разрядность результата: отсутствует.


 Коды условия:
 (Примечание: поскольку результат никуда на помещается,  округления
 не происходит и биты кодов условий устанавливаются в предположении,
 что результат бесконечно точен.)

   C  - Не меняется
   V  - Не меняется
   Z  - 1, если исходные операнды равны; иначе 0
   N  - 1, если результат отрицательный; иначе 0
   I  - 1, если любой из операндов - бесконечность;
           иначе 0
   LR - 0, если результат положительный, ноль или NaN
           (если обнуляется из-за первого, то точка
           допущена; см. пример в FCMPG);
           иначе не меняется
   ^R - 0, если результат NaN; иначе не меняется
   A  - 0, если результат NaN; 0, если результат отрицательный и не
           ноль; иначе не меняется.

 Биты состояния регистра
 ER:
     INX   - всегда 0
     DZ    - всегда 0
     UNF   - всегда 0
     OVF   - всегда 0
     OPERR - всегда 0
     SNAN  - 1, если операнд - сигнализирующее NaN; иначе 0
     NAN   - 1, если операнд - NaN; иначе 0
     UNCC  - всегда 0

 Формат команды: FCMP S1,S2  (синтаксис операции MOVE
                              см.описание MOVE)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   01  1sss  uu01  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Флаги IER:  Изменяются согласно стандартным правилам.

 Поля команды:
         S1      sss
         Dn      nnn  ,   где nnn = 0-7
                 (uu)
         S2      ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FCMPG
^FCMPG                   ГРАФИЧЕСКОЕ СРАВНЕНИЕ                  FCMPG
^                С УСТАНОВКОЙ ФЛАГА "ДОПУЩЕНА/ОТВЕРГНУТА"
 --------------------------------------------------------------------
 Операция:   S2 - S1     (параллельная пересылка)

 Синтаксис:  FCMPG S1,S2   (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Первый операнд вычитается из второго. Результат не запоминается, од-
 нако формируются коды условия. В смысле формирования  кодов  условий
 эта команда отличается от FSUB, когда S1=S2; в этом случае результат
 всегда  равен  +0,  и следовательно, бит N равен 0. Отметим, что это
 справедливо даже в случае, когда S1 и S2 - бесконечности.

 Главное различие между командами FCMPG и FCMP - в условиях установки
 битов LR и ^R регистра кода условия. Эти различия  особенно  полезны
 при  выполнении  операций  отсечения  в  графических применениях. Во
 фрагменте программы рисования отрезка команда FCMP сравнивает первую
 точку отрезка X0 с Xmin и согласно результату устанавливает бит  LR;
 команда  FCMPG сравнивает вторую точку отрезка X1 с Xmin, и устанав-
 ливает бит ^R в зависимости от значения LR. Отметим, что отрезок бу-
 дет целиком допущен к рисованию, если бит A установлен (и  ^R=1),  в
 то время как он будет просто отвергнут, если бит ^R очищен ( и A=0).
 Такой  выбор  условий "допущен/отвергнут" был сделан для того, чтобы
 сделать возможным установку начального значения CCR  одной  командой
 ORI.

    ORI  #$E0,CCR   ; A, ^R, LR устанавливаются в 1, т.е. первона-
                    ; чально предполагается что отрезок допущен
                    ; к рисованию, а не отвергнут

    MOVE  X:(R0)+N0,D0.L  Y:(R4)+,D1.S   ; загрузка X0, Xmin
    FCMP  D1,D0  X:(R0)-N0,D0.L          ; X0-Xmin, загрузка X1
    FCMPG D1,D0                          ; X1=Xmin


 Разрядность операндов:  повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: отсутствует.

 Коды условия регистра CCR:
   (Примечание:  поскольку результат никуда на помещается, округления
    не происходит и биты кодов условий устанавливаются в  предположе-
    нии, что результат бесконечно точен.)

   C  - 1, если результат NaN;
        1, если результат отрицательный и не ноль; иначе 0
   V  - Не меняется
   Z  - 1, если исходные операнды равны; иначе 0
   N  - 1, если результат отрицательный; иначе 0
   I  - 1, если любой из  операндов - бесконечность; иначе 0
   LR - всегда 1  (инициализируется для следующей комбинации FCMP,
        FCMPG)
   ^R - 0, если результат NaN;
        0, если результат отрицательный и не ноль и LR равен 1
        (т.е. первая точка была отвергнута); иначе не меняется
   A  - 0, если результат NaN;
        0, если результат отрицательный и не ноль; иначе не меняется.

 Биты состояния регистра ER:

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FCMPG S1,S2  (синтаксис операции MOVE
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  uu10  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         S1      sss
         Dn      nnn  ,   где nnn = 0-7

                 (uu)
         S2      ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FCMPM
^FCMPM       СРАВНЕНИЕ  МОДУЛЕЙ ОПЕРАНДОВ С ПЛАВАЮЩЕЙ ТОЧКОЙ      FCMPM
 --------------------------------------------------------------------
 Операция:   S2 - S1     (параллельная пересылка)

 Синтаксис:   FCMPM S1,S2  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Абсолютное значение (модуль) первого операнда вычитается из абсолют-
 ного значения второго. Результат не запоминается, однако формируются
 коды условия. В смысле формирования кодов условий эта команда  отли-
 чается  от  FSUB,  когда S1=S2; в этом случае результат всегда равен
 +0, и  следовательно, бит N очищается. Заметим, что  это  справедливо
 даже в  случае, когда S1 и S2 - бесконечности.

 Разрядность  операндов:  повышенной одинарной точности с плавающей
                         точкой
 Разрядность  результата: отсутствует.

 Коды условия:
    (Примечание:  поскольку результат никуда на помещается, округления
     не  происходит и биты кодов условий устанавливаются в  предположе-
     нии,  что  результат бесконечно точен.)

    C  - Не меняется
    V  - Не меняется
    Z  - 1, если исходные операнды равны; иначе 0
    N  - 1, если результат отрицательный; иначе 0
    I  - 1, если любой из операндов - бесконечность;  иначе 0
    LR - Не меняется
    ^R - Не меняется
    A  - Не меняется

 Биты состояния регистра   ER:
      INX   - всегда 0
      DZ    - всегда 0
      UNF   - всегда 0
      OVF   - всегда 0
      OPERR - всегда 0
      SNAN  - 1, если операнд - сигнализирующее  NaN; иначе 0
      NAN   - 1, если операнд - NaN; иначе 0
      UNCC  - всегда 0

 Флаги регистра  IER:  Изменяются согласно стандартному определению.

 Формат команды: FCMPM S1,S2  (синтаксис операции MOVE
                               см.описание MOVE)

 31                                    14 13                        0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   01  1sss  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля  команды:
          S1      sss
          Dn      nnn  ,   где nnn = 0-7

          S2      ddd
          Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:     1 + mv        слов
:FCOPYS.S
^FCOPYS.S                КОПИРОВАНИЕ ЗНАКА                  FCOPYS.S
 --------------------------------------------------------------------
 Операция:   Знак S --> D --> округление --> D  (параллельная
                             до одинарной        пересылка)
                               точности

 Синтаксис:  FCOPYS.S S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Знаковый  разряд операнда с плавающей точкой S копируется в знаковый
 разряд операнда с плавающей точкой D, результат округляется до  оди-
 нарной точности и запоминается в указанном приемнике D.

 Разрядность операнда:   повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: одинарной точности с плавающей точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0
   DZ    - всегда 0
   UNF   - 1, если результат потерял значимость; иначе 0
   OVF   - 1, если было переполнение результата; иначе 0
   OPERR - всегда 0
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0
   NAN   - 1, если результат NaN (не число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FCOPYS.S S,D  (синтаксис операции MOVE
                                см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         S       sss
         Dn      nnn  ,   где nnn = 0-7

                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FCOPYS.X
^FCOPYS.X                КОПИРОВАНИЕ ЗНАКА                   FCOPYS.X
 --------------------------------------------------------------------
 Операция:   Знак S --> D  (параллельная пересылка)

 Синтаксис:  FCOPYS.X S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Знаковый  разряд операнда с плавающей точкой S копируется в знаковый
 разряд операнда с плавающей точкой D. Поскольку и S,  и  D  являются
 числами  с повышенной одинарной точностью, то округление не выполня-
 ется.

 Разрядность операнда:   повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - всегда 0
   DZ    - всегда 0
   UNF   - всегда 0
   OVF   - всегда 0
   OPERR - всегда 0
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0
   NAN   - 1, если результат NaN (не число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FCOPYS.X S,D  (синтаксис операции MOVE
                                см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FDEBUGcc
^FDEBUGcc        УСЛОВНЫЙ ПЕРЕХОД В РЕЖИМ ОТЛАДКИ            FDEBUGcc
 --------------------------------------------------------------------
 Операция:   Если  cc, то войти в режим отладки

 Синтаксис:  FDEBUGcc

 Описание:

 Если указанное условие истинно, то войти в  режим  отладки  DEBUG  и
 ждать  команд типа OnCE. Если указанное условие ложно, то продолжить
 выполнение со следующей команды.
 Бит UNCC регистра ER  и  флаг  SIOP

 регистра  IER  устанавливаются,
 если был установлен бит NAN регистра

 ER и условие отмечено признаком "Да"
 в последней
 колонке.

 "cc" может задавать следующие условия:


      Дополнительное условие

   Мнемоника                     Условие           установки
  UNCC *
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочено          N = 0                  Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочено        N = 1                  Нет

 Примечание: Операнды для условия ERR берутся из регистра ER.
             * См.описание UNCC в Разделе A.4.

 Коды условия регистра CCR:    Не меняются.

 Биты состояния регистра ER:

   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется

   UNCC  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Флаги регистра IER:

   SINX  - не меняются
   SDZ   - не меняются
   SUNF  - не меняются
   SOVF  - не меняются

   SIOP  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Формат команды: FDEBUGcc
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    01  │  0c  cccc  1111   1111   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 4 такта
 Расход памяти:    1 слово
:FGETMAN
^FGETMAN                 ВЫДЕЛЕНИЕ МАНТИССЫ                   FGETMAN
 --------------------------------------------------------------------
 Операция:   Нормализованная мантисса S --> D    (параллельная
                                                  пересылка)

 Синтаксис:  FGETMAN S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Выделяется мантисса и знак операнда с плавающей точкой  S,  мантисса
 нормализуется, порядок смещается так, чтобы результат был в диапозо-
 не 1-2, и результат запоминается как число с плавающей точкой в при-
 емнике  D  независимо  от того, была ли мантисса денормализована или
 нет.

 В качестве примера использования FGETMAN, FGETEXP и FSCALE  рассмот-
 рим  разложение  числа  с плавающей точкой на мантиссу и несмещенный
 порядок с последующим восстановлением исходного  числа  с  плавающей
 точкой.

   FGETMAN   D0,D1      ; выделение нормализованной мантиссы
   FGETEXP   D0,D2      ; выделение несмещенного порядка
   MOVE      D2.L,D2.H  ; пересылка несмещенного порядка
   FSCALE.X  D2.H,D1    ; масштабирование исходной мантиссы

         На входе                        На выходе
 (одинарная повышенная точность)  (одинарная повышенная точность)

        минус бесконечность              NaN, сигналы OPERR
        отрицательное, не ноль           мантисса со знаком
        -0.0                             -0.0
        +0.0                             +0.0
        положительное, не ноль           мантисса со знаком
        плюс  бесконечность              NaN, сигналы OPERR
        NaN                              NaN

 Разрядность операнда:   повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - всегда 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - всегда 0
   DZ    - всегда 0
   UNF   - всегда 0
   OVF   - всегда 0
   OPERR - 1, если операнд-Источник - бесконечность; иначе 0
   SNAN  - 1, если операнд - сигнализирующий NaN (не-число); иначе 0
   NAN   - 1, если результат NaN (не-число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FGETMAN S,D  (синтаксис операции MOVE
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FINT
^FINT                    ВЫДЕЛЕНИЕ ЦЕЛОЙ ЧАСТИ                   FINT
 --------------------------------------------------------------------
 Операция:   S --> округляется до целого --> D   (параллельная
                                                  пересылка)

 Синтаксис:  FINT S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Операнд с плавающей точкой S округляется до целого значения, исполь-
 зуя текущий режим округления, указанный битами R1-R2 в регистре IER,
 и  результат  запоминается  как число с плавающей точкой в указанном
 приемнике D. Точность округления - всегда повышенная одинарная. Нап-
 ример, при округлении в сторону плюс бесконечности 110.50 округляет-
 ся до 111.00; однако при округлении в сторону нуля, минус  бесконеч-
 ности или до ближайшего четного 110.50 округляется до 110.0.

 Разрядность операнда:   повышенной одинарной точности с плавающей
                         точкой
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0
   DZ    - всегда 0
   UNF   - всегда 0
   OVF   - всегда 0
   OPERR - всегда 0
   SNAN  - 1, если операнд - сигнализирующий NaN (не-число); иначе 0
   NAN   - 1, если результат NaN (не-число); иначе 0
   UNCC  - всегда 0

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FINT S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FJcc
^FJcc                    УСЛОВНЫЙ ПЕРЕХОД                        FJcc
 --------------------------------------------------------------------
 Операция:   Если  cc, то   xx     --> PC    либо  еа  --> PC
                     иначе  PC + 1 --> PC

 Синтаксис:  FJcc label(short)
             FJcc ea

 Описание:

 Если указанное условие истинно, то выполнение программы продолжается
 с  указанного в команде исполнительного адреса. Если указанное усло-
 вие ложно, то PC продвигается, а исполнительный адрес  игнорируется.
 Однако  адресный  регистр,  указанный в поле исполнительного адреса,
 всегда обновляется независимо от условия. Для задания исполнительно-
 го адреса могут использоваться все режимы адресации  с  модификацией
 операнда  в памяти. Может также использоваться режим адресации с ко-
 ротким адресом перехода. 15-битный операнд расширяется знаковым раз-
 рядом для формирования корректного исполнительного адреса. Ограниче-
 ния  см.  в  Разделе A.10.
 Бит UNCC регистра ER и флаг SIOP регистра

 IER устанавливаются,
 если был установлен бит NAN регистра ER и усло-
 вие отмечено признаком "Да"
 в последней
 колонке.

 "cc" может задавать следующие условия:


      Дополнительное условие

   Мнемоника                     Условие           установки
  UNCC *
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочено          N = 0                  Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочено        N = 1                  Нет

 Примечание: Операнды для условия ERR берутся из регистра ER.
             * См.описание UNCC в Разделе A.4.

 Коды условия регистра CCR:    Не меняются.

 Биты состояния регистра ER:

   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется

   UNCC  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Флаги регистра IER:
   SINX  - не меняются
   SDZ   - не меняются
   SUNF  - не меняются
   SOVF  - не меняются

   SIOP  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Формат команды: FJcc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    10aa    aaaa    aa  │  1c  cccc  1aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: FJcc ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    MMMR    RR  │   1c  cccc  1000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │       необязательное слово исполнительного адреса                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 ea  Rn - R0-R7  (только режимы адресации с модификацией операнда  в
                  памяти)

 Абсолютный адрес - 32 бита
 Короткий адрес перехода -  aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 6 + jx  тактов
 Расход памяти:    1 + ea  слов
:FJScc
^FJScc               УСЛОВНЫЙ ВЫЗОВ ПОДПРОГРАММЫ                FJScc
 --------------------------------------------------------------------
 Операция:   Если  cc, то   PC     --> SSH
                            SR     --> SSL
                            xx     --> PC    либо  PC + ea --> PC
                     иначе  PC + 1 --> PC

 Синтаксис:  FJScc label(short)
             FJScc ea

 Описание:

 Если указанное условие истинно, то адрес команды,  следующей  непос-
 редственно за командой FJScc, и регистр состояния засылаются в стек.
 Выполнение  программы затем продолжается с вычисленного исполнитель-
 ного адреса. Если указанное условие ложно, то PC продвигается, а до-
 полнительное слово игнорируется. Однако адресный регистр,  указанный
 в  поле  исполнительного адреса, всегда модифицируется независимо от
 условия. Для задания исполнительного адреса могут использоваться все
 режимы адресации с модификацией операнда в памяти. Может  также  ис-
 пользоваться  режим адресации с коротким адресом перехода. 15-битный
 операнд расширяется знаковым разрядом, чтобы образовывать корректный
 исполнительный  адрес.  Ограничения см. в Разделе A.10.
 Бит UNCC ре-

 гистра ER и флаг SIOP регистра IER устанавливаются,
 если
 был  уста-

 новлен  бит NAN регистра ER и условие отмечено признаком "Да"
 в пос-
 ледней
 колонке. Это действие происходит до записи  в  стек  регистра
 состояния.

 "cc" может задавать следующие условия:


      Дополнительное условие

   Мнемоника                     Условие           установки
  UNCC *
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочено          N = 0                  Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочено        N = 1                  Нет

 Примечание: Операнды для условия ERR берутся из регистра ER.
             * См.описание UNCC в Разделе A.4.

 Коды условия регистра CCR:    Не меняются.

 Биты состояния регистра ER:

   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется

   UNCC  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Флаги регистра IER:

   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются

   SIOP  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Формат команды: FJScc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    11aa    aaaa    aa  │  1c  cccc  1aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: FJScc ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    MMMR    RR  │  1c  cccc  1000   0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │       необязательное слово исполнительного адреса                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 ea  Rn - R0-R7  (только  режимы адресации с модификацией операнда в
                  памяти)

 Абсолютный адрес - 32 бита
 Короткий адрес перехода - aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FLOAT.S
^FLOAT.S         ПРЕОБРАЗОВАНИЕ ЦЕЛОГО В ВЕЩЕСТВЕННОЕ         FLOAT.S
 --------------------------------------------------------------------
 Операция:   D.L --> Преобразование --> D   (параллельная пересылка)
                     с округлением
                  до одинарной точности

 Синтаксис:  FLOAT.S D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 32-битное целое в двоично-дополнительном коде, расположенное в млад-
 шей  части  операнда D, преобразовывается в число с плавающей точкой
 одинарной точности. Результат запоминается в D.

 Разрядность операнда: 32-битное целое в двоично-дополнительном коде.
 Разрядность результата: одинарной точности с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Всегда 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - Всегда 0.
   NAN   - Всегда 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FLOAT.S D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0100  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FLOAT.X
^FLOAT.X         ПРЕОБРАЗОВАНИЕ ЦЕЛОГО В ВЕЩЕСТВЕННОЕ         FLOAT.X
 --------------------------------------------------------------------
 Операция:   D.L --> Преобразование --> D   (параллельная пересылка)

 Синтаксис:  FLOAT.X D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 32-битное целое в двоично-дополнительном коде, расположенное в млад-
 шей части операнда D, преобразовывается в число с плавающей  точкой,
 результат запоминается в D. Точность округления - одинарная повышен-
 ная.

 Разрядность операнда: 32-битное целое в двоично-дополнительном коде.
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Всегда 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - Всегда 0.
   NAN   - Всегда 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FLOAT.X D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0100  uu10  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов

:FLOATU.S
^FLOATU.S   ПРЕОБРАЗОВАНИЕ ЦЕЛОГО БЕЗ ЗНАКА В ВЕЩЕСТВЕННОЕ   FLOATU.S
 --------------------------------------------------------------------
 Операция:   D.L --> Преобразование --> D   (параллельная пересылка)
                     с округлением
                 до одинарной точности

 Синтаксис:  FLOATU.S D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 32-битное целое без знака, расположенное в младшей части операнда D,
 преобразовывается в число с плавающей точкой одинарной точности. Ре-
 зультат запоминается в D.

 Разрядность операнда:   32-битное целое без знака
 Разрядность результата: одинарной точности с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - Всегда 0.
   I  - Всегда 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - Всегда 0.
   NAN   - Всегда 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FLOATU.S D  (синтаксис операции MOVE
                              см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0101  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FLOATU.X
^FLOATU.X   ПРЕОБРАЗОВАНИЕ ЦЕЛОГО БЕЗ ЗНАКА В ВЕЩЕСТВЕННОЕ   FLOATU.X
 --------------------------------------------------------------------
 Операция:   D.L --> Преобразование --> D   (параллельная пересылка)

 Синтаксис:  FLOATU.X D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 32-битное целое без знака, расположенное в младшей части операнда D,
 преобразовывается  в число с плавающей точкой. Точность округления -
 одинарная повышенная. Результат запоминается в D.

 Разрядность операнда:   32-битное целое без знака
 Разрядность результата: повышенной одинарной точности с плавающей
                         точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - Всегда 0.
   I  - Всегда 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - Всегда 0.
   NAN   - Всегда 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FLOATU.X D  (синтаксис операции MOVE
                              см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0101  uu10  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FLOOR
^FLOOR                   ВЫДЕЛЕНИЕ ЦЕЛОЙ ЧАСТИ                  FLOOR
 --------------------------------------------------------------------
 Операция:   S --> Округление до целого --> D  (параллельная
                                                пересылка)

 Синтаксис:  FLOOOR S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Операнд-Источник S - число с плавающей точкой - округляется до целой
 величины в сторону минус бесконечности. Результат  запоминается  как
 число  с плавающей точкой в указанном операнде-Приемнике D. Точность
 округления всегда одинарная повышенная. Команда  FLOOR  эквивалентна
 команде  FINT,  когда биты R1 и R0 в IER задают округление в сторону
 бесконечности, однако режим округления не нужно ни сохранять, ни за-
 давать, ни восстанавливать. Это, в частности, используется при рабо-
 те на языке C, так как FLOOR - стандартная функция C.

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующее NaN (не-число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FLOOR S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY//FADD.S
^FMPY//FADD.S  УМНОЖЕНИЕ И СЛОЖЕНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ   FMPY//FADD.S
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до точности,
                     указанной в MP

             S3+D2 --> Округление --> D2
                      до одинарной
                        точности

 Синтаксис:  FMPY S1,S2,D1  FADD.S S3,D2  (синтаксис операции MOVE
             FMPY S2,S1,D1  FADD.S S3,D2   см.описание MOVE)

 Описание:

 Перемножаются два операнда S1 и S2, результат округляется до точнос-
 ти, указанной битом MP, и запоминается в регистре-Приемнике D1.  Од-
 новременно  складываются два операнда S3 и D2, результат округляется
 до одинарной точности и запоминается в регистре-Приемнике D2.  Обыч-
 но,  если  результат  умножения будет сразу использоваться следующей
 командой ALU (такой, как FADD), то программируется максимальная точ-
 ность (MP=1). Однако, если результат будет запоминаться, то  исполь-
 зуется одинарная точность округления (MP=0).

 Разрядность операндов:            повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата сложения:  одинарной точности
                                   с плавающей точкой (SP)
 Разрядность результата умножения: выбирается в зависимости от MP.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат сложения равен 0; иначе 0.
   N  - 1, если результат сложения отрицательный; иначе 0.
   I  - 1, если результат сложения - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат сложения или умножения неточный;
           иначе 0.
   DZ    - Всегда 0.
   UNF   - 1,  если  результат  сложения или умножения потерял значи-
           мость; иначе 0.
   OVF   - 1, если было переполнение результата сложения или  умноже-
           ния; иначе 0.
   OPERR - 1,  если операнды сложения - противоположные по знаку бес-
           конечности; 1, если один из операндов умножения  -  беско-
           нечность, а другой - 0; иначе 0.
   SNAN  - 1,  если  один из операндов - сигнализирующий NaN (не чис-
           ло); иначе 0.
   NAN   - 1, если результат сложения NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY S1,S2,D1  FADD.S S3,D2 (синтаксис операции MOVE
                                              см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  1sss  ddQQ  QQDD   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      DD
         Dn      nn   ,   где nn = 0-3

         D2      dd
         Dn      nn   ,   где nn = 0-3

         S3      sss
         Dn      nnn  ,   где nnn = 0-7

         S1*S2   QQQQ
         D0*D4   0000
         D4*D4   0001
         D4*D5   0010
         D4*D6   0011
         D5*D6   0100
         D4*D7   0101
         D5*D7   0110
         D6*D7   0111
         D4*D8   1000
         D5*D8   1001
         D6*D8   1010
         D7*D8   1011
         D4*D9   1100
         D5*D9   1101
         D6*D9   1110
         D7*D9   1111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY//FADD.X
^FMPY//FADD.X  УМНОЖЕНИЕ И СЛОЖЕНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ   FMPY//FADD.X
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до одинарной
                       повышенной
                        точности

             S3+D2 --> Округление --> D2
                      до одинарной
                       повышенной
                        точности

 Синтаксис:  FMPY S1,S2,D1  FADD.X S3,D2  (синтаксис операции MOVE
             FMPY S2,S1,D1  FADD.X S3,D2   см.описание MOVE)

 Описание:

 Перемножаются два операнда S1 и S2, результат округляется до одинар-
 ной повышенной точности и запоминается в регистре-Приемнике D1.  Од-
 новременно  складываются два операнда S3 и D2, результат округляется
 до одинарной повышенной точности и запоминается в D2.

 Разрядность операндов:            повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата сложения:  повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата умножения: повышенной одинарной точности
                                   с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат сложения равен 0; иначе 0.
   N  - 1, если результат сложения отрицательный; иначе 0.
   I  - 1, если результат сложения - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат сложения или умножения неточный;
           иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат сложения или  умножения  потерял  значи-
           мость; иначе 0.
   OVF   - 1,  если было переполнение результата сложения или умноже-
           ния; иначе 0.
   OPERR - 1, если операнды сложения - противоположные по знаку  бес-
           конечности,
          -1,  если  один  из  операндов умножения - бесконечность, а
           другой - 0; иначе 0.
   SNAN  - 1, если один из операндов - сигнализирующий NaN  (не  чис-
           ло); иначе 0.
   NAN   - 1, если результат сложения NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY S1,S2,D1  FADD.X S3,D2 (синтаксис операции MOVE
                                              см.описание MOVE)
                 FMPY S2,S1,D1  FADD.X S3,D2 (синтаксис операции MOVE
                                              см.описание MOVE)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  0sss  ddQQ  QQDD   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D1      DD
         Dn      nn   ,   где nn = 0-3

         D2      dd
         Dn      nn   ,   где nn = 0-3

         S3      sss
         Dn      nnn  ,   где nnn = 0-7

         S1*S2   QQQQ
         D0*D4   0000
         D4*D4   0001
         D4*D5   0010
         D4*D6   0011
         D5*D6   0100
         D4*D7   0101
         D5*D7   0110
         D6*D7   0111
         D4*D8   1000
         D5*D8   1001
         D6*D8   1010
         D7*D8   1011
         D4*D9   1100
         D5*D9   1101
         D6*D9   1110
         D7*D9   1111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY//FADDSUB.S
^FMPY//FADDSUB.S   УМНОЖЕНИЕ, СЛОЖЕНИЕ И ВЫЧИТАНИЕ    FMPY//FADDSUB.S
^                        С ПЛАВАЮЩЕЙ ТОЧКОЙ
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до точности,
                     указанной в MP

             D3+D2 --> Округление --> D2
                      до одинарной
                        точности

             D3-D2 --> Округление --> D3
                      до одинарной
                        точности

 Синтаксис:  FMPY S1,S2,D1  FADDSUB.S D3,D2  (синтаксис операции MOVE
             FMPY S1,S2,D1  FADDSUB.S D3,D2   см.описание MOVE)

 Описание:

 Перемножаются два операнда S1 и S2, результат округляется до точнос-
 ти, указанной битом MP, и запоминается в регистре-Приемнике D1.  Од-
 новременно  складываются  два операнда D2 и D3, вычитается D2 из D3,
 оба результата округляются до одинарной точности; результат сложения
 запоминается в регистре D2, а вычитания - в регистре D3. Обычно, ес-
 ли результат умножения будет сразу использоваться следующей командой
 ALU (такой, как  FADD),  то  программируется  максимальная  точность
 (MP=1).  Однако  если  результат будет запоминаться, то используется
 одинарная  точность  округления  (MP=0).  В  особом  случае,   когда
 │S│=│D│,  результат  будет  либо +0, либо -0; знак нуля совпадает со
 знаком операнда D.

 Разрядность операндов:            повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата сложения:  одинарной точности
                                   с плавающей точкой (SP)
 Разрядность результата вычитания: одинарной точности
                                   с плавающей точкой (SP)
 Разрядность результата умножения: выбирается в зависимости от MP.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат сложения равен 0; иначе 0.
   N  - 1, если результат сложения отрицательный; иначе 0.
   I  - 1, если результат сложения - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат сложения, вычитания или умножения неточ-
           ный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат сложения, вычитания или умножения  поте-
           рял значимость; иначе 0.
   OVF   - 1,  если  было переполнение результата сложения, вычитания
           или умножения; иначе 0.
   OPERR - 1, если операнды сложения - противоположные по знаку  бес-
           конечности;  1,  если  операнды  вычитания - одинаковые по
           знаку бесконечности; 1, если один из операндов умножения -
           бесконечность, а другой - 0; иначе 0.
   SNAN  - 1, если один из операндов - сигнализирующий NaN  (не  чис-
           ло); иначе 0.
   NAN   - 1, если результат сложения NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY S1,S2,D1 FADDSUB.S D3,D2  (синтаксис MOVE
                                                 см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  1sss  ddQQ  QQDD   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      DD
         Dn      nn   ,   где nn = 0-3

         D2      dd
         Dn      nn   ,   где nn = 0-3

         S3      sss
         Dn      nnn  ,   где nnn = 0-7

         S1*S2   QQQQ
         D0*D4   0000
         D4*D4   0001
         D4*D5   0010
         D4*D6   0011
         D5*D6   0100
         D4*D7   0101
         D5*D7   0110
         D6*D7   0111
         D4*D8   1000
         D5*D8   1001
         D6*D8   1010
         D7*D8   1011
         D4*D9   1100
         D5*D9   1101
         D6*D9   1110
         D7*D9   1111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY//FADDSUB.X
^FMPY//FADDSUB.X   УМНОЖЕНИЕ, СЛОЖЕНИЕ И ВЫЧИТАНИЕ    FMPY//FADDSUB.X
^                        С ПЛАВАЮЩЕЙ ТОЧКОЙ
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до одинарной
                       повышенной
                        точности

             D3+D2 --> Округление --> D2
                      до одинарной
                       повышенной
                        точности

             D3-D2 --> Округление --> D3
                      до одинарной
                       повышенной
                        точности

 Синтаксис:  FMPY S1,S2,D1  FADDSUB.X D3,D2  (синтаксис операции MOVE
             FMPY S1,S2,D1  FADDSUB.X D3,D2   см.описание MOVE)

 Описание:
 Перемножаются два операнда S1 и S2, результат округляется до одинар-
 ной  повышенной точности и запоминается в регистре-Приемнике D1. Од-
 новременно складываются два операнда D2 и D3, вычитается D2  из  D3,
 оба результата округляются до одинарной повышенной точности; резуль-
 тат  сложения  запоминается  в регистре D2, а вычитания - в регистре
 D3. В особом случае, когда │S│=│D│, результат будет  либо  +0,  либо
 -0; знак нуля совпадает со знаком операнда D.

 Разрядность операндов:            повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата сложения:  повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата вычитания: повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата умножения: повышенной одинарной точности
                                   с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат сложения равен 0; иначе 0.
   N  - 1, если результат сложения отрицательный; иначе 0.
   I  - 1, если результат сложения - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат сложения, вычитания или умножения неточ-
           ный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1,  если результат сложения, вычитания или умножения поте-
           рял значимость; иначе 0.
   OVF   - 1,  если  было переполнение результата сложения, вычитания
           или умножения; иначе 0.
   OPERR - 1,  если операнды сложения - противоположные по знаку бес-
           конечности ,
         - 1, если операнды вычитания - одинаковые по знаку бесконеч-
           ности,
         - 1, если один из операндов  умножения  -  бесконечность,  а
           другой - 0; иначе 0.
   SNAN  - 1,  если  один из операндов - сигнализирующий NaN (не чис-
           ло); иначе 0.
   NAN   - 1, если результат сложения NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY S1,S2,D1  FADDSUB.X D3,D2 (синтаксис операции
                                              MOVE см.описание MOVE)
                 FMPY S2,S1,D1  FADDSUB.X D3,D2 (синтаксис операции
                                              MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0sss  ddQQ  QQDD   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      DD
         Dn      nn   ,   где nn = 0-3

         D2      dd
         Dn      nn   ,   где nn = 0-3

         S3      sss
         Dn      nnn  ,   где nnn = 0-7

         S1*S2   QQQQ
         D0*D4   0000
         D4*D4   0001
         D4*D5   0010
         D4*D6   0011
         D5*D6   0100
         D4*D7   0101
         D5*D7   0110
         D6*D7   0111
         D4*D8   1000
         D5*D8   1001
         D6*D8   1010
         D7*D8   1011
         D4*D9   1100
         D5*D9   1101
         D6*D9   1110
         D7*D9   1111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY//FSUB.S
^FMPY//FSUB.S  УМНОЖЕНИЕ И ВЫЧИТАНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ  FMPY//FSUB.S
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до точности,
                     указанной в MP

             D2-S3 --> Округление --> D2
                      до одинарной
                        точности

 Синтаксис:  FMPY S1,S2,D1  FSUB.S S3,D2   (синтаксис операции MOVE
             FMPY S2,S1,D1  FSUB.S S3,D2    см.описание MOVE)

 Описание:

 Перемножаются два операнда S1 и S2, результат округляется до точнос-
 ти, указанной битом MP, и запоминается в регистре-Приемнике D1.  Од-
 новременно  S3  вычитается из D2, результат округляется до одинарной
 точности и запоминается в регистре D2. Обычно, если результат  умно-
 жения  будет сразу использоваться следующей командой ALU (такой, как
 FADD), то программируется максимальная точность (MP=1). Однако  если
 результат будет запоминаться, то используется одинарная точность ок-
 ругления (MP=0). В особом случае, когда │S│=│D│, результат будет ли-
 бо +0, либо -0; знак нуля совпадает со знаком операнда D.

 Разрядность операндов:            повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата вычитания: одинарной точности
                                   с плавающей точкой (SP)
 Разрядность результата умножения: выбирается в зависимости от MP.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат вычитания равен 0; иначе 0.
   N  - 1, если результат вычитания отрицательный; иначе 0.
   I  - 1, если результат вычитания - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат вычитания или умножения неточный;  иначе
           0
   DZ    - Всегда 0.
   UNF   - 1,  если  результат вычитания или умножения потерял значи-
           мость; иначе 0.
   OVF   - 1, если было переполнение результата вычитания или умноже-
           ния; иначе 0.
   OPERR - 1, если операнды вычитания - одинаковые по знаку бесконеч-
           ности,
         - 1,  если  один  из  операндов умножения - бесконечность, а
           другой - 0; иначе 0.
   SNAN  - 1, если один из операндов - сигнализирующий NaN  (не  чис-
           ло); иначе 0.
   NAN   - 1, если результат сложения NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY S1,S2,D1  FSUB.S S3,D2 (синтаксис операции MOVE
                 FMPY S2,S1,D1  FSUB.S S3,D2  см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  ddQQ  QQDD   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      DD
         Dn      nn   ,   где nn = 0-3

         D2      dd
         Dn      nn   ,   где nn = 0-3

         S3      sss
         Dn      nnn  ,   где nnn = 0-7

         S1*S2   QQQQ
         D0*D4   0000
         D4*D4   0001
         D4*D5   0010
         D4*D6   0011
         D5*D6   0100
         D4*D7   0101
         D5*D7   0110
         D6*D7   0111
         D4*D8   1000
         D5*D8   1001
         D6*D8   1010
         D7*D8   1011
         D4*D9   1100
         D5*D9   1101
         D6*D9   1110
         D7*D9   1111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY//FSUB.X
^FMPY//FSUB.X  УМНОЖЕНИЕ И ВЫЧИТАНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ  FMPY//FSUB.X
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до одинарной
                       повышенной
                        точности

             D2-S3 --> Округление --> D2
                      до одинарной
                       повышенной
                        точности

 Синтаксис:  FMPY S1,S2,D1  FSUB.X S3,D2    (синтаксис операции MOVE
             FMPY S2,S1,D1  FSUB.X S3,D2     см.описание MOVE)

 Описание:

 Перемножаются два операнда S1 и S2, результат округляется до одинар-
 ной  повышенной точности и запоминается в регистре-Приемнике D1. Од-
 новременно S3 вычитается из D2, результат округляется  до  одинарной
 повышенной  точности  и запоминается в регистре D2. В особом случае,
 когда │S│=│D│, результат будет либо +0, либо -0; знак нуля совпадает
 со знаком операнда D.

 Разрядность операндов:            повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата вычитания: повышенной одинарной точности
                                   с плавающей точкой (SEP)
 Разрядность результата умножения: повышенной одинарной точности
                                   с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат вычитания равен 0; иначе 0.
   N  - 1, если результат вычитания отрицательный; иначе 0.
   I  - 1, если результат вычитания - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат вычитания или умножения неточный;  иначе
           0.
   DZ    - Всегда 0.
   UNF   - 1,  если  результат вычитания или умножения потерял значи-
           мость; иначе 0.
   OVF   - 1, если было переполнение результата вычитания или умноже-
           ния; иначе 0.
   OPERR - 1, если операнды вычитания - одинаковые по знаку бесконеч-
           ности,
         - 1, если один из операндов  умножения  -  бесконечность,  а
           другой - 0; иначе 0.
   SNAN  - 1,  если  один из операндов - сигнализирующий NaN (не чис-
           ло); иначе 0.
   NAN   - 1, если результат сложения NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY S1,S2,D1  FSUB.X S3,D2 (синтаксис операции MOVE
                                              см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  ddQQ  QQDD   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
         D1      DD
         Dn      nn   ,   где nn = 0-3

         D2      dd
         Dn      nn   ,   где nn = 0-3

         S3      sss
         Dn      nnn  ,   где nnn = 0-7

         S1*S2   QQQQ
         D0*D4   0000
         D4*D4   0001
         D4*D5   0010
         D4*D6   0011
         D5*D6   0100
         D4*D7   0101
         D5*D7   0110
         D6*D7   0111
         D4*D8   1000
         D5*D8   1001
         D6*D8   1010
         D7*D8   1011
         D4*D9   1100
         D5*D9   1101
         D6*D9   1110
         D7*D9   1111

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY.S
^FMPY.S            УМНОЖЕНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ                FMPY.S
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до одинарной
                        точности

 Синтаксис:  FMPY.S  S1,S2,D   (синтаксис операции MOVE
             FMPY.S  S2,S1,D    см.описание MOVE)

 Описание:

 Перемножаются два указанных операнда S1 и S2, результат округляется
 до одинарной точности и запоминается в D.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: одинарной точности с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:
   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - 1,  если  один из операндов - бесконечность, а другой - 0;
           иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY.S    S1,S2,D (синтаксис операции MOVE
                                    см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  1sss  SSS1  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: FMPY.S  S1,S2(8,9),D  (синтаксис операции MOVE
                                        см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  11S1  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘
 Поля команды:

         S1      sss
         Dn      nnn  ,   где nnn = 0-7

         S2      SSS
         Dn      nnn  ,   где nnn = 0-7

         S2      S
         D8      0
         D9      1

         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FMPY.X
^FMPY.X            УМНОЖЕНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ                FMPY.X
 --------------------------------------------------------------------
 Операция:   S1*S2 --> Округление --> D1  (параллельная пересылка)
                      до одинарной
                       повышенной
                        точности

 Синтаксис:  FMPY.X  S1,S2,D   (синтаксис операции MOVE
             FMPY.X  S2,S1,D    см.описание MOVE)

 Описание:

 Перемножаются два указанных операнда S1 и S2, результат округляется
 до одинарной повышенной точности и запоминается в D.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - 1, если один из операндов - бесконечность, а другой  -  0;
           иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FMPY.X S1,S2,D  (синтаксис операции MOVE
                                  см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  1sss  SSS0  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: FMPY.X  S1,S2(8,9),D  (синтаксис операции MOVE
                                        см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  11s0  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘
 Поля команды:

         S1      sss
         Dn      nnn  ,   где nnn = 0-7

         S2      SSS
         Dn      nnn  ,   где nnn = 0-7

         S2      S
         D8      0
         D9      1

         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FNEG.S
^FNEG.S                  ИЗМЕНЕНИЕ ЗНАКА                       FNEG.S
 --------------------------------------------------------------------
 Операция:   0 - D --> Округление --> D  (параллельная пересылка)
                      до одинарной
                        точности

 Синтаксис:  FNEG.S  D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Операнд D вычитается из нуля, округляется до  одинарной  точности  и
 результат запоминается в D.

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: одинарной точности с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FNEG.S D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0001  uu01  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2  +mv + da  тактов
 Расход памяти:    1 + mv       слов
:FNEG.X
^FNEG.X                  ИЗМЕНЕНИЕ ЗНАКА                       FNEG.X
 --------------------------------------------------------------------
 Операция:   0-D --> D   (параллельная пересылка)

 Синтаксис:  FNEG.X  D   (синтаксис операции MOVE см.описание MOVE)

 Описание:  Операнд D вычитается из нуля, результат запоминается в D.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартному определению.

 Формат команды: FNEG.X D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0001  uu00  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2  +mv + da  тактов
 Расход памяти:    1 + mv       слов
:FSCALE.S
^FSCALE.S    МАСШТАБИРОВАНИЕ ОПЕРАНДА С ПЛАВАЮЩЕЙ ТОЧКОЙ     FSCALE.S
 --------------------------------------------------------------------
 Операция:   2**SH * D --> Округление --> D  (параллельная пересылка)
                          до одинарной
                            точности

             2**nn * D --> Округление --> D
                          до одинарной
                            точности

 Синтаксис:  FSCALE.S  S,D (синтаксис операции MOVE см.описание MOVE)
             FSCALE.S  #byte,D

 Описание:

 Операнд  D масштабируется в соответствии с коэффициентом масштабиро-
 вания, содержащимся в 11 младших битах старшей части регистра S, ре-
 зультат округляется до одинарной точности и запоминается в D. В  ка-
 честве  коэффициента  масштабирования  могут также использоваться 8-
 битный непосредственный короткий операнд, расширенный знаковым  раз-
 рядом  до 11 бит. Коэффициент масштабирования представляет собой 11-
 битное целое в двоично-дополнительном коде.

 В качестве примера использования FGETMAN, FGETEXP и FSCALE  рассмот-
 рим  разложение  числа  с плавающей точкой на мантиссу и несмещенный
 порядок с последующим восстановлением исходного  числа  с  плавающей
 точкой.

   FGETMAN   D0,D1      ; выделение нормализованной мантиссы
   FGETEXP   D0,D2      ; выделение несмещенного порядка
   MOVE      D2.L,D2.H  ; пересылка порядка
   FSCALE.S  D2.H,D1    ; масштабирование исходной мантиссы

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: одинарной точности с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FSCALE.S  S,D  (синтаксис операции MOVE
                                 см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu10  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: FSCALE.S #byte,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000    10 │  11   1nnn  nnnn  nddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Непосредственный короткий операнд - nnnnnnnn (8 бит)
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn.H    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов  (2+da  для FSCALE.S  #byte,D)
 Расход памяти:    1 + mv       слов  (1 слово для FSCALE.S  #byte,D)
:FSCALE.X
^FSCALE.X    МАСШТАБИРОВАНИЕ ОПЕРАНДА С ПЛАВАЮЩЕЙ ТОЧКОЙ     FSCALE.X
 --------------------------------------------------------------------
 Операция:   2**SH * D --> Округление --> D  (параллельная пересылка)
                          до одинарной
                           повышенной
                            точности

             2**nn * D --> Округление --> D
                          до одинарной
                           повышенной
                            точности

 Синтаксис:  FSCALE.X  S,D (синтаксис операции MOVE см.описание MOVE)
             FSCALE.X  #byte,D

 Описание:
 Операнд  D масштабируется в соответствии с коэффициентом масштабиро-
 вания, содержащимся в 11 младших битах старшей части регистра-Источ-
 ника S, результат округляется до одинарной повышенной точности и за-
 поминается в операнде-Приемнике D. В качестве коэффициента масштаби-
 рования может также использоваться 8-битный непосредственный  корот-
 кий  операнд,  расширенные  знаковым разрядом до 11 бит. Коэффициент
 масштабирования представляет собой 11-битное целое в  двоично-допол-
 нительном коде.

 В  качестве примера использования FGETMAN, FGETEXP и FSCALE рассмот-
 рим разложение числа с плавающей точкой на  мантиссу  и  несмещенный
 порядок  с  последующим  востановлением  исходного числа с плавающей
 точкой.

   FGETMAN   D0,D1      ; выделение нормализованной мантиссы
   FGETEXP   D0,D2      ; выделение несмещенного порядка
   MOVE      D2.L,D2.H  ; пересылка порядока
   FSCALE.X  D2.H,D1    ; масштабирование исходной мантиссы

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FSCALE.X   S,D (синтаксис операции MOVE
                                 см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  0sss  uu10  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: FSCALE.X #byte,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000    10 │  11   0nnn  nnnn  nddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Непосредственный короткий операнд - nnnnnnnn (8 бит)
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn.H    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов  (2+da  для FSCALE.X  #byte,D)
 Расход памяти:    1 + mv       слов  (1 слово для FSCALE.X  #byte,D)
:FSEEDD
^FSEEDD              ПРИБЛИЖЕНИЕ ОБРАТНОЙ ВЕЛИЧИНЫ             FSEEDD
 --------------------------------------------------------------------
 Операция:   Приближение (1/S) --> D

 Синтаксис:  FSEEDD S,D

 Описание:

 Берется  содержимое  указанного  операнда-Источника  S,  вычисляется
 приближение  1.0/S, результат запоминается в операнде-Приемнике D. 9
 старших битов мантиссы результата выбираются из таблицы,  хранящейся
 в  ПЗУ  (ROM), остальные биты мантиссы очищаются. Данная команда по-
 лезна при реализации алгоритмов деления чисел с плавающей точкой.

 Следующая таблица описывает действие команды FSEEDD:

        Операнд-Источник       Результат
 --------------------------------------------------------------------
        SNaN или QNaN          QNaN
        +/- 0                  +/- бесконечность
        ненормализованное      нормализация, затем приближение FSEEDD
        нормализованное        приближение FSEEDD
        +/- бесконечность      +/- 0

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FSEEDD S,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000    10 │ 00   0sss   1111  1ddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + da  тактов
 Расход памяти:    1 слово
:FSEEDR
^FSEEDR    ПРИБЛИЖЕНИЕ ОБРАТНОЙ ВЕЛИЧИНЫ КВАДРАТНОГО КОРНЯ     FSEEDR
 --------------------------------------------------------------------
 Операция:   Приближение (1/SQRT(S)) --> D

 Синтаксис:  FSEEDD  S,D

 Описание:

 Берется  содержимое  указанного  операнда-Источника  S,  вычисляется
 приближение  квадратного  корня  из  1.0/S, результат запоминается в
 операнде-Приемнике D. 9 старших битов мантиссы результата выбираются
 из таблицы, хранящейся в ПЗУ (ROM), остальные биты мантиссы очищают-
 ся. Данная команда  полезна  при  реализации  алгоритмов  вычисления
 квадратного корня из чисел с плавающей точкой.

 Следующая таблица описывает действие команды FSEEDR:

        Операнд-Источник       Результат
 --------------------------------------------------------------------
        SNaN или QNaN          QNaN
        меньше 0               QNaN
        +/- 0                  +/- 0
        ненормализованное      нормализация, затем приближение FSEEDR
        нормализованное        приближение FSEEDR
        +/- бесконечность      +/- бесконечность

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - 1, если операнд меньше 0; иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FSEEDR S,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000    10 │ 00   0sss   1111  0ddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + da  тактов
 Расход памяти:    1 слово
:FSUB.S
^FSUB.S              ВЫЧИТАНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ              FSUB.S
 --------------------------------------------------------------------
 Операция:   D - S --> Округление --> D  (параллельная пересылка)
                      до одинарной
                        точности

 Синтаксис:  FSUB.S  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Операнд  D  вычитается из S, результат округляется до одинарной точ-
 ности и запоминается в D. В особом случае, когда │S│=│D│,  результат
 будет либо +0, либо -0; знак нуля совпадает со знаком операнда D.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: одинарной точности
                         с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - 1, если операнды - одинаковые по знаку бесконечности;
           иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FSUB.S   S,D (синтаксис операции MOVE,
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  uu00  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FSUB.X
^FSUB.X              ВЫЧИТАНИЕ С ПЛАВАЮЩЕЙ ТОЧКОЙ              FSUB.X
 --------------------------------------------------------------------
 Операция:   D - S --> Округление --> D  (параллельная пересылка)
                      до одинарной
                       повышенной
                        точности

 Синтаксис:  FSUB.X  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Операнд  D вычитается из S, результат округляется до одинарной повы-
 шенной точности и запоминается в D. В особом случае, когда  │S│=│D│,
 результат будет либо +0, либо -0; знак нуля совпадает со знаком опе-
 ранда D.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - 1, если операнды - одинаковые по знаку бесконечности;
           иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FSUB.X   S,D (синтаксис операции MOVE,
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   01  1sss  uu00  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FTFR.S
^FTFR.S          ПЕРЕСЫЛКА ДАННЫХ С ПЛАВАЮЩЕЙ ТОЧКОЙ           FTFR.S
^                        МЕЖДУ РЕГИСТРАМИ АЛУ
 --------------------------------------------------------------------
 Операция:   S --> Округление --> D  (параллельная пересылка)
                  до одинарной
                    точности

 Синтаксис:  FTFR.S  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Берется  содержимое  указанного операнда S, округляется до одинарной
 точности и результат запоминается в D. Если S и D - один  и  тот  же
 регистр,  то  это эквивалентно команде "Округление до одинарной точ-
 ности".

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: одинарной точности
                         с плавающей точкой (SP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если результат неточный; иначе 0.
   DZ    - Всегда 0.
   UNF   - 1, если результат потерял значимость; иначе 0.
   OVF   - 1, если было переполнение результата; иначе 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FTFR.S   S,D (синтаксис операции MOVE,
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  1sss  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FTFR.X
^FTFR.X          ПЕРЕСЫЛКА ДАННЫХ С ПЛАВАЮЩЕЙ ТОЧКОЙ           FTFR.X
^                        МЕЖДУ РЕГИСТРАМИ АЛУ
 --------------------------------------------------------------------
 Операция:   S -->  D    (параллельная пересылка)

 Синтаксис:  FTFR.X  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание: Содержимое указанного операнда S запоминается в D.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: повышенной одинарной точности
                         с плавающей точкой (SEP)

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FTFR.X   S,D (синтаксис операции MOVE,
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  1sss  uu11  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:FTRAPcc
^FTRAPcc         УСЛОВНОЕ ПРОГРАММНОЕ ПРЕРЫВАНИЕ              FTRAPcc
 --------------------------------------------------------------------
 Операция:   Если cc, то начать обработку программного прерывания

 Синтаксис:  FTRAPcc

 Описание:

 Если указанное условие истинно, то приостанавливается обычное выпол-
 нение команд и инициируется обработка программного прерывания.  Если
 используется  длинная  программа прерывания, то в регистре состояния
 устанавливается приоритет прерывания (I1,I0), равный 3. Если указан-
 ное условие ложно, то выполнение программы продолжается со следующей
 команды. Дополнительная информация - в Разделе A.10.
 Бит  UNCC  ре-

 гистра  ER  и флаг SIOP регистра IER устанавливаются,
 если был уста-

 новлен
 бит NAN регистра ER и условие отмечено признаком "Да"
 в  пос-
 ледней
 колонке. Это происходит до записи в стек регистра состояния.

 "cc" может задавать следующие условия:


      Дополнительное условие

   Мнемоника                     Условие           установки
  UNCC *
 --------------------------------------------------------------------
   EQ     - равно                  Z = 1                  Нет
   ERR    - ошибка                 UNCC v SNAN v          Нет
                                   v OPERR v OVF v
                                   v UNF v DZ = 1
   GE     - больше или равно       NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше      NAN v Z = 0            Да
   GLE    - больше, меньше или     NAN = 0                Да
            равно
   GT     - больше                 NAN v Z v N = 0        Да
   INF    - бесконечность          I = 1                  Да
   LE     - меньше или равно       NAN v ~~(N v Z) = 0     Да
   LT     - меньше                 NAN v Z v ~~N = 0       Да
   MI     - минус                  N = 1                  Нет
   NE(Q)  - не равно               Z = 0                  Нет
   NGE    - не (больше или равно)  NAN v (N & ~~Z) = 1     Нет
   NGL    - не (больше или меньше) NAN v Z = 1            Да
   NGLE   - не (больше, меньше     NAN = 1                Да
                или равно)
   NGT    - не больше              NAN v Z v N = 1        Да
   NINF   - не бесконечность       I = 0                  Да
   NLE    - не (меньше или равно)  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше              NAN v Z v ~~N = 1       Да
   OR     - упорядочено            NAN = 0                Нет
   PL     - плюс                   N = 0                  Нет
   UN     - неупорядочено          NAN = 1                Нет

 Примечание: Операнды для условия ERR берутся из регистра ER.
             * См.описание UNCC в Разделе A.4.

 Коды условия регистра CCR:  Не меняются.

 Биты состояния регистра ER:

   INX   - Не меняется.
   DZ    - Не меняется.
   UNF   - Не меняется.
   OVF   - Не меняется.
   OPERR - Не меняется.
   SNAN  - Не меняется.

   UNCC  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Флаги регистра IER:

   SINX  - Не меняется.
   SDZ   - Не меняется.
   SUNF  - Не меняется.
   SOVF  - Не меняется.

   SIOP  - 1, если NAN установлен и выполнено дополнительное условие

 (условие
  отмечено
 как "Да"). Иначе не меняется.

 Формат команды: FTRAPcc

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  1c  cccc  0000   0011   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 10 тактов
 Расход памяти:     1 слово
:FTST
^FTST            ПРОВЕРКА ОПЕРАНДА С ПЛАВАЮЩЕЙ ТОЧКОЙ            FTST
 --------------------------------------------------------------------
 Операция:   S - 0 --> D   (параллельная пересылка)

 Синтаксис:  FTST  S   (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Указанный операнд сравнивается с нулем. Никакого результата не запо-
 минается, но изменяются некоторые коды условия.

 Разрядность операндов:  повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: отсутствует

 Коды условия регистра CCR:
   (Примечание:  поскольку результат никуда на помещается, округления
    не происходит и биты кодов условий устанавливаются в  предположе-
    нии, что результат бесконечно точен.)

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если результат бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - Всегда 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: FTST S (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0110  uu00  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         S       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:GETEXP
^GETEXP                  ВЫДЕЛЕНИЕ ПОРЯДКА                     GETEXP
 --------------------------------------------------------------------
 Операция:   Порядок S --> D.L   (параллельная пересылка)

 Синтаксис:  GETEXP  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Выделяется  порядок операнда с плавающей точкой одинарной повышенной
 точности и запоминается как несмещенный в виде 32-битного  целого  в
 двоично-дополнительном  коде  в  нижней  части  D.  Величина порядка
 уменьшается на число сдвигов, необходимых для нормализации мантиссы,
 если исходное число с плавающей точкой было денормализованным.

 В качестве примера использования FGETMAN, FGETEXP и FSCALE  рассмот-
 рим  разложение  числа  с плавающей точкой на мантиссу и несмещенный
 порядок с последующим восстановлением исходного  числа  с  плавающей
 точкой.

   FGETMAN   D0,D1      ; выделение нормализованной мантиссы
   FGETEXP   D0,D2      ; выделение несмещенного порядка
   MOVE      D2.L,D2.H  ; пересылка порядока
   FSCALE.S  D2.H,D1    ; масштабирование исходной мантиссы

 Следующая  таблица  показывает результат команды в некоторых частных
 случаях:

         Операнд-Источник        Результат
 --------------------------------------------------------------------
         +/- бесконечность       $7FFFFFFF
         +/- 0                   $80000000
         SNaN или QNaN           $FFFFFFFF

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Не меняется.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - 1, если операнд-Источник - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - Всегда 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - 1, если операнд-Источник - бесконечность, 0 или сигнализи-
           рующий NaN (не число); иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: GETEXP      S,D (синтаксис операции MOVE
                                  см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  0110  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:ILLEGAL
^ILLEGAL         ПРЕРЫВАНИЕ ПО ЗАПРЕЩЕННОЙ КОМАНДЕ            ILLEGAL
 --------------------------------------------------------------------
 Операция:   Начинается обработка исключительной ситуации
             по запрещенной команде

 Синтаксис:  ILLEGAL

 Описание:

 Приостанавливается обычное выполнение команд и инициируется обработ-
 ка исключительной ситуации по запрещенной команде. Если используется
 длинная программа обработки прерывания, то в регистре состояния  ус-
 танавливается приоритет прерывания (I1,I0), равный 3.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ILLEGAL

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000    0000    0000    0000    00 │ 00   0000   0000  0101   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:   отсутствуют

 Время исполнения: 8 тактов
 Расход памяти:    1 слово
:INC
^INC                     УВЕЛИЧЕНИЕ НА ЕДИНИЦУ                    INC
 --------------------------------------------------------------------
 Операция:   D.L + 1 --> D.L   (параллельная пересылка)

 Синтаксис:  INC  D    (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая  часть указанного операнда увеличивается на 1. Результат за-
 поминается в младшей части D.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если был перенос из старшего значащего бита; иначе 0.
   V  - 1, если было переполнение; иначе 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: INC  D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0110  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:INT
^INT             ПРЕОБРАЗОВАНИЕ ВЕЩЕСТВЕННОГО В ЦЕЛОЕ             INT
 --------------------------------------------------------------------
 Операция:   Целое (D) --> D.L   (параллельная пересылка)

 Синтаксис:  INT  D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Указанный операнд с плавающей точкой преобразуется в 32-битное целое
 в двоично-дополнительном коде. Режим округления задается в  SR.  Ре-
 зультат  запоминается  в  младшей части D. Старшая и средняя части D
 остаются без изменений.

 Следующая таблица показывает результат команды в  некоторых  частных
 случаях:

         Операнд-Источник        Результат
 --------------------------------------------------------------------
         Больше 2**31 - 1        $7FFFFFFF
         Меньше -2**31           $80000000
         + бесконечность         $7FFFFFFF
         - бесконечность         $80000000
         NaN                     $FFFFFFFF

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - 1,  если операнд-Источник - NaN, бесконечность или его значе-
        ние слишком велико, и он не может быть представлен в виде це-
        лого числа; иначе - 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если операнд отрицательный; иначе 0.
   I  - 1, если операнд - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если операнд с плавающей точкой не имеет точного целого
           представления; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - 1, если операнд-Источник - бесконечность или NaN,
           1, если было переполнение результата; иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: INT  D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0011  uu00  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:INTRZ
^INTRZ           ПРЕОБРАЗОВАНИЕ ВЕЩЕСТВЕННОГО В ЦЕЛОЕ           INTRZ
^                    С ОКРУГЛЕНИЕМ В СТОРОНУ НУЛЯ
 --------------------------------------------------------------------
 Операция:   Целое (D) --> D.L    (параллельная пересылка)

 Синтаксис:  INTRZ  D  (синтаксис операции MOVE см.описание MOVE)

 Описание:
 Указанный операнд с плавающей точкой преобразуется в 32-битное целое
 в двоично-дополнительном коде, округленное в сторону нуля. Результат
 запоминается  в  младшей части D. Старшая и средняя части D остаются
 без  изменений.  Поскольку  такое преобразование требуется часто для
 выяснения количества значащих разрядов, была реализована эта  коман-
 да,  при  использовании которой не требуется задавать режим округле-
 ния, как в случае команды INT.

 Следующая  таблица  показывает результат команды в некоторых частных
 случаях:

         Операнд-Источник        Результат
 --------------------------------------------------------------------
         Больше 2**31 - 1        $7FFFFFFF
         Меньше -2**31           $80000000
         + бесконечность         $7FFFFFFF
         - бесконечность         $80000000
         NaN                     $FFFFFFFF

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - 1, если операнд-Источник - NaN, бесконечность или его  значе-
        ние слишком велико, и он не может быть представлен в виде це-
        лого числа; иначе - 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если операнд отрицательный; иначе 0.
   I  - 1, если операнд - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если операнд с плавающей точкой не имеет точного целого
           представления; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - 1, если операнд-Источник - бесконечность или NaN,
           1, если было переполнение результата; иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: INTRZ D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0011  uu10  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:INTU
^INTU      ПРЕОБРАЗОВАНИЕ ВЕЩЕСТВЕННОГО В ЦЕЛОЕ БЕЗ ЗНАКА        INTU
 --------------------------------------------------------------------
 Операция:   Беззнаковое целое (D) --> D.L  (параллельная пересылка)

 Синтаксис:  INTU  D   (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Указанный операнд с плавающей точкой преобразуется в 32-битное целое
 без  знака. Режим округления задается в SR. Результат запоминается в
 младшей части D. Старшая и средняя части D остаются без изменений.

 Следующая таблица показывает результат команды в  некоторых  частных
 случаях:

         Операнд-Источник        Результат
 --------------------------------------------------------------------
         Больше 2**31 - 1        $7FFFFFFF
         Меньше -2**31           $80000000
         + бесконечность         $7FFFFFFF
         - бесконечность         $80000000
         NaN                     $FFFFFFFF
         +/- 0                   $00000000

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - 1, если операнд-Источник - NaN, бесконечность или отрицатель-
        ное ненулевое число;
      - 1, если операнд положительный, а его значение слишком велико,
        и он не может быть представлен в виде целого числа;
        иначе - 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если операнд отрицательный; иначе 0.
   I  - 1, если операнд - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если операнд с плавающей точкой не имеет точного целого
           представления; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - 1, если  операнд-Источник - бесконечность, NaN или отрица-
           тельный не 0;
           1, если было переполнение результата; иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: INTU   D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0010  uu00  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:INTURZ
^INTURZ    ПРЕОБРАЗОВАНИЕ ВЕЩЕСТВЕННОГО В ЦЕЛОЕ БЕЗ ЗНАКА      INTURZ
^                   С ОКРУГЛЕНИЕМ В СТОРОНУ НУЛЯ
 --------------------------------------------------------------------
 Операция:   Беззнаковое целое (D) --> D.L  (параллельная пересылка)

 Синтаксис:  INTURZ  D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Указанный операнд с плавающей точкой преобразуется в 32-битное целое
 в двоично-дополнительном коде, округленное в сторону нуля. Результат
 запоминается в младшей части D. Старшая и средняя части  D  остаются
 без  изменений.  Поскольку  такое преобразование требуется часто для
 выяснения количества значащих разрядов, была реализована эта  коман-
 да,  при  использовании которой не требуется задавать режим округле-
 ния, как в случае команды INTU.

 Следующая таблица  показывает  результат  команды  в  некоторых
 частных случаях:

         Операнд-Источник        Результат
 --------------------------------------------------------------------
         Больше 2**31 - 1        $7FFFFFFF
         Меньше -2**31           $80000000
         + бесконечность         $7FFFFFFF
         - бесконечность         $80000000
         NaN                     $FFFFFFFF
         +/- 0                   $00000000

 Разрядность операнда:   повышенной одинарной точности
                         с плавающей точкой (SEP)
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - 1, если операнд-Источник - NaN, бесконечность или отрицатель-
        ный не 0,
      - 1, если операнд положительный, а его значение слишком велико,
        и он не может быть представлен в виде целого числа;
        иначе -0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если операнд отрицательный; иначе 0.
   I  - 1, если операнд - бесконечность; иначе 0.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

   INX   - 1, если операнд с плавающей точкой не имеет точного целого
           представления; иначе 0.
   DZ    - Всегда 0.
   UNF   - Всегда 0.
   OVF   - Всегда 0.
   OPERR - 1, если  операнд-Источник - бесконечность, NaN или отрица-
           тельный не 0;
           1, если было переполнение результата; иначе 0.
   SNAN  - 1, если операнд - сигнализирующий NaN (не число); иначе 0.
   NAN   - 1, если результат NaN (не число); иначе 0.
   UNCC  - Всегда 0.

 Флаги регистра IER:  Изменяются согласно стандартным правилам.

 Формат команды: INTURZ  D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0010  uu10  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv + da  тактов
 Расход памяти:    1 + mv       слов
:Jcc
^Jcc                     УСЛОВНЫЙ ПЕРЕХОД                         Jcc
 --------------------------------------------------------------------
 Операция:   Если  cc, то     xx --> PC   либо  ea --> PC
                    иначе PC + 1 --> PC

 Синтаксис:  Jcc label(short)
             Jcc ea

 Описание:

 Если указанное условие истинно, то выполнение программы продолжается
 с  указанного в команде исполнительного адреса. Если указанное усло-
 вие ложно, то PC увеличивается, и заданный исполнительный адрес  иг-
 норируется. Однако адресный регистр, указанный в поле исполнительно-
 го адреса, всегда обновляется независимо от условия. Для задания ис-
 полнительного адреса могут использоваться все режимы адресации с мо-
 дификацией операнда в памяти. Может также использоваться режим адре-
 сации с коротким адресом  перехода.  15-битный  операнд  расширяется
 знаковым  разрядом, чтобы образовывать корректный исполнительный ад-
 рес. Ограничения см. в Разделе A.10.

 "cc" может задавать следующие условия перехода :

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: Jcc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    10aa    aaaa    aa  │  1c  cccc  1aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: Jcc ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    MMMR    RR  │   1c  cccc  1000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │       необязательное слово исполнительного адреса                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 ea  Rn - R0-R7  (только  режимы адресации с модификацией операнда в
                  памяти)

 Абсолютный адрес - 32 бита
 Короткий адрес перехода -  aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110

 Время исполнения: 4 + jx   тактов
 Расход памяти:    1 + ea   слов
:JCLR
^JCLR                ПЕРЕХОД, ЕСЛИ БИТ РАВЕН НУЛЮ                JCLR
 --------------------------------------------------------------------
 Операция:   Если S{n}=0,  то     xxxx   --> PC
                           иначе  PC + 1 --> PC

 Синтаксис:  JCLR #bit,X:ea,label
             JCLR #bit,X:aa,label
             JCLR #bit,X:pp,label
             JCLR #bit,Y:ea,label
             JCLR #bit,Y:aa,label
             JCLR #bit,Y:pp,label
             JCLR #bit,S,label

 Описание:

 Проверяется n-ный бит операнда-Источника. Если он равен 0, то выпол-
 нение программы продолжается с абсолютного адреса, указанного в  до-
 полнительном  слове  команды. В противном случае PC увеличивается, а
 дополнительное слово игнорируется. Однако адресный регистр,  указан-
 ный  в поле исполнительного адреса, изменяется всегда, независимо от
 условия. Для указания операнда-Источника  могут  использоваться  все
 режимы  адресации  с модификацией операнда в памяти. Могут также ис-
 пользоваться режимы адресации: абсолютная короткая, с коротким адре-
 сом ввода-вывода и прямая регистровая. Номер проверяемого  бита  (0-
 31)  задается  непосредственными  данными. Ограничения см. в Разделе
 A.10. Отметим, что если в качестве операнда-Источника  S  будет  ис-
 пользован SSH, то регистр указателя стека уменьшится на 1.

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JCLR #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1011    dddd    dd  │   d0  0100  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JCLR #bit,X:pp,label
                 JCLR #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    1ppp    pp  │   pp  010S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JCLR #bit,X:aa,label
                 JCLR #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    0aaa    aa  │   aa  010S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JCLR #bit,X:ea,label
                 JCLR #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1000    MMMR    RR  │   00  010S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Абсолютный адрес - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти    S         Номер бита   bbbbb
 X-память      0         Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память      1

 D             ddddddd
 ----------------------------------------
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 6 + jx   тактов
 Расход памяти:    2        слова
:JMP
^JMP                     БЕЗУСЛОВНЫЙ ПЕРЕХОД                      JMP
 --------------------------------------------------------------------
 Операция:   xx --> PC   либо   ea --> PC

 Синтаксис:  JMP label(short)
             JMP ea

 Описание:

 Выполнение программы продолжается с исполнительного адреса из памяти
 программы. Для задания исполнительного адреса можно использовать все
 режимы  адресации  с модификацией операнда в памяти. Может также ис-
 пользоваться режим адресации "короткий быстрый  переход".  15-битный
 операнд расширяется знаковым разрядом, чтобы образовывать корректный
 исполнительный адрес. Ограничения см. в Разделе A.10.

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JMP label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    10aa    aaaa    aa  │  11  1111  1aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: JMP ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0000    MMMR    RR  │  11  1111  1000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 ea Rn - R0-R7 - (только режимы адресации с модификацией операнда  в
                  памяти)

 Абсолютный адрес - 32 бита
 Короткий адрес перехода - aaaaaaaaaaaaaaa (15 бит)

 Время исполнения: 4 + jx   тактов
 Расход памяти:    1 + ea   слов
:JOIN
^JOIN            СЛИЯНИЕ ДВУХ 16-БИТНЫХ ЦЕЛЫХ                    JOIN
 --------------------------------------------------------------------
 Операция:   S.L {15:0} --> D.L {31:16}  (параллельная пересылка)
             D.L {15:0} --> D.L {15:0}

 Синтаксис:  JOIN S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшие 16 бит младшей части  операнда-Источника  S  пересылаются  в
 старшие  16  бит  младшей части операнда-Приемника D. Младшие 16 бит
 младшей части D не изменяются.

 Разрядность операнда:   16-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия:
   C  - Не меняется
   V  - всегда 0
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JOIN S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   11  0sss  1010  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv   тактов
 Расход памяти:    1 + mv   слов
:JOINB
^JOINB           СЛИЯНИЕ ДВУХ 8-БИТНЫХ ЦЕЛЫХ                    JOINB
 --------------------------------------------------------------------
 Операция:   D.L { 7:0} --> D.L { 7:0}    (параллельная пересылка)
             S.L { 7:0} --> D.L {15:8}
                     0  --> D.L {31:16}

 Синтаксис:  JOINB S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшие 8 бит младшей части операнда-Источника S пересылаются в биты
 15-8 младшей части операнда-Приемника D. Младшие 8 бит младшей части
 D остаются не изменяются. Старшие 16 бит младшей части D очищаются.

 Разрядность операнда:   8-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия:
   C  - Не меняется
   V  - всегда 0
   Z  - 1, если результат равен 0; иначе 0.
   N  - всегда 0
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JOINB S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   11  0sss  1010  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv   тактов
 Расход памяти:    1 + mv   слов
:JScc
^JScc                УСЛОВНЫЙ ВЫЗОВ ПОДПРОГРАММЫ                 JScc
 --------------------------------------------------------------------
 Операция:   Если  cc, то    PC     --> SSH
                             SR     --> SSL
                             xx     --> PC   либо  ea --> PC
                       иначе PC + 1 --> PC

 Синтаксис:  JScc label(short)
             JScc ea

 Описание:

 Если указанное условие истинно, то адрес команды,  следующей  непос-
 редственно  за  командой  JScc,  и  регистр состояния записываются в
 стек. Выполнение программы продолжается с исполнительного  адреса  в
 памяти программы. Если указанное условие ложно, то PC увеличивается,
 и  дополнительное  слово игнорируется. Однако адресный регистр, ука-
 занный в поле исполнительного адреса, всегда  изменяется  независимо
 от  условия. Для задания исполнительного адреса могут использоваться
 все режимы адресации с модификацией операнда в памяти.  Может  также
 использоваться режим адресации "быстрый короткий переход". 15-битный
 операнд расширяется знаковым разрядом, чтобы образовывать корректный
 исполнительный адрес. Ограничения см. в Разделе A.10.

 "cc" может задавать следующие условия перехода :

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JScc label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    11aa    aaaa    aa  │   1c  cccc  1aaa  aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: JScc ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    MMMR    RR  │   1c  cccc  1000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │          необязательное слово исполнительного адреса             │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 ea  Rn - R0-R7  (только  режимы адресации с модификацией операнда в
                  памяти)

 Абсолютный адрес - 32 бита
 Короткий адрес перехода -  aaaaaaaaaaaaaaa (15 бит)

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110
         AL         11111

 Время исполнения: 4 + jx   тактов
 Расход памяти:    1 + ea   слов
:JSCLR
^JSCLR           ВЫЗОВ ПОДПРОГРАММЫ, ЕСЛИ БИТ РАВЕН НУЛЮ        JSCLR
 --------------------------------------------------------------------
 Операция:   Если S{n}= 0, то    PC     --> SSH
                                 SR     --> SSL
                                 xxxx   --> PC
                           иначе PC + 1 --> PC

 Синтаксис:  JSCLR #bit,X:ea,label
             JSCLR #bit,X:aa,label
             JSCLR #bit,X:pp,label
             JSCLR #bit,Y:ea,label
             JSCLR #bit,Y:aa,label
             JSCLR #bit,Y:pp,label
             JSCLR #bit,S,label

 Описание:

 Проверяется n-ный бит операнда-Источника. Если он равен 0, то  адрес
 команды, следующей непосредственно за командой JSCLR, и регистр сос-
 тояния  записываются в стек. Выполнение программы продолжается с 32-
 битного абсолютного адреса, указанного в дополнительном слове коман-
 ды. В противном случае PC увеличивается и дополнительное слово игно-
 рируется. Однако адресный регистр, указанный в поле  исполнительного
 адреса, изменяется всегда, независимо от условия. Для задания испол-
 нительного  адреса могут использоваться все режимы адресации с моди-
 фикацией операнда в памяти. Могут также использоваться режимы  адре-
 сации: абсолютная короткая, с коротким адресом ввода-вывода и прямая
 регистровая.  Номер проверяемого бита (0-31) задается непосредствен-
 ными данными. Дополнительная информация - в Разделе  A.10.  Отметим,
 что  если  в  качестве операнда-Источника S используется SSH, то ре-
 гистр указателя стека уменьшится на 1; если при этом условие  истин-
 но,  то  PC и регистр состояния запишутся в ту позицию стека, откуда
 выбирался бит для тестирования.

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JSCLR #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1111    dddd    dd  │   d0  0100  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSCLR #bit,X:pp,label
                 JSCLR #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1110    1ppp    pp  │   pp  010S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSCLR #bit,X:aa,label
                 JSCLR #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1110    0aaa    aa  │   aa  010S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSCLR #bit,X:ea,label
                 JSCLR #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1100    MMMR    RR  │   00  010S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Флаги регистра IER: не меняются

 Поля команды:

 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Абсолютный адрес - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 D             ddddddd
 ----------------------------------------
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 6 + jx   тактов
 Расход памяти:    2        слова
:JSET
^JSET            ПЕРЕХОД, ЕСЛИ БИТ РАВЕН ЕДИНИЦЕ                 JSET
 --------------------------------------------------------------------
 Операция:   Если S{n}=1,  то    xxxx   --> PC
                           иначе PC + 1 --> PC

 Синтаксис:  JSET #bit,X:ea,label
             JSET #bit,X:aa,label
             JSET #bit,X:pp,label
             JSET #bit,Y:ea,label
             JSET #bit,Y:aa,label
             JSET #bit,Y:pp,label
             JSET #bit,S,label

 Описание:

 Проверяется n-ный бит операнда-Источника. Если он равен 1, то выпол-
 нение программы продолжается с абсолютного адреса, указанного в  до-
 полнительном  слове  команды. В противном случае PC увеличивается, и
 дополнительное слово игнорируется. Однако адресный регистр,  указан-
 ный  в поле исполнительного адреса, изменяется всегда, независимо от
 условия. Для указания операнда-Источника  могут  использоваться  все
 режимы  адресации  с модификацией операнда в памяти. Могут также ис-
 пользоваться режимы адресации: абсолютная короткая, с коротким адре-
 сом ввода-вывода и прямая регистровая. Номер проверяемого  бита  (0-
 31)  задается  непосредственными  данными. Ограничения см. в Разделе
 A.10. Отметим, что, если в качестве операнда-Источника S использует-
 ся SSH, то регистр указателя стека уменьшится на 1.

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JSET #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1011    dddd    dd  │   d0  1100  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSET #bit,X:pp,label
                 JSET #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    1ppp    pp  │   pp  110S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSET #bit,X:aa,label
                 JSET #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    0aaa    aa  │   aa  110S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSET #bit,X:ea,label
                 JSET #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1000    MMMR    RR  │   00  110S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                        абсолютный адрес                          │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Абсолютный адрес - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти    S         Номер бита   bbbbb
 X-память      0         Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память      1

 D             ddddddd
 ----------------------------------------
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 6 + jx   тактов
 Расход памяти:    2        слова
:JSR
^JSR                     ВЫЗОВ ПОДПРОГРАММЫ                       JSR
 --------------------------------------------------------------------
 Операция:   PC --> SSH
             SR --> SSL
             xx --> PC    либо  ea --> PC

 Синтаксис:  BSR label(short)
             BSR ea

 Описание:

 Адрес команды, следующей непосредственно за командой JSR, и  регистр
 состояния  записываются  в стек. Выполнение программы продолжается с
 исполнительного адреса в памяти программы. Для задания  исполнитель-
 ного адреса могут использоваться все режимы адресации с модификацией
 операнда в памяти. Может также использоваться режим адресации "быст-
 рый короткий переход". 15-битный операнд расширяется знаковым разря-
 дом, чтобы образовывать корректный исполнительный адрес. Ограничения
 см. в разделе A.10.

 Коды условия:               Не меняется.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JSR label(short)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    11aa    aaaa    aa  │   11  1111  1aaa  aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: JSR ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0011    0100    MMMR    RR  │   11  1111  1000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 ea  Rn - R0-R7  (только режимы адресации с модификацией операнда  в
                  памяти)

 Абсолютный адрес - 32 бита
 Короткий адрес перехода -  aaaaaaaaaaaaaaa (15 бит)

 Время исполнения: 4 + jx   тактов
 Расход памяти:    1 + ea   слов
:JSSET
^JSSET       ВЫЗОВ ПОДПРОГРАММЫ, ЕСЛИ БИТ РАВЕН ЕДИНИЦЕ         JSSET
 --------------------------------------------------------------------
 Операция:   Если S{n}=1,  то    PC     --> SSH
                                 SR     --> SSL
                                 xxxx   --> PC
                           иначе PC + 1 --> PC

 Синтаксис:  JSSET #bit,X:ea,label
             JSSET #bit,X:aa,label
             JSSET #bit,X:pp,label
             JSSET #bit,Y:ea,label
             JSSET #bit,Y:aa,label
             JSSET #bit,Y:pp,label
             JSSET #bit,S,label

 Описание:

 Проверяется n-ный бит операнда-Источника. Если он равен 1, то  адрес
 команды, следующей непосредственно за командой JSSET, и регистр сос-
 тояния  записываются в стек. Выполнение программы продолжается с аб-
 солютного 32-битного адреса, указанного в дополнительном  слове  ко-
 манды.  В  противном случае PC увеличивается, и дополнительное слово
 игнорируется. Однако адресный регистр, указанный в поле исполнитель-
 ного адреса, всегда изменяется независимо от  условия.  Для  заданиа
 исполнительного  адреса  могут использоваться все режимы адресации с
 модификацией операнда в памяти. Могут также использоваться регистро-
 вый, абсолютный короткий и ввода-вывода короткий  режимы  адресации.
 Номер  проверяемого  бита (0-31) задается непосредственными данными.
 Дополнительная информация - в Разделе A.10. Отметим, что если в  ка-
 честве  операнда-Источника  S используется SSH, то регистр указателя
 стека уменьшится на 1; если, кроме этого, условие истинно, PC и  ре-
 гистр  состояния  запишутся в ту позицию стека, откуда выбирался бит
 для тестирования.

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: JSSET #bit,S,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1011    dddd    dd  │   d0  1100  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSSET #bit,X:pp,label
                 JSSET #bit,Y:pp,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    1ppp    pp  │   pp  110S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSSET #bit,X:aa,label
                 JSSET #bit,Y:aa,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1010    0aaa    aa  │   aa  110S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: JSSET #bit,X:ea,label
                 JSSET #bit,Y:ea,label
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0010    1000    MMMR    RR  │   00  110S  100b  bbbb   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    абсолютный адрес                              │
 └──────────────────────────────────────────────────────────────────┘

 Флаги регистра IER: Не меняются

 Поля команды:

 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxx))
 Абсолютный адрес - 32 бита
 Непосредственный короткий операнд - bbbbb ( 5 бит )
 Абсолютный короткий адрес - aaaaaaa ( 7 бит )
 Короткий адрес ввода-вывода - ppppppp ( 7 бит )

 Тип памяти    S         Номер бита   bbbbb
 X-память      0         Бит 0-31     nnnnn  ,  где nnnnn = 0-31
 Y-память      1

 D             ddddddd
 ----------------------------------------
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 6 + jx   тактов
 Расход памяти:    2        слова
:LEA
^LEA             ЗАГРУЗКА ИСПОЛНИТЕЛЬНОГО АДРЕСА                  LEA
 --------------------------------------------------------------------
 Операция:   ea --> D    либо   Rn + xxxx --> D

 Синтаксис:  LEA     ea,D
             LEA     (Rn+смещение),D

 Описание:

 Производится вычисление исполнительного адреса и загрузка его в  ре-
 гистр-приемник.  Регистр-источник  не меняется. Могут использоваться
 режимы адресации: косвенный регистровый с длинным смещением, с пост-
 инкрементированием и пост-декрементированием. Отметим, что,  если  в
 качестве D используется SSH, то SP предварительно уменьшится на 1.

                         ПРЕДОСТЕРЕЖЕНИЕ
     Ограничения, касающиеся регистров Rn, Mn и Nn как приемников,
     см. в Разделе A.10.6.

 Коды условия:

 Если SR  - операнд-Приемник:
   C  - Устанавливается в соответствии с битом 0 операнда-Источника
   V  - Устанавливается в соответствии с битом 1 операнда-Источника
   Z  - Устанавливается в соответствии с битом 2 операнда-Источника
   N  - Устанавливается в соответствии с битом 3 операнда-Источника
   I  - Устанавливается в соответствии с битом 4 операнда-Источника
   LR - Устанавливается в соответствии с битом 5 операнда-Источника
   ^R - Устанавливается в соответствии с битом 6 операнда-Источника
   A  - Устанавливается в соответствии с битом 7 операнда-Источника

 Если другие операнды:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если SR - операнд-Приемник:
   INX   - Устанавливается в соответствии с битом 8 операнда-Источника
   DZ    - Устанавливается в соответствии с битом 9 операнда-Источника
   UNF   - Устанавливается в соответствии с битом 10 операнда-Источника
   OVF   - Устанавливается в соответствии с битом 11 операнда-Источника
   OPERR - Устанавливается в соответствии с битом 12 операнда-Источника
   SNAN  - Устанавливается в соответствии с битом 13 операнда-Источника
   NAN   - Устанавливается в соответствии с битом 14 операнда-Источника
   UNCC  - Устанавливается в соответствии с битом 15 операнда-Источника

 Если другие операнды:
   INX   - Не меняется.
   DZ    - Не меняется.
   UNF   - Не меняется.
   OVF   - Не меняется.
   OPERR - Не меняется.
   SNAN  - Не меняется.
   NAN   - Не меняется.
   UNCC  - Не меняется.

 Флаги регистра IER:

 Если SR - операнд-Приемник:
   SINX   - Устанавливается в соответствии с битом 16 операнда-Источника
   SDZ    - Устанавливается в соответствии с битом 17 операнда-Источника
   SUNF   - Устанавливается в соответствии с битом 18 операнда-Источника
   SOVF   - Устанавливается в соответствии с битом 19 операнда-Источника
   SIOP   - Устанавливается в соответствии с битом 20 операнда-Источника

 Если другие операнды:
   SINX   - Не меняется.
   SDZ    - Не меняется.
   SUNF   - Не меняется.
   SOVF   - Не меняется.
   SIOP   - Не меняется.

 Формат команды: LEA ea,D
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0100    0MMR    RR  │   10  0000  1ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                                                                  │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: LEA (Rn+смещение),D
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0100    000R    RR  │   00  0000  1ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                    длинное смещение                              │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 ea  Rn - R0-R7  (только режимы адресации с последующей модификацией
                  регистра)

 Длинное смещение - 32 бита

 D             ddddddd
 ----------------------------------------
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 4 + le  тактов
 Расход памяти:    1 + ea  слов
:LRA
^LRA             ЗАГРУЗКА АДРЕСА ОТНОСИТЕЛЬНО PC                  LRA
 --------------------------------------------------------------------
 Операция:   PC + Rn --> D   либо   PC + xxxx --> D

 Синтаксис:  LRA     Rn,D
             LRA     label,D

 Описание:

 Указанное  смещение суммируется с PC и получившийся в результате ис-
 полнительный адрес загружается в регистр-приемник. PC содержит адрес
 следующей команды. Смещение - это 32-битное целое в двоично-дополни-
 тельном коде, представляющее собой  относительное  расстояние  между
 текущим и новым значением PC. Могут использоваться режимы адресации:
 длинное  смещение и адресация относительно PC. Дополнительная инфор-
 мация - в Разделе A.10. Отметим, что если в качестве D  используется
 SSH, то SP будет предварительно уменьшен на 1.

                         ПРЕДОСТЕРЕЖЕНИЕ
     Ограничения, касающиеся регистров Rn, Mn и Nn как приемников,
     см. в Разделе A.10.6.

 Коды условия:

 Если SR  - операнд-Приемник:
   C  - Устанавливается в соответствии с битом 0 операнда-Источника
   V  - Устанавливается в соответствии с битом 1 операнда-Источника
   Z  - Устанавливается в соответствии с битом 2 операнда-Источника
   N  - Устанавливается в соответствии с битом 3 операнда-Источника
   I  - Устанавливается в соответствии с битом 4 операнда-Источника
   LR - Устанавливается в соответствии с битом 5 операнда-Источника
   ^R - Устанавливается в соответствии с битом 6 операнда-Источника
   A  - Устанавливается в соответствии с битом 7 операнда-Источника

 Если другие операнды:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если SR - операнд-Приемник:
   INX   - Устанавливается в соответствии с битом 8 операнда-Источника
   DZ    - Устанавливается в соответствии с битом 9 операнда-Источника
   UNF   - Устанавливается в соответствии с битом 10 операнда-Источника
   OVF   - Устанавливается в соответствии с битом 11 операнда-Источника
   OPERR - Устанавливается в соответствии с битом 12 операнда-Источника
   SNAN  - Устанавливается в соответствии с битом 13 операнда-Источника
   NAN   - Устанавливается в соответствии с битом 14 операнда-Источника
   UNCC  - Устанавливается в соответствии с битом 15 операнда-Источника

 Если другие операнды:
   INX   - Не меняется.
   DZ    - Не меняется.
   UNF   - Не меняется.
   OVF   - Не меняется.
   OPERR - Не меняется.
   SNAN  - Не меняется.
   NAN   - Не меняется.
   UNCC  - Не меняется.

 Флаги регистра IER:

 Если SR - операнд-Приемник:
   SINX   - Устанавливается в соответствии с битом 16 операнда-Источника
   SDZ    - Устанавливается в соответствии с битом 17 операнда-Источника
   SUNF   - Устанавливается в соответствии с битом 18 операнда-Источника
   SOVF   - Устанавливается в соответствии с битом 19 операнда-Источника
   SIOP   - Устанавливается в соответствии с битом 20 операнда-Источника

 Если другие операнды:
   SINX   - Не меняется.
   SDZ    - Не меняется.
   SUNF   - Не меняется.
   SOVF   - Не меняется.
   SIOP   - Не меняется.

 Формат команды: LRA Rn,D
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0100    001R    RR  │   00  0000  0ddd  dddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: LRA label,D
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0100    000R    00  │   00  0000  0ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                   необязательное длинное смещение                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 Rn - R0-R7
 Длинное смещение - 32 бита

 D             ddddddd
 ----------------------------------------
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 4 + lr   тактов
 Расход памяти:    1 + lr   слов
:LSL
^LSL                     ЛОГИЧЕСКИЙ СДВИГ ВЛЕВО                   LSL
 --------------------------------------------------------------------
 Операция:
        31               0
       ┌──────────────────┐
 C <---- <-- ........ <--  <-- 0    (параллельная пересылка данных)
       └──────────────────┘

 Синтаксис:  LSL  D      (синтаксис операции MOVE см.описание MOVE)
             LSL  S,D    (синтаксис операции MOVE см.описание MOVE)
             LSL  #shift,D

 Описание:

 Сдвиг на один бит:

 Логический  сдвиг влево на один бит младшей части указанного операн-
 да. Бит переноса C принимает значение старшего значащего бита  млад-
 шей части операнда-Источника. Младший значащий бит операнда-Приемни-
 ка очищается. Результат запоминается в младшей части D.

 Сдвиг на несколько битов:

 Логический  сдвиг  влево  на  N бит (до 63) младшей части указанного
 операнда. Величина сдвига задается 11-битным целым числом,  располо-
 женным в старшей части S, или 6-битным непосредственным числом, рас-
 положенным  в  поле  команды. Биту переноса C присваивается значение
 N-го из вытесняемых битов младшей части операнда-Источника; при  ну-
 левой  величине  сдвига бит очищается. N младших значащих битов опе-
 ранда-Приемника очищаются. Если сдвиг производится более, чем на  32
 бита,  операнд-Приемник  D и бит C будут заполнены нулями. Результат
 запоминается в младшей части D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия:
   C  - 1, если последний вытесненный бит операнда = 1;
        иначе 0.
        0, если число битов сдвига равно 0.
   V  - всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: LSL D   (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   10  0100  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: LSL S.H,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   11  0sss  0010  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: LSL #shift,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    10  │  01  011n  nnnn   nddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.H    nnn  ,   где nnn = 0-7

         N       nnnnnn
         0       000000
         1       000001
         2       000010
        ...        ...

         62      111110
         63      111111

 Время исполнения: 2 + mv  тактов   (2 такта для LSL #shift,D)
 Расход памяти:    1 + mv  слов     (1 слово для LSL #shift,D)
:LSR
^LSR                     ЛОГИЧЕСКИЙ СДВИГ ВПРАВО                  LSR
 --------------------------------------------------------------------
 Операция:
        31               0
       ┌──────────────────┐
   0-->  --> ........ --> ---> C   (параллельная пересылка данных)
       └──────────────────┘

 Синтаксис:  LSR  D      (синтаксис операции MOVE см.описание MOVE)
             LSR  S,D    (синтаксис операции MOVE см.описание MOVE)
             LSR  #shift,D

 Описание:

 Сдвиг на один бит:

 Логический сдвиг вправо на один бит младшей части указанного операн-
 да. Бит переноса C принимает значение младшего значащего бита  млад-
 шей  части операнда-Источника. Бит 31 операнда принимает значение 0.
 Результат запоминается в младшей части D.

 Сдвиг на несколько битов:

 Логический сдвиг вправо на N бит (до 63)  младшей  части  указанного
 операнда.  Величина сдвига задается 11-битным целым числом, располо-
 женным в старшей части S, или 6-битным непосредственным числом, рас-
 положенным в поле команды. Биту переноса  C  присваивается  значение
 N-го  из вытесняемых битов младшей части операнда-Источника; при ну-
 левой величине сдвига бит очищается. N старших значащих  битов  опе-
 ранда-Приемника  очищаются. Если сдвиг производится более, чем на 32
 бита, операнд-Приемник D и бит C будут заполнены  нулями.  Результат
 запоминается в младшей части D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия:
   C  - 1, если последний вытесненный бит операнда = 1;
        иначе 0.
        0, если число битов сдвига равно 0.
   V  - всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: LSR D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   10  0000  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: LSR S.H,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле команды пересылки MOVE      │   11  0sss  0010  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: LSR #shift,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    10  │  01  010n  nnnn   nddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.H    nnn  ,   где nnn = 0-7

         N       nnnnnn
         0       000000
         1       000001
         2       000010
        ...        ...

         62      111110
         63      111111

 Время исполнения: 2 + mv  тактов   (2 такта для LSR #shift,D)
 Расход памяти:    1 + mv  слов     (1 слово для LSR #shift,D)
:MOVE (parallel)
^MOVE                    ПЕРЕСЫЛКА ДАННЫХ                        MOVE
 --------------------------------------------------------------------
 Операция:   Параллельная пересылка данных

 Синтаксис:  MOVE    (См. описание соответствующей операции)

 Описание:

 Пересылка данных из указанного источника в указанный  приемник.  Эта
 инструкция  включает  в себя операцию АЛУ "NOP" и параллельную пере-
 сылку данных, описываемую далее. Некоторые операции параллельной пе-
 ресылки различаются для целочисленных операндов и операндов с плава-
 ющей точкой,  согласно указанному виду операции АЛУ. Для  этой  цели
 используются  два  кода операции "NOP" АЛУ: "целое NOP" и "плавающее
 NOP". Например, если параллельная пересылка  в/из  XY-памяти  задана
 для целых операндов, то ассемблер сгенерирует 32-битное слово коман-
 ды,  где  в поле кода операции АЛУ будет стоять "целое NOP". Если же
 для параллельной пересылки определены данные  плавающей  арифметики,
 то генерируется "плавающее NOP".

 Коды условия:               Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: целое NOP

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0000  0000  0000   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: плавающее NOP

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0000  0000  0100   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Кодирование поля операции пересылки MOVE см. далее.

 A.7.1. Описание операции параллельной пересылки.

 Во  многих инструкциях можно указать пересылку данных по шине данных
 X и по шине данных Y. Это позволяет выполнять операцию АЛУ и, парал-
 лельно, до двух пересылок по шине за один и тот же такт. Обеспечива-
 ются следующие пересылки данных: регистр-регистр,  регистр-память  и
 память-регистр. Однако при обращении к памяти допускаются не все ре-
 жимы адресации. Ограничения на режимы адресации при пересылках отме-
 чены в описании каждой операции пересылки. Ниже приводится подробная
 информация о каждой операции параллельной пересылки.

 Время исполнения: 2 + mv
 Расход памяти:    1 + mv
:Move (NOP)
^Move            НЕТ ПАРАЛЛЕЛЬНОЙ ПЕРЕСЫЛКИ ДАННЫХ               Move
 --------------------------------------------------------------------
 Операция:   Отсутствует

 Синтаксис:  КОП-Операнды (АЛУ)

 Описание: Пересылка по шине данных не выполняется.

 Формат команды: КОП-Операнды (АЛУ)
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0110    0000    01  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды: отсутствуют

 Время исполнения: 0 тактов
 Расход памяти:    0 слов
:Move R
^Move                                                            Move
^R               ПАРАЛЛЕЛЬНАЯ ПЕРЕСЫЛКА РЕГИСТР-РЕГИСТР             R
 --------------------------------------------------------------------
 Операция:   S1 --> D1
             S2 --> D2

 Синтаксис:  КОП-Операнды   S1,D1
             КОП-Операнды   S2,D2

 Описание:

 Пересылка из регистра-источника в регистр-приемник. Может быть зада-
 на  пересылка  числа  одинарной  точности в число одинарной точности
 (S1,D1) или числа двойной точности в число двойной точности (S2,D2).

 Если в операции АЛУ указана в качестве приемника часть регистра  Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции  пересылки по шине данных. Т.е. в одной команде не разреша-
 ется двойное обращение к приемнику. Например, операция АЛУ и  опера-
 ция  пересылки  данных не могут записывать в один и тот же регистр в
 одной команде.

 Если в операции АЛУ указана в качестве источника часть регистра  Dn,
 то  эта  часть  того же регистра может быть указана как источник S в
 операции пересылки по шине данных. Т.е. в одной команде  допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно  прочитать регистр, который используется как источник или при-
 емник в операции АЛУ в той же самой инструкции.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Формат команды для одинарной точности - КОП-Операнды: S1,D1

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   10DD    DDDD    dddd    dd  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды для двойной точности - КОП-Операнды: S2,D2

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0001   011D    DDDD    0ddd    dd  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 S1 или       DDDDDD                S2 или        DDDDD
 D1           dddddd                D2            ddddd
 D0.S - D7.S  000nnn где nnn=0-7    D0.ML - D7.ML 11nnn   где nnn=0-7
 D0.L - D7.L  001nnn                D0.D - D7.D   10nnn
 D0.M - D7.M  010nnn
 D0.H - D7.H  011nnn             зарезервировано  01xxx

 D8.S         100000                D9.ML         00111
 D9.S         100001                D8.ML         00110
 D8.L         100010                D9.D          00101
 D9.L         100011                D8.D          00100
 D8.M         100100
 D9.M         100101
 D8.H         100110
 D9.H         100111

 R0 - R7      101nnn
 N0 - N7      110nnn
 M0 - M7      111nnn

 Время исполнения: 0 тактов
 Расход памяти:    0 слов
:Move U
^Move                                                            Move
^U               ПЕРЕСЫЛКА ОБНОВЛЕННОГО ЗНАЧЕНИЯ                    U
^              (ВЫЧИСЛЕНИЕ ИСПОЛНИТЕЛЬНОГО АДРЕСА)
 --------------------------------------------------------------------
 Операция:   вычисление  ea

 Синтаксис:  КОП-Операнды  ea

 Описание:

 Производится вычисление исполнительного  адреса.  Указаный  адресный
 регистр изменяется в соответствии с заданным режимом адресации. Мож-
 но  использовать  все  режимы адресации с модификацией. Для проверки
 содержимого адресных регистров можно  использовать  режим  адресации
 "без модификации" (Rn) в команде MOVETA.

 Формат команды - КОП-Операнды: ea
 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0001   0101    1011    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
  ea  Rn - R0-R7 (только режимы адресации с модификацией)

 Время исполнения: 0 тактов
 Расход памяти:    0 слов
:Move X:
^Move X:            ПЕРЕСЫЛКА СЛОВА X-ПАМЯТИ                  Move X:
 --------------------------------------------------------------------
 Операция:   X:<ea>      --> D
             X:<Rn+xxxx> --> D
             S           --> X:<ea>
             S           --> X:<Rn+xxxx>
             #xxxx       --> D

 Синтаксис:  КОП-Операнды  X:ea,D
             КОП-Операнды  X:(Rn+смещение),D
             КОП-Операнды  S,X:ea
             КОП-Операнды  S,X:(Rn+смещение)
             КОП-Операнды  #данные,D

 Описание:

 Пересылка  одного слова в/из X-памяти. Указывается один исполнитель-
 ный адрес. Могут использоваться все режимы адресации к памяти, вклю-
 чая абсолютную и непосредственную. Можно также использовать  адреса-
 цию с длинным смещением. Могут быть заданы пересылки из памяти в ре-
 гистр или из регистра в память.

 Если  в операции АЛУ указана в качестве приемника часть регистра Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции пересылки по шине данных. Т.е. в одной команде не  разреша-
 ется  двойное обращение к приемнику. Например, операция АЛУ и опера-
 ция пересылки данных не могут записывать в один и тот же  регистр  в
 одной команде.

 Если  в операции АЛУ указана в качестве источника часть регистра Dn,
 то эта часть того же регистра может быть указана как  источник  S  в
 операции  пересылки по шине данных. Т.е. в одной команде допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно прочитать регистр, который используется как источник или  при-
 емник в операции АЛУ в той же самой инструкции.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Формат команды - КОП-Операнды:  S,X:ea
                                 X:ea,D
                                 #данные,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0011   W0DD    DDDD    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды - КОП-Операнды:  S,X:(Rn+смещение)
                                 X:(Rn+смещение),D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   11DD    DDDD    0W1R    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:  <ea> Rn - R0-R7 (Только режимы адресации к памяти)

 Поле            W
 Чтение (S)      0
 Запись (D)      1

 S1 или       DDDDDD
 D1           dddddd
 D0.S - D7.S  000nnn   где nnn=0-7
 D0.L - D7.L  001nnn
 D0.M - D7.M  010nnn
 D0.H - D7.H  011nnn

 D8.S         100000
 D9.S         100001
 D8.L         100010
 D9.L         100011
 D8.M         100100
 D9.M         100101
 D8.H         100110
 D9.H         100111

 R0 - R7      101nnn
 N0 - N7      110nnn
 M0 - M7      111nnn

 Время исполнения: ea + ax   тактов
 Расход памяти:    ea        слов
:Move X/R
^Move                                                            Move
^X:R         ПЕРЕСЫЛКА СЛОВА X-ПАМЯТИ И РЕГИСТР-РЕГИСТР           X:R
 --------------------------------------------------------------------
 Операция:   X:<ea> --> D1       S2 --> D2
             S1     --> X:<ea>   S2 --> D2
             #xxxx  --> D1       S2 --> D2

 Синтаксис:  КОП-Операнды  X:ea,D1     S2,D2
             КОП-Операнды  S1,X:ea     S2,D2
             КОП-Операнды  #данные,D1  S2,D2

 Описание:

 Пересылается однословный операнд в/из X-памяти и однословный операнд
 из  регистра в регистр. Указывается один исполнительный адрес. Могут
 быть заданы пересылки из памяти в регистр или из регистра в память.

 Когда в одной инструкции указаны две операции параллельной пересылки
 данных, налагаются определенные ограничения. Если операция АЛУ цело-
 численная, то обе пересылки данных должны быть целочисленными и  за-
 давать  целочисленные операнды. Если операция АЛУ имеет код операции
 с плавающей запятой, то обе пересылки данных должны быть пересылками
 с плавающей запятой и задавать операнды с плавающей запятой.

 Если в операции АЛУ указана в качестве приемника часть регистра  Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции  пересылки по шине данных. Т.е. в одной команде не разреша-
 ется двойное обращение к приемнику. Например, операция АЛУ и  опера-
 ция  пересылки  данных не могут записывать в один и тот же регистр в
 одной инструкции.

 Если в операции АЛУ указана в качестве источника часть регистра  Dn,
 то  эта  часть  того же регистра может быть указана как источник S в
 операции пересылки по шине данных. Т.е. в одной команде  допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно  прочитать регистр, который используется как источник или при-
 емник в операции АЛУ в той же самой инструкции.

 Формат команды - КОП-Операнды:  X:ea,D1    S2,D2
                                 S1,X:ea    S2,d2
                                 #данные,D1 S2,D2

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    010d   WdYY    YXXX    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды: <ea> Rn - R0-R7 (только режимы адресации к памяти)

 Поле            W
 Чтение (S)      0
 Запись (D)      1

 Целочисленные КОП               КОП плавающей арифметики
 --------------------------------------------------------
 S1,D1        XXX                S1,D1        XXX
 D0.L - D7.L  nnn                D0.S - D7.S  nnn    где nnn=0-7

 S2    dd   D2     YYY           S2    dd   D2     YYY
 D4.L  00   D0.L   000           D4.S  00   D0.S   000
 D5.L  01   D1.L   001           D5.S  01   D1.S   001
 D6.L  10   D2.L   010           D6.S  10   D2.S   010
 D7.L  11   D3.L   011           D7.S  11   D3.S   011

 D0.L  00   D4.L   100           D0.S  00   D4.S   100
 D1.L  01   D5.L   101           D1.S  01   D5.S   101
 D2.L  10   D6.L   110           D2.S  10   D6.S   110
 D3.L  11   D7.L   111           D3.S  11   D7.S   111

 Время исполнения: ea + ax   тактов
 Расход памяти:    ea        слов
:Move Y:
^Move                                                            Move
^Y:                  ПЕРЕСЫЛКА СЛОВА Y-ПАМЯТИ                      Y:
 --------------------------------------------------------------------
 Операция:   Y:<ea>      --> D
             Y:<Rn+xxxx> --> D
             S           --> Y:<ea>
             S           --> Y:<Rn+xxxx>
             #xxxx       --> D

 Синтаксис:  КОП-Операнды  Y:ea,D
             КОП-Операнды  Y:(Rn+смещение),D
             КОП-Операнды  S,Y:ea
             КОП-Операнды  S,Y:(Rn+смещение)
             КОП-Операнды  #данные,D

 Описание:

 Пересылка одного слова в/из Y-память. Указывается один  исполнитель-
 ный адрес. Могут использоваться все режимы адресации к памяти, вклю-
 чая  абсолютную и непосредственную. Можно также использовать адреса-
 цию с длинным смещением. Могут быть заданы пересылки из памяти в ре-
 гистр или из регистра в память.

 Если в операции АЛУ указана в качестве приемника часть регистра  Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции  пересылки по шине данных. Т.е. в одной команде не разреша-
 ется двойное обращение к приемнику. Например, операция АЛУ и  опера-
 ция  пересылки  данных не могут записывать в один и тот же регистр в
 одной команде.

 Если в операции АЛУ указана в качестве источника часть регистра  Dn,
 то  эта  часть  того же регистра может быть указана как источник S в
 операции пересылки по шине данных. Т.е. в одной команде  допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно  прочитать регистр, который используется как источник или при-
 емник в операции АЛУ в той же самой инструкции.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Формат команды - КОП-Операнды:  S,Y:ea
                                 Y:ea,D
                                 #данные,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0011   W1DD    DDDD    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды - КОП-Операнды:  S,Y:(Rn+смещение)
                                 Y:(Rn+смещение),D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   11DD    DDDD    1W1R    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 Поле            W
 Чтение (S)      0
 Запись (D)      1

 S1 или       DDDDDD
 D1           dddddd
 D0.S - D7.S  000nnn где nnn=0-7
 D0.L - D7.L  001nnn
 D0.M - D7.M  010nnn
 D0.H - D7.H  011nnn

 D8.S         100000
 D9.S         100001
 D8.L         100010
 D9.L         100011
 D8.M         100100
 D9.M         100101
 D8.H         100110
 D9.H         100111

 R0 - R7      101nnn
 N0 - N7      110nnn
 M0 - M7      111nnn

 Время исполнения: ea + ay   тактов
 Расход памяти:    ea        слов
:Move Y/R
^Move                                                            Move
^Y:R         ПЕРЕСЫЛКА СЛОВА Y-ПАМЯТИ И РЕГИСТР-РЕГИСТР           Y:R
 --------------------------------------------------------------------
 Операция:   S1 --> D1   Y:<ea> --> D2
             S1 --> D1   S2     --> Y:<ea>
             S1 --> D1   #xxxx  -->  D2

 Синтаксис:  КОП-Операнды  S1,D1   Y:ea,D2
             КОП-Операнды  S1,D1   S2,Y:ea
             КОП-Операнды  S1,D1   #данные,D2

 Описание:

 Пересылается однословный операнд в/из Y-памяти и однословный операнд
 из регистра в регистр. Указывается один исполнительный адрес.  Могут
 быть заданы пересылки из памяти в регистр или из регистра в память.

 Когда в одной инструкции указаны две операции параллельной пересылки
 данных, налагаются определенные ограничения. Если операция АЛУ цело-
 численная,  то обе пересылки данных должны быть целочисленными и за-
 давать целочисленные операнды. Если операция АЛУ имеет код  операции
 с плавающей запятой, то обе пересылки данных должны быть пересылками
 с плавающей запятой и задавать операнды с плавающей запятой.

 Если  в операции АЛУ указана в качестве приемника часть регистра Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции пересылки по шине данных. Т.е. в одной команде не  разреша-
 ется  двойное обращение к приемнику. Например, операция АЛУ и опера-
 ция пересылки данных не могут записывать в один и тот же  регистр  в
 одной инструкции.

 Если  в операции АЛУ указана в качестве источника часть регистра Dn,
 то эта часть того же регистра может быть указана как  источник  S  в
 операции  пересылки по шине данных. Т.е. в одной команде допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно прочитать регистр, который используется как источник или  при-
 емник в операции АЛУ в той же самой инструкции.

 Формат команды - КОП-Операнды:  S1,D1  Y:ea,D2
                                 S1,d1  S2,Y:ea
                                 S1,D1  #данные,D2

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    011d   WdYY    YXXX    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды: <ea> Rn - R0-R7 (только режимы адресации к памяти)

 Поле            W
 Чтение (S)      0
 Запись (D)      1

 Целочисленные КОП               КОП плавающей арифметики
 --------------------------------------------------------
 S2,D2        XXX                S2,D2        XXX
 D0.L - D7.L  nnn                D0.S - D7.S  nnn    где nnn=0-7

 S1    dd   D1     YYY           S1    dd   D1     YYY
 D4.L  00   D0.L   000           D4.S  00   D0.S   000
 D5.L  01   D1.L   001           D5.S  01   D1.S   001
 D6.L  10   D2.L   010           D6.S  10   D2.S   010
 D7.L  11   D3.L   011           D7.S  11   D3.S   011

 D0.L  00   D4.L   100           D0.S  00   D4.S   100
 D1.L  01   D5.L   101           D1.S  01   D5.S   101
 D2.L  10   D6.L   110           D2.S  10   D6.S   110
 D3.L  11   D7.L   111           D3.S  11   D7.S   111

 Время исполнения: ea + ay   тактов
 Расход памяти:    ea        слов
:Move L
^Move                                                            Move
^L:                  ПЕРЕСЫЛКА СЛОВА L-ПАМЯТИ                      L:
 --------------------------------------------------------------------
 Операция:   X:<ea>      --> D(MS)        Y:<ea>      --> D(LS)
             X:<Rn+xxxx> --> D(MS)        Y:<Rn+xxxx> --> D(LS)
             S(MS)       --> X:<ea>       S(LS)       --> Y:<ea>
             S(MS)       --> X:<Rn+xxxx>  S(LS)       --> Y:<Rn+xxxx>

 Синтаксис:  КОП-Операнды  L:ea,D
             КОП-Операнды  L:(Rn+смещение),D
             КОП-Операнды  S,L:ea
             КОП-Операнды  S,L:(Rn+смещение)

 Описание:

 Эта команда позволяет переслать длинное слово, заданное исполнитель-
 ным адресом L-памяти (X:Y). Операнд представляет собой целое двойной
 длины  для целочисленных пересылок и двойной точности IEEE для пере-
 сылок чисел с плавающей запятой. Указывается один исполнительный ад-
 рес. Могут использоваться все режимы адресации с  модификацией  опе-
 ранда  в памяти. Можно также использовать адресацию с длинным смеще-
 нием. Могут быть указаны направления  пересылки  память-регистр  или
 регистр-память.

 Если  в операции АЛУ указана в качестве приемника часть регистра Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции пересылки по шине данных. Т.е. в одной команде не  разреша-
 ется  двойное обращение к приемнику. Например, операция АЛУ и опера-
 ция пересылки данных не могут записывать в один и тот же  регистр  в
 одной инструкции.

 Если  в операции АЛУ указана в качестве источника часть регистра Dn,
 то эта часть того же регистра может быть указана как  источник  S  в
 операции  пересылки по шине данных. Т.е. в одной команде допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно прочитать регистр, который используется как источник или  при-
 емник в операции АЛУ в той же самой инструкции.

 Формат команды - КОП-Операнды:  S,L:ea
                                 L:ea,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0010   01WD    DDDD    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │       необязательное слово исполнительного адреса                │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды - КОП-Операнды:  S,L:(Rn+смещение)
                                 L:(Rn+смещение),D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   111D    DDDD    0W0R    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 <ea> Rn - R0-R7 (только режимы адресации с модификацией операнда  в
                  памяти)

 Поле            W
 Чтение (S)      0
 Запись (D)      1

 S2 или         DDDDD
 D2             ddddd
 D0.ML - D7.ML  11nnn где nnn=0-7
 D0.D - D7.D    10nnn

 D9.ML          00111
 D8.ML          00110
 D9.D           00101
 D8.D           00100

 Время исполнения: ea + axy  тактов
 Расход памяти:    ea        слов

:Move X/Y
^Move                                                            Move
^X:Y:                ПЕРЕСЫЛКА СЛОВ XY-ПАМЯТИ                    X:Y:
 --------------------------------------------------------------------
 Операция:   X:<ea> --> D1         Y:<ea> --> D2
             X:<ea> --> D1         S2 --> Y:<ea>
             S1 --> X:<ea>         Y:<ea> --> D2
             S1 --> X:<ea>         S2 --> Y:<ea>
             X:<ea> --> D1         Y:<> --> D2
             S1 --> X:<ea>         S2 --> Y:<>
             X:<Rn+xxxx> --> D1    Y:<> --> D2
             S1 --> X:<Rn+xxxx>    S2 --> Y:<>

 Синтаксис:  КОП-Операнды  X:ea,D1  Y:ea,D2
             КОП-Операнды  X:ea,D1  S2,Y:ea
             КОП-Операнды  S1,X:ea  Y:ea,D2
             КОП-Операнды  S1,X:ea  S2,Y:ea
             КОП-Операнды  X:ea,D1  Y:,D2
             КОП-Операнды  S1,X:ea  S2,Y:
             КОП-Операнды  X:(Rn+смещение),D1  Y:,D2
             КОП-Операнды  S1,X:(Rn+смещение)  S2,Y

 Описание:

 Пересылается два однословных операнда в/из X- и Y-памяти. Все однос-
 ловные  операнды  являются целыми для целочисленных пересылок и оди-
 нарной точности IEEE для пересылок чисел с  плавающей  запятой.  Они
 могут  представлять  собой  комплексное число (вещественная и мнимая
 части), пару данные/коэффицент или два независимых числа. Могут ука-
 зываться один или два независимых исполнительных адреса. Если указан
 один исполнительный адрес, то могут использоваться все режимы  адре-
 сации  с  модификацией операнда в памяти и режим адресации с длинным
 смещением; обе пересылки имеют одно и то же  направление  память-ре-
 гистр или регистр-память. Если указано два исполнительных адреса, то
 могут  использоваться все режимы параллельной адресации, и направле-
 ние пересылок (память-регистр или регистр-память) может быть разным.

 Когда в одной команде указаны две  операции  параллельной  пересылки
 данных, налагаются определенные ограничения. Если операция АЛУ цело-
 численная,  то обе пересылки данных должны быть целочисленными и за-
 давать целочисленные операнды. Если операция АЛУ - с плавающей запя-
 той, то обе пересылки должны быть пересылками с плавающей запятой  и
 задавать операнды с плавающей запятой.

 Если  в операции АЛУ указана в качестве приемника часть регистра Dn,
 то эта часть того же регистра не может быть указана как приемник D в
 операции пересылки по шине данных. Т.е. в одной команде не  разреша-
 ется  двойное обращение к приемнику. Например, операция АЛУ и опера-
 ция пересылки данных не могут записывать в один и тот же  регистр  в
 одной инструкции.

 Если  в операции АЛУ указана в качестве источника часть регистра Dn,
 то эта часть того же регистра может быть указана как  источник  S  в
 операции  пересылки по шине данных. Т.е. в одной команде допускается
 двойное обращение к источнику. Например, в операции пересылки данных
 можно прочитать регистр, который используется как источник или  при-
 емник в операции АЛУ в той же самой инструкции.

 Формат команды - КОП-Операнды:  X:ea,D1  Y:ea,D2
                                 X:ea,D1  S2,Y:ea
                                 S1,X:ea  Y:ea,D2
                                 S1,X:ea  S2,Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    1mmw   WrYY    YXXX    rMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды - КОП-Операнды:  X:ea,D1  Y:,2
                                 S1,X:ea  S2,Y:

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0010   1WYY    YXXX    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды - КОП-Операнды:  X:ea,D1(8,9)  Y:,D2(8,9)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0001   010W    Y11X    MMMR    RR  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды - КОП-Операнды:  X:(Rn+смещение),D1   Y:,D2

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   11YY    YXXX    1W0R    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды - КОП-Операнды:  S1,X:(Rn+смещение)   S2(8,9),Y:
                                 X:(Rn+смещение),D1   Y:,D2(8,9)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   1101    Y11X    0W0R    RR  │  uu  uuuu  uuuu   uuuu   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

 Для двух независимых исполнительных адресов:
 X:ea Rn - R0,R1,R2,R3 (только режимы параллельной адресации)
 Y:ea Rn - R4,R5,R6,R7
 или
 X:ea Rn - R4,R5,R6,R7 (только режимы параллельной адресации)
 Y:ea Rn - R0,R1,R2,R3

 Поле        W           Поле        W       Исполнительный  адрес
 Чтение (S1) 0           Чтение (S2) 0       X:ea    MM      RRR
 Запись (D1) 1           Запись (D2) 1       Y:ea    mm      rr

 Целочисленные КОП       КОП плавающей арифметики
 --------------------------------------------------------
 S1,D1         XXX       S1,D1         XXX
 D0.L - D7.L   nnn       D0.S - D7.S   nnn     где nnn=0-7

 S2,D2         YYY       S2,D2         YYY
 D0.L - D7.L   nnn       D0.S - D7.S   nnn     где nnn=0-7

 Для одиночного исполнительного адреса:

 Поле            W
 Чтение (S1,S2)  0
 Запись (D1,D2)  1

 Исполнительный  адрес
 X:ea = Y:ea  MMM  RRR     (только  режимы  адресации с модификацией
                            операнда в памяти)
 X:ea = Y:ea       RRR     (режим адресации с длинным смещением)

 Целочисленные КОП       КОП плавающей арифметики
 --------------------------------------------------------
 S1,D1         XXX       S1,D1           XXX
 D0.L - D7.L   nnn       D0.S - D7.S     nnn     где nnn=0-7

 S2,D2         YYY       S2,D2           YYY
 D0.L - D7.L   nnn       D0.S - D7.S     nnn     где nnn=0-7

 S1,D1         X         S1,D1           X
 D8.L          0         D8.S            0
 D9.L          1         D9.S            0

 S2,D2         YYY       S2,D2           YYY
 D8.L          0         D8.S            0
 D9.L          1         D9.S            0

 Время исполнения: axy  тактов
 Расход памяти:         слов
:Move FFcc
^Move                                                            Move
^FFcc        УСЛОВНАЯ ПЕРЕСЫЛКА БЕЗ ИЗМЕНЕНИЯ CCR, ER, IER       FFcc
 --------------------------------------------------------------------

 Операция:   Если cc, то операция
             S --> D

 Синтаксис:  КОП-Операнды   S,D  FFcc
             КОП-Операнды   FFcc

 Описание:

 Если указанное условие истинно, данные из источника S пересылаются в
 приемник D. Кроме этого, запоминается результат(ы) операции АЛУ. Если
 указанное условие ложно, то результаты никуда не  записываются  и не
 пересылаются. Регистры CCR и ER в результате операции АЛУ не изменяются.
 Бит UNCC регистра ER и флаг SIOP регистра IER устанавливаются
 командой FFcc, если был установлен бит NAN регистра ER и  условие
 отмечено признаком "Да" в последней колонке. Если регистр в операции
 пересылки не указан, то эта команда ассемблируется в пересылку R0-R0.

 "cc" может задавать следующие условия:

      Дополнительное условие

   Мнемоника                     Условие           установки UNCC *
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочено          NAN = 0                Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочено        N = 1                  Нет

 ПРИМЕЧАНИЕ: Операнды для условия ERR берутся из регистра ER.
           * См. описание UNCC в Разделе A.4.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
  ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - 1, если NAN установлен и выполнено дополнительное условие
           (условие "cc" отмечено как "Да"). Иначе не меняется.

 Флаги регистра IER:
   SINX  - не меняются
   SDZ   - не меняются
   SUNF  - не меняются
   SOVF  - не меняются
   SIOP  - 1, если NAN установлен и выполнено дополнительное условие
           (условие "cc" отмечено как "Да"). Иначе не меняется.

 Формат команды - КОП-Операнды:  S,D  FFcc
                                 FFcc

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   011c    cccc    tttT    TT  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
         S       ttt
         Rn      nnn     где nnn=0-7

         D       TTT
         Rn      nnn     где nnn=0-7

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 2 + da  тактов
 Расход памяти:    1 слово
:Move FFcc.U
^Move                                                            Move
^FFcc.U      УСЛОВНАЯ ПЕРЕСЫЛКА С ИЗМЕНЕНИЕМ CCR, ER, IE       FFcc.U
 --------------------------------------------------------------------

 Операция:   Если cc, то операция
             S --> D

 Синтаксис:  КОП-Операнды  S,D  FFcc.U
             КОП-Операнды  FFcc.U

 Описание:

 Если указанное условие истинно, данные из источника S пересылаются в
 приемник D. Кроме этого, запоминается результат(ы) операции АЛУ и по
 результату  этой операции устанавливаются биты кодов условий регистров
 CCR, ER и IER. Если указанное условие ложно, то результаты никуда не
 записываются и не пересылаются и регистр состояния не  изменяется.  Бит
 UNCC регистра ER и флаг SIOP регистра IER устанавливаются командой
 FFcc, если был установлен бит NAN регистра ER и условие отмечено признаком
 "Да" в последней колонке. Если регистр  в  операции пересылки не  указан,
 то эта команда ассемблируется в пересылку R0-R0.

 "cc" может задавать следующие условия:

                                      Дополнительное условие

   Мнемоника                     Условие           установки UNCC *
 --------------------------------------------------------------------
   EQ     - равно                Z = 1                  Нет
   ERR    - ошибка               UNCC v SNAN v          Нет
                                 v OPERR v OVF v
                                 v UNF v DZ = 1
   GE     - больше или равно     NAN v (N & ~~Z) = 0     Да
   GL     - больше или меньше    NAN v Z = 0            Да
   GLE    - больше, меньше или   NAN = 0                Да
            равно
   GT     - больше               NAN v Z v N = 0        Да
   INF    - бесконечность        I = 1                  Да
   LE     - меньше или равно     NAN v ~~(N v Z) = 0     Да
   LT     - меньше               NAN v Z v ~~N = 0       Да
   MI     - минус                N = 1                  Нет
   NE(Q)  - не равно             Z = 0                  Нет
   NGE    - не больше или равно  NAN v (N & ~~Z) = 1     Нет
   NGL    - не больше или меньше NAN v Z = 1            Да
   NGLE   - не больше, меньше    NAN = 1                Да
            или равно
   NGT    - не больше            NAN v Z v N = 1        Да
   NINF   - не бесконечность     I = 0                  Да
   NLE    - не меньше или равно  NAN v ~~(N v Z) = 1     Да
   NLT    - не меньше            NAN v Z v ~~N = 1       Да
   OR     - упорядочено          N = 0                  Нет
   PL     - плюс                 N = 0                  Нет
   UN     - неупорядочено        N = 1                  Нет

 ПРИМЕЧАНИЕ: Операнды для условия ERR берутся из регистра ER.
           * См. описание UNCC в Разделе A.4.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:
   C  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   V  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   Z  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   N  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   I  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   LR - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   ^R - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   A  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.

 Биты состояния регистра ER:
   INX   - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   DZ    - Меняется операцией АЛУ, если указанное условие  истинно.
           Иначе не меняется.
   UNF   - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   OVF   - Меняется операцией АЛУ, если указанное условие  истинно.
           Иначе не меняется.
   OPERR - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   SNAN  - Меняется операцией АЛУ, если указанное условие истинно.
           Иначе не меняется.
   NAN   - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   UNCC  - 1, если NAN установлен и выполнено дополнительное условие
           (условие отмечено как "Да"). Иначе не меняется.

 Флаги регистра IER: Изменяются согласно стандартным правилам.

 Формат команды - КОП-операнды:  S,D  FFcc.U
                                 FFcc.U

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   011c    cccc    tttT    TT  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         S       ttt
         Rn      nnn     где nnn=0-7

         D       TTT
         Rn      nnn     где nnn=0-7

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         GT         00000        NGT        10000
         LT         00001        NLT        10001
         GE         00010        NGE        10010
         LE         00011        NLE        10011
         GL         00100        NGL        10100
         INF        00101        NINF       10101
         GLE        00110        NGLE       10110
         OR         00111        UN         10111
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         ERR        01111

 Время исполнения: 2 + da   тактов
 Расход памяти:    1 слово
:Move IFcc
^Move                                                            Move
^IFcc            УСЛОВНАЯ ПЕРЕСЫЛКА БЕЗ ИЗМЕНЕНИЯ CCR            IFcc
 --------------------------------------------------------------------

 Операция:   Если cc, то операция
             S --> D

 Синтаксис:  КОП-Операнды  S,D IFcc
             КОП-Операнды  IFcc

 Описание:

 Если указанное условие истинно, данные из источника S пересылаются в
 приемник D. Кроме этого, запоминается результат(ы) операции АЛУ. Если
 указанное условие ложно, то результаты никуда не  записываются  и не
 пересылаются. Регистры CCR, ER и IER в результате операции АЛУ не
 изменяются.  Если регистр в операции пересылки не указан, то эта команда
 ассемблируется в пересылку R0-R0.

 "cc" может задавать следующие условия:

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - не меняется

 Флаги регистра IER:
   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются
   SIOP   - не меняется

 Формат команды - КОП-Операнды:  S,D  IFcc
                                 IFcc

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   011c    cccc    tttT    TT  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         S       ttt
         Rn      nnn     где nnn=0-7

         D       TTT
         Rn      nnn     где nnn=0-7

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110
         AL         11111

 Время исполнения: 2 + da   тактов
 Расход памяти:    1 слово
:Move IFcc.U
^Move                                                            Move
^IFcc.U      УСЛОВНАЯ ПЕРЕСЫЛКА С ИЗМЕНЕНИЕМ CCR, ER, IER      IFcc.U
 --------------------------------------------------------------------

 Операция:   Если cc, то  операция
             S --> D

 Синтаксис:  КОП-Операнды   S,D  IFcc.U
             КОП-Операнды   IFcc.U

 Описание:

 Если указанное условие истинно, данные из источника S пересылаются в
 приемник D. Кроме этого, запоминается результат(ы) операции АЛУ и  в
 зависимости  от  него  устанавливаются  биты кодов условий регистров
 CCR, ER и IER. Если указанное условие ложно, то результаты никуда не
 записываются и не пересылаются и регистр  состояния  не  изменяется.
 Бит UNCC  регистра ER в результате операции АЛУ не изменяется. Если
 регистр в операции пересылки не указан, то эта команда ассемблируется в
 пересылку R0-R0.

 "cc" может задавать следующие условия:

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:
   C  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   V  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   Z  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   N  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   I  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   LR - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   ^R - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.
   A  - Меняется операцией АЛУ, если указанное условие истинно.
        Иначе не меняется.

 Биты состояния регистра ER:
   INX   - Меняется операцией АЛУ, если указанное условие  истинно.
           Иначе не меняется.
   DZ    - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   UNF   - Меняется операцией АЛУ, если указанное условие  истинно.
           Иначе не меняется.
   OVF   - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   OPERR - Меняется операцией АЛУ, если указанное условие  истинно.
           Иначе не меняется.
   SNAN  - Меняется  операцией  АЛУ, если указанное условие истинно.
           Иначе не меняется.
   NAN   - Меняется операцией АЛУ, если указанное условие  истинно.
           Иначе не меняется.
   UNCC  - Не меняется.

 Флаги регистра IER: Изменяются согласно стандартным правилам.

 Формат команды - КОП-Операнды:  S,D  IFcc.U
                                 IFcc.U

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   010c    cccc    tttT    TT  │  uu  uuuu  uuuu   uuuu   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         S       ttt
         Rn      nnn     где nnn=0-7

         D       TTT
         Rn      nnn     где nnn=0-7

         Мнемоника  ccccc        Мнемоника  ccccc
 --------------------------------------------------------------------
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110
         AL         11111

 Время исполнения: 2 + da   тактов
 Расход памяти:    1 слово
:MOVE(C)
^MOVE(C)             ПЕРЕСЫЛКА РЕГИСТРА УПРАВЛЕНИЯ            MOVE(C)
 --------------------------------------------------------------------
 Операция:   S3          --> D2
             S2          --> D1
             #xxxx       --> D1
             X:<ea>      --> D1
             X:<Rn+xxxx> --> D1
             S1          --> X:<ea>
             S1          --> X:<Rn+xxxx>
             Y:<ea>      --> D1
             Y:<Rn+xxxx> --> D1
             S1          --> Y:<ea>
             S1          --> Y:<Rn+xxxx>

 Синтаксис:  MOVE(C)   S3,D2
             MOVE(C)   S2,D1
             MOVE(C)   #данные,D1
             MOVE(C)   X:ea,D1
             MOVE(C)   X:(Rn+смещение),D1
             MOVE(C)   S1,X:ea
             MOVE(C)   S1,X:(Rn+смещение)
             MOVE(C)   Y:ea,D1
             MOVE(C)   Y:(Rn+смещение),D1
             MOVE(C)   S1,Y:ea
             MOVE(C)   S1,Y:(Rn+смещение)

 Описание:

 Пересылается содержимое указанного регистра управления  в  указанный
 операнд-приемник,  или  операнда-источника в регистр управления. Ре-
 гистры S1, S3 и D1 являются регистрами управления программой и могут
 пересылаться в/из любого другого регистра или памяти. Все операнды -
 однословные. Могут использоваться все режимы адресации  к  памяти  и
 адресация с длинным смещением.

 Если  в  качестве операнда-Источника указан регистр системного стека
 SSH, то после чтения из него указатель системного стека SP уменьшит-
 ся на 1. Если же регистр системного стека SSH указан в качестве опе-
 ранда-Приемника, то перед записью в него указатель системного  стека
 SP  увеличится  на  1.  Это позволяет эффективно расширять системный
 стек путем программных манипуляций с указателем стека.

 Ограничения, накладываемые на эту команду, см. в Разделе A.10.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:

 Если операнд-Приемник SR:
   C  - устанавливается согласно биту 0 операнда-Источника
   V  - устанавливается согласно биту 1 операнда-Источника
   Z  - устанавливается согласно биту 2 операнда-Источника
   N  - устанавливается согласно биту 3 операнда-Источника
   I  - устанавливается согласно биту 4 операнда-Источника
   LR - устанавливается согласно биту 5 операнда-Источника
   ^R - устанавливается согласно биту 6 операнда-Источника
   A  - устанавливается согласно биту 7 операнда-Источника

 Для других операндов-Приемников:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если операнд-Приемник SR:
   INX   - устанавливается согласно биту 8 операнда-Источника
   DZ    - устанавливается согласно биту 9 операнда-Источника
   UNF   - устанавливается согласно биту 10 операнда-Источника
   OVF   - устанавливается согласно биту 11 операнда-Источника
   OPERR - устанавливается согласно биту 12 операнда-Источника
   SNAN  - устанавливается согласно биту 13 операнда-Источника
   NAN   - устанавливается согласно биту 14 операнда-Источника
   UNCC  - устанавливается согласно биту 15 операнда-Источника

 Для других операндов-Приемников:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - не меняется

 Флаги регистра регистра IER:

 Если операнд-Приемник SR:
   SINX   - устанавливается согласно биту 16 операнда-Источника
   SDZ    - устанавливается согласно биту 17 операнда-Источника
   SUNF   - устанавливается согласно биту 18 операнда-Источника
   SOVF   - устанавливается согласно биту 19 операнда-Источника
   SIOP   - устанавливается согласно биту 20 операнда-Источника

 Для других операндов-Приемников:
   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются
   SIOP   - не меняется

 Формат команды: MOVE(C) X:ea,D1
                 MOVE(C) Y:ea,D1
                 MOVE(C) S1,X:ea
                 MOVE(C) S1,Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000   0001    0011    MMMR    RR   │   1W  s001  0ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │       необязательное слово исполнительного адреса                │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(C) X:(Rn+смещение),D1
                 MOVE(C) Y:(Rn+смещение),D1
                 MOVE(C) S1,X:(Rn+смещение)
                 MOVE(C) S1,Y:(Rn+смещение)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    0011    xxxR    RR  │  0W  s001  0ddd   dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(C) S1,D2
                 MOVE(C) S2,D1

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0001    0010    DDDD    DD  │  D0  0001  0ddd   dddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (только режимы адресации к памяти)
 Непосредственный операнд - 32 бита
 Абсолютный адрес - 32 бита
 Длинное смещение - 32 бита

 Тип памяти   S          Регистр     W
 X-память     0          Чтение S    0
 Y-память     1          Запись D    1

 S3            DDDDDDD
 S1,D1         ddddddd
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 S2            DDDDDDD
 D2            ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 2 + mvc  тактов
 Расход памяти:    1 + ea   слов
:MOVE(I)
^MOVE(I)     ПЕРЕСЫЛКА НЕПОСРЕДСТВЕННЫХ КОРОТКИХ ДАННЫХ       MOVE(I)
 --------------------------------------------------------------------
 Операция:   #xx --> D

 Синтаксис:  MOVE(I)  #данные,D

 Описание:

 16-битный непосредственный операнд расширяется знаковым разрядом  до
 слова и запоминается в регистре-Приемнике D. Следует соблюдать осто-
 рожность,  если  указанный  регистр  - D0.S-D9.S, т.к. не существует
 особого способа форматирования коротких операндов с плавающей  запя-
 той, и расширение знаковым разрядом непосредственного короткого опе-
 ранда может дать малое положительное денормализованное число или от-
 рицательное не-число. Ограничения, накладываемые на эту команду, см.
 в  Разделе A.10. Отметим, что если D - это SSM, то SP предварительно
 увеличится на 1.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:

 Если операнд-Приемник SR:
   C  - устанавливается согласно биту 0 операнда-Источника
   V  - устанавливается согласно биту 1 операнда-Источника
   Z  - устанавливается согласно биту 2 операнда-Источника
   N  - устанавливается согласно биту 3 операнда-Источника
   I  - устанавливается согласно биту 4 операнда-Источника
   LR - устанавливается согласно биту 5 операнда-Источника
   ^R - устанавливается согласно биту 6 операнда-Источника
   A  - устанавливается согласно биту 7 операнда-Источника

 Для других операндов-Приемников:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если операнд-Приемник SR:
   INX   - устанавливается согласно биту 8 операнда-Источника
   DZ    - устанавливается согласно биту 9 операнда-Источника
   UNF   - устанавливается согласно биту 10 операнда-Источника
   OVF   - устанавливается согласно биту 11 операнда-Источника
   OPERR - устанавливается согласно биту 12 операнда-Источника
   SNAN  - устанавливается согласно биту 13 операнда-Источника
   NAN   - устанавливается согласно биту 14 операнда-Источника
   UNCC  - устанавливается согласно биту 15 операнда-Источника

 Для других операндов-Приемников:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - не меняется

 Флаги регистра IER:

 Если операнд-Приемник SR:
   SINX   - устанавливается согласно биту 16 операнда-Источника
   SDZ    - устанавливается согласно биту 17 операнда-Источника
   SUNF   - устанавливается согласно биту 18 операнда-Источника
   SOVF   - устанавливается согласно биту 19 операнда-Источника
   SIOP   - устанавливается согласно биту 20 операнда-Источника

 Для других операндов-Приемников:
   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются
   SIOP   - не меняется

 Формат команды: MOVE(I) #данные,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    1iii    iiii    ii  │  ii  iiii  iddd   dddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 Непосредственный короткий операнд - iiiiiiiiiiiiiiii (16 бит)

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 2 такта
 Расход памяти:    1 слово
:MOVE(M)
^MOVE(M)         ПЕРЕСЫЛКА СЛОВА ПРОГРАММНОЙ ПАМЯТИ           MOVE(M)
 --------------------------------------------------------------------
 Операция:   P:<ea> --> D
             S --> P:<ea>

 Синтаксис:  MOVE(M)  P:ea,D
             MOVE(M)  S,P:ea

 Описание:

 Слово программной памяти пересылается в указанный регистр DS или со-
 держимое регистра S пересылается по  указанному  адресу  программной
 памяти. В качестве S и D могут быть использованы любые регистры. Мо-
 гут  использоваться  все  режимы адресации с модификацией операнда в
 памяти.

 Если в качестве операнда-Источника указан регистр  системного  стека
 SSH, то после выборки из SSH указатель системного стека SP уменьшит-
 ся на 1. Если же регистр системного стека SSH указан в качестве опе-
 ранда-Приемника,  то  перед записью в SSH указатель системного стека
 SP увеличится на 1. Это  позволяет  эффективно  расширять  системный
 стек путем программных манипуляций с указателем стека.

 Ограничения, накладываемые на эту команду, см. в разделе A.10.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:

 Если операнд-Приемник SR:
   C  - устанавливается согласно биту 0 операнда-Источника
   V  - устанавливается согласно биту 1 операнда-Источника
   Z  - устанавливается согласно биту 2 операнда-Источника
   N  - устанавливается согласно биту 3 операнда-Источника
   I  - устанавливается согласно биту 4 операнда-Источника
   LR - устанавливается согласно биту 5 операнда-Источника
   ^R - устанавливается согласно биту 6 операнда-Источника
   A  - устанавливается согласно биту 7 операнда-Источника

 Для других операндов-Приемников:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если операнд-Приемник SR:
   INX   - устанавливается согласно биту 8 операнда-Источника
   DZ    - устанавливается согласно биту 9 операнда-Источника
   UNF   - устанавливается согласно биту 10 операнда-Источника
   OVF   - устанавливается согласно биту 11 операнда-Источника
   OPERR - устанавливается согласно биту 12 операнда-Источника
   SNAN  - устанавливается согласно биту 13 операнда-Источника
   NAN   - устанавливается согласно биту 14 операнда-Источника
   UNCC  - устанавливается согласно биту 15 операнда-Источника

 Для других операндов-Приемников:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - не меняется

 Флаги регистра IER:

 Если операнд-Приемник SR:
   SINX   - устанавливается согласно биту 16 операнда-Источника
   SDZ    - устанавливается согласно биту 17 операнда-Источника
   SUNF   - устанавливается согласно биту 18 операнда-Источника
   SOVF   - устанавливается согласно биту 19 операнда-Источника
   SIOP   - устанавливается согласно биту 20 операнда-Источника

 Для других операндов-Приемников:
   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются
   SIOP   - не меняется

 Формат команды: MOVE(M) P:ea,D
                 MOVE(M) S,P:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000   0001    0110    MMMR    RR   │   1W  0001  0ddd  dddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │           необязательное слово исполнительного адреса            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (только режимы адресации с модификацией операнда в
                   памяти)

 Абсолютный адрес - 32 бита

 Поле            W
 Чтение (S)      0
 Запись (D)      1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 6 + mvm   тактов
 Расход памяти:    1 + ea    слов
:MOVE(P)
^MOVE(P)       ПЕРЕСЫЛКА ДАННЫХ ПЕРИФЕРИЙНЫХ УСТРОЙСТВ        MOVE(P)
 --------------------------------------------------------------------
 Операция:   X:<pp>      --> D
             S           --> X:<pp>
             #xxxx       --> X:<pp>
             Y:<pp>      --> D
             S           --> Y:<pp>
             #xxxx       --> Y:<pp>
             X:<pp>      --> X:<ea>
             X:<ea>      --> X:<pp>
             X:<pp>      --> Y:<ea>
             Y:<ea>      --> X:<pp>
             Y:<pp>      --> X:<ea>
             X:<ea>      --> Y:<pp>
             Y:<pp>      --> Y:<ea>
             Y:<ea>      --> Y:<pp>
             X:<pp>      --> X:<Rn+xxxx>
             X:<Rn+xxxx> --> X:pp
             X:<pp>      --> Y:<Rn+xxxx>
             Y:<Rn+xxxx> --> X:pp
             Y:<pp>      --> X:<Rn+xxxx>
             X:<Rn+xxxx> --> Y:pp
             Y:<pp>      --> Y:<Rn+xxxx>
             Y:<Rn+xxxx> --> Y:pp
             X:<pp>      --> P:<ea>
             P:<ea>      --> X:<pp>
             Y:<pp>      --> P:<ea>
             P:<ea>      --> Y:<pp>

 Синтаксис:  MOVE(P)  X:pp,D
             MOVE(P)  S,X:pp
             MOVE(P)  #данные,X:pp
             MOVE(P)  Y:pp,D
             MOVE(P)  S,Y:pp
             MOVE(P)  #данные,Y:pp
             MOVE(P)  X:pp,X:ea
             MOVE(P)  X:ea,X:pp
             MOVE(P)  X:pp,Y:ea
             MOVE(P)  Y:ea,X:pp
             MOVE(P)  Y:pp,X:ea
             MOVE(P)  X:ea,Y:pp
             MOVE(P)  Y:pp,Y:ea
             MOVE(P)  Y:ea,Y:pp
             MOVE(P)  X:pp,X:(Rn+смещение)
             MOVE(P)  X:(Rn+смещение),X:pp
             MOVE(P)  X:pp,Y:(Rn+смещение)
             MOVE(P)  Y:(Rn+смещение),X:pp
             MOVE(P)  Y:pp,X:(Rn+смещение)
             MOVE(P)  X:(Rn+смещение),Y:pp
             MOVE(P)  Y:pp,Y:(Rn+смещение)
             MOVE(P)  Y:(Rn+смещение),Y:pp
             MOVE(P)  X:pp,P:ea
             MOVE(P)  P:ea,X:pp
             MOVE(P)  Y:pp,P:ea
             MOVE(P)  P:ea,Y:pp


 Описание:

 Однословный операнд пересылается в(из) регистр(а) периферийного уст-
 ройства,  отображенного  на X- или Y-память. 7-битный короткий адрес
 ввода-вывода расширяется единицами, обеспечивая доступ к адресам пе-
 риферийных устройств, соответствующим  старшим  128  ячейкам  памяти
 данных X и Y. Для задания исполнительного адреса могут использовать-
 ся  все  режимы адресации к памяти. Может также использоваться режим
 адресации с длинным смещением.

 Если  в  качестве операнда-Источника указан регистр системного стека
 SSH, то после выборки из SSH указатель системного стека SP уменьшит-
 ся на 1. Если же регистр системного стека SSH указан в качестве опе-
 ранда-Приемника, то перед записью в SSH указатель  системного  стека
 SP  увеличится  на  1.  Это позволяет расширять системный стек путем
 программных манипуляций с указателем стека.

 Ограничения, накладываемые на эту команду, см. в Разделе A.10.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:

 Если операнд-Приемник SR:
   C  - устанавливается согласно биту 0 операнда-Источника
   V  - устанавливается согласно биту 1 операнда-Источника
   Z  - устанавливается согласно биту 2 операнда-Источника
   N  - устанавливается согласно биту 3 операнда-Источника
   I  - устанавливается согласно биту 4 операнда-Источника
   LR - устанавливается согласно биту 5 операнда-Источника
   ^R - устанавливается согласно биту 6 операнда-Источника
   A  - устанавливается согласно биту 7 операнда-Источника

 Для других операндов-Приемников:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если операнд-Приемник SR:
   INX   - устанавливается согласно биту 8 операнда-Источника
   DZ    - устанавливается согласно биту 9 операнда-Источника
   UNF   - устанавливается согласно биту 10 операнда-Источника
   OVF   - устанавливается согласно биту 11 операнда-Источника
   OPERR - устанавливается согласно биту 12 операнда-Источника
   SNAN  - устанавливается согласно биту 13 операнда-Источника
   NAN   - устанавливается согласно биту 14 операнда-Источника
   UNCC  - устанавливается согласно биту 15 операнда-Источника

 Для других операндов-Приемников:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - не меняется

 Флаги регистра IER:

 Если операнд-Приемник SR:
   SINX   - устанавливается согласно биту 16 операнда-Источника
   SDZ    - устанавливается согласно биту 17 операнда-Источника
   SUNF   - устанавливается согласно биту 18 операнда-Источника
   SOVF   - устанавливается согласно биту 19 операнда-Источника
   SIOP   - устанавливается согласно биту 20 операнда-Источника

 Для других операндов-Приемников:
   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются
   SIOP   - не меняется

 Формат команды: MOVE(P) X:pp,X:ea
                 MOVE(P) X:ea,X:pp
                 MOVE(P) X:pp,Y:ea
                 MOVE(P) Y:ea,X:pp
                 MOVE(P) Y:pp,X:ea
                 MOVE(P) Y:ea,X:pp
                 MOVE(P) Y:pp,Y:ea
                 MOVE(P) Y:ea,Y:pp
                 MOVE(P) #данные,X:pp
                 MOVE(P) #данные,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000   0000    0111    MMMR    RR   │   11  1sSW  1ppp  pppp   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(P) X:pp,X:(Rn+смещение)
                 MOVE(P) X:(Rn+смещение),X:pp
                 MOVE(P) X:pp,Y:(Rn+смещение)
                 MOVE(P) Y:(Rn+смещение),X:pp
                 MOVE(C) Y:pp,X:(Rn+смещение)
                 MOVE(C) X:(Rn+смещение),Y:pp
                 MOVE(C) Y:pp,Y:(Rn+смещение)
                 MOVE(C) Y:(Rn+смещение),Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0111    000R    RR  │  10  1sSW  1ppp   pppp   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                  длинное смещение                                │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(P) X:pp,P:ea
                 MOVE(P) P:ea,X:pp
                 MOVE(P) Y:pp,P:ea
                 MOVE(P) P:ea,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000   0000    0111    MMMR    RR   │   11  01SW  1ppp  pppp   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │                         адрес                                    │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(P) X:pp,D
                 MOVE(P) S,X:pp
                 MOVE(P) Y:pp,D
                 MOVE(P) S,Y:pp

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0111    dddd    dd  │  d0  00SW  1ppp   pppp   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7
 ссылки на X: или Y: (только режимы адресации к памяти)
 ссылки на P:       (только режимы адресации с модификацией операнда
                     в памяти)
 Абсолютный адрес - 32 бита
 Длинное смещение - 32 бита
 Короткий адрес ввода-вывода - ppppppp (7 бит)

 Тип памяти  s   Пространство периф.устр. S      Периф.устр.   W
 X-память    0   X-память                 0      Чтение S      0
 Y-память    1   Y-память                 1      Запись D      1

 S,D           ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 2 + mvp   тактов
 Расход памяти:    1 + mv    слов
:MOVE(S)
^MOVE(S)         ПЕРЕСЫЛКА АБСОЛЮТНАЯ КОРОТКАЯ                MOVE(S)
 --------------------------------------------------------------------
 Операция:   X:<aa>      --> D1
             S1          --> X:<aa>
             #xxxx       --> X:<aa>
             Y:<aa>      --> D1
             S1          --> Y:<aa>
             #xxxx       --> Y:<aa>
             L:<aa>      --> D2
             S2          --> L:<aa>
             X:<aa>      --> X:<ea>
             X:<ea>      --> X:<aa>
             X:<aa>      --> Y:<ea>
             Y:<ea>      --> X:<aa>
             Y:<aa>      --> X:<ea>
             X:<ea>      --> Y:<aa>
             Y:<aa>      --> Y:<ea>
             Y:<ea>      --> Y:<aa>
             X:<aa>      --> X:<Rn+xxxx>
             X:<Rn+xxxx> --> X:aa
             X:<aa>      --> Y:<Rn+xxxx>
             Y:<Rn+xxxx> --> X:aa
             Y:<aa>      --> X:<Rn+xxxx>
             X:<Rn+xxxx> --> Y:aa
             Y:<aa>      --> Y:<Rn+xxxx>
             Y:<Rn+xxxx> --> Y:aa
             X:<aa>      --> P:<ea>
             P:<ea>      --> X:<aa>
             Y:<aa>      --> P:<ea>
             P:<ea>      --> Y:<aa>

 Синтаксис:  MOVE(S)  X:aa,D1
             MOVE(S)  S1,X:aa
             MOVE(S)  #данные,X:aa
             MOVE(S)  Y:aa,D1
             MOVE(S)  S1,Y:aa
             MOVE(S)  #данные,Y:aa
             MOVE(S)  L:aa,D2
             MOVE(S)  S2,L:aa
             MOVE(S)  X:aa,X:ea
             MOVE(S)  X:ea,X:aa
             MOVE(S)  X:aa,Y:ea
             MOVE(S)  Y:ea,X:aa
             MOVE(S)  Y:aa,X:ea
             MOVE(S)  X:ea,Y:aa
             MOVE(S)  Y:aa,Y:ea
             MOVE(S)  Y:ea,Y:aa
             MOVE(S)  X:aa,X:(Rn+смещение)
             MOVE(S)  X:(Rn+смещение),X:aa
             MOVE(S)  X:aa,Y:(Rn+смещение)
             MOVE(S)  Y:(Rn+смещение),X:aa
             MOVE(S)  Y:aa,X:(Rn+смещение)
             MOVE(S)  X:(Rn+смещение),Y:aa
             MOVE(S)  Y:aa,Y:(Rn+смещение)
             MOVE(S)  Y:(Rn+смещение),Y:aa
             MOVE(S)  X:aa,P:ea
             MOVE(S)  P:ea,X:aa
             MOVE(S)  Y:aa,P:ea
             MOVE(S)  P:ea,Y:aa

 Описание:

 Однословный операнд пересылается в одну из (или из одной из) младших
 128 ячеек X- или Y-памяти. 7-битный короткий адрес ввода-вывода рас-
 ширяется нулями. Для задания исполнительного адреса могут  использо-
 ваться все режимы адресации к памяти. Может также использоваться ре-
 жим адресации с длинным смещением.

 Если  в  качестве операнда-Источника указан регистр системного стека
 SSH, то после выборки из SSH указатель системного стека SP уменьшит-
 ся на 1. Если же регистр системного стека SSH указан в качестве опе-
 ранда-Приемника, то перед записью в SSH указатель  системного  стека
 SP увеличится на 1. инкременируется) до того, как будет записан SSH.
 Это  позволяет эффективно расширять системный стек путем программных
 манипуляций с указателем стека.

 Ограничения, накладываемые на эту команду, см. в Разделе A.10.

                 ПРЕДОСТЕРЕЖЕНИЕ
         Ограничения, касающиеся регистров Rn, Mn и Nn как
         приемников, см. в Разделе A.10.6.

 Коды условия:

 Если операнд-Приемник SR:
   C  - устанавливается согласно биту 0 операнда-Источника
   V  - устанавливается согласно биту 1 операнда-Источника
   Z  - устанавливается согласно биту 2 операнда-Источника
   N  - устанавливается согласно биту 3 операнда-Источника
   I  - устанавливается согласно биту 4 операнда-Источника
   LR - устанавливается согласно биту 5 операнда-Источника
   ^R - устанавливается согласно биту 6 операнда-Источника
   A  - устанавливается согласно биту 7 операнда-Источника

 Для других операндов-Приемников:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
   LR - Не меняется.
   ^R - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если операнд-Приемник SR:
   INX   - устанавливается согласно биту 8 операнда-Источника
   DZ    - устанавливается согласно биту 9 операнда-Источника
   UNF   - устанавливается согласно биту 10 операнда-Источника
   OVF   - устанавливается согласно биту 11 операнда-Источника
   OPERR - устанавливается согласно биту 12 операнда-Источника
   SNAN  - устанавливается согласно биту 13 операнда-Источника
   NAN   - устанавливается согласно биту 14 операнда-Источника
   UNCC  - устанавливается согласно биту 15 операнда-Источника

 Для других операндов-Приемников:
   INX   - не меняется
   DZ    - не меняется
   UNF   - не меняется
   OVF   - не меняется
   OPERR - не меняется
   SNAN  - не меняется
   NAN   - не меняется
   UNCC  - не меняется

 Флаги регистра IER:

 Если операнд-Приемник SR:
   SINX   - устанавливается согласно биту 16 операнда-Источника
   SDZ    - устанавливается согласно биту 17 операнда-Источника
   SUNF   - устанавливается согласно биту 18 операнда-Источника
   SOVF   - устанавливается согласно биту 19 операнда-Источника
   SIOP   - устанавливается согласно биту 20 операнда-Источника

 Для других операндов-Приемников:
   SINX   - не меняются
   SDZ    - не меняются
   SUNF   - не меняются
   SOVF   - не меняются
   SIOP   - не меняется

 Формат команды: MOVE(S) X:aa,X:ea
                 MOVE(S) X:ea,X:aa
                 MOVE(S) X:aa,Y:ea
                 MOVE(S) Y:ea,X:aa
                 MOVE(S) Y:aa,X:ea
                 MOVE(S) X:ea,Y:aa
                 MOVE(S) Y:aa,Y:ea
                 MOVE(S) Y:ea,Y:aa
                 MOVE(S) #данные,X:aa
                 MOVE(S) #данные,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000   0000    0111    MMMR    RR   │   11  1sSW  0aaa  aaaa   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(S) X:aa,X:(Rn+смещение)
                 MOVE(S) X:(Rn+смещение),X:aa
                 MOVE(S) X:aa,Y:(Rn+смещение)
                 MOVE(S) Y:(Rn+смещение),X:aa
                 MOVE(S) Y:aa,X:(Rn+смещение)
                 MOVE(S) X:(Rn+смещение),Y:aa
                 MOVE(S) Y:aa,Y:(Rn+смещение)
                 MOVE(S) Y:(Rn+смещение),Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0111    000R    RR  │  10  1sSW  0aaa   aaaa   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │                     длинное смещение                             │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(S) X:aa,P:ea
                 MOVE(S) P:ea,X:aa
                 MOVE(S) Y:aa,P:ea
                 MOVE(S) P:ea,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │   0000   0000    0111    MMMR    RR   │   11  01SW  0aaa  aaaa   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │                         адрес                                    │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVE(S) X:aa,D
                 MOVE(S) S,X:aa
                 MOVE(S) Y:aa,D
                 MOVE(S) S,Y:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0111    dddd    dd  │  d0  00SW  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: MOVE(S) L:aa,D2
                 MOVE(S) S2,L:aa

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0111    DDDD    DD  │  D1  000W  0aaa   aaaa   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7
 ссылки на X: или Y: (только режимы адресации к памяти)
 ссылки на P:        (только режимы адресации с модификацией операнда
                      в памяти)

 Абсолютный адрес - 32 бита
 Длинное смещение - 32 бита
 Абсолютный короткий адрес - aaaaaaa (7 бит)

 Простр-во памяти s    Простр.абс.короткое S    Адрес абс.короткий W
 X-память         0    X-память            0    Чтение S           0
 Y-память         1    Y-память            1    Запись D           1

 S1,D1         ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 S2,D2         ddddddd
 D0.ML - D7.ML 1011nnn  ,  где nnn = 0-7
 D0.D - D7.D   1010nnn
 D9.ML         1000110
 D8.ML         1000111
 D9.D          1000100
 D8.D          1000101

 Время исполнения: 2 + mvs   тактов
 Расход памяти:    1 + mv    слов
:MOVETA
^MOVETA          ПЕРЕСЫЛКА ДАННЫХ С ПРОВЕРКОЙ АДРЕСА           MOVETA
 --------------------------------------------------------------------
 Операция:   Параллельная пересылка данных

 Синтаксис: MOVETA   (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Пересылается содержимое указанного источника в указанный приемник  и
 обновляются флаги C, V, N и Z регистра CCR по результатам вычислений
 адреса. Значения флагов изменятся только при использовании косвенных
 режимов адресации через адресный регистр. В режиме адресации без мо-
 дификации  предполагается,  что  адрес вычисляется по формуле Rn-0 с
 линейной модификацией, причем содержимое регистров Mn и Nn игнориру-
 ется. Для пересылок типа XY регистр CCR изменяется в соответствии  с
 результатом вычисления адреса X-памяти. Эта команда представляет со-
 бой операцию АЛУ NOP с параллельной пересылкой данных, описанной вы-
 ше (операция MOVE).

 Некоторые операции параллельной пересылки данных различаются для це-
 лых  операндов и для операндов с плавающей запятой, согласно указан-
 ному виду операции АЛУ. Для этой цели используются два кода операции
 NOP: "целое NOP" и "плавающее NOP". Например, если параллельная  пе-
 ресылка  типа XY задается для целых операндов, то ассемблер сгенери-
 рует 32-битное слово команды, где в поле  кода  операции  АЛУ  будет
 стоять  "целое  NOP". Если указываются операнды с плавающей запятой,
 то вместо него будет сгенерирован код "плавающее NOP".

 Биты кодов условий регистра CCR:

     C - Для режимов адресации с приращением (инкрементацией):
         1,  если был перенос из самого старшего бита при вычислении
         адреса с линейной модификацией или был перенос  из  самого
         младшего бита при вычислении адреса с реверсивным переносом;
         0 - в противном случае.

         Для режимов адресации с уменьшением (декрементацией):
         1, если был заем из самого старшего бита при вычислении  ад-
         реса с линейной модификацией или был заем из самого младшего
         бита  при  вычислении  адреса с реверсивным переносом;
         0 - в противном случае.

         Для режимов адресации по модулю: всегда 0.

     V - 1, если было переполнение за пределы  самого  старшего  бита
         при  вычислении адреса с линейной модификацией; 1, если было
         переполнение за пределы самого младшего бита при  вычислении
         адреса  с реверсивным переносом; 1, если был циклический пе-
         реход при вычислении адреса с модификацией по модулю; 1, ес-
         ли был хотя бы один циклический переход при вычислении адре-
         са с кратной модификацией по модулю; 0 - в противном случае.

     Z - 1, если результат вычисления адреса - 0;
         0 - в противном случае.

     N - 1, если самый старший бит адреса,  вычисленного  с  линейной
         модификацией  или  модификацией  по модулю, равен 1; 1, если
         самый младший бит адреса, вычисленного с реверсивным перено-
         сом, равен 1; 0 - в противном случае.

     I - Не меняется.
     LR- Не меняется.
     ^R- Не меняется.
     A - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: MOVETA (целое NOP)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0000  1000  0010   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │                           адрес                                  │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MOVETA (плавающее NOP)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0000  1000  0110   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │                            адрес                                 │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
 См.  кодирование поля команды пересылки MOVE в описании команды
 MOVE.

 Время исполнения: 2 + mv   тактов
 Расход памяти:    1 + mv   слов
:MPYS
^MPYS                    УМНОЖЕНИЕ СО ЗНАКОМ                     MPYS
 --------------------------------------------------------------------
 Операция:   S1.L * S2.L --> D.M : D.L  (параллельная пересылка)

 Синтаксис:  MPYS  S1,S2,D (синтаксис операции MOVE см.описание MOVE)
             MPYS  S2,S1,D (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Перемножаются два операнда со знаком и результат запоминается в ука-
 заном регистре-Приемнике. Операнды представляют собой 32-битные  це-
 лые  числа  и  выбираются из младших частей S1 и S2. Результат - это
 64-битное целое со знаком, записываемое в среднюю и младшую части D.
 Регистры D8 и D9 могут использоваться как регистры-Источники.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 64-битное целое.

 Коды условия регистра CCR:

   C  - не меняется.
   V  - 0,  если  старшие  значащие 32 бита 64-битного
        результата являются расширение  знака  младших
        значащих 32 бит; иначе 1.
    Z  - 1, если результат равен 0; иначе 0.
    N  - 1, если результат отрицательный; иначе 0.
    I  - не меняется
   LR - не меняется
   ^R - не меняется
    A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: MPYS  S1,S2,D  (синтаксис операции MOVE
                                 см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  1sss  SSS0  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MPYS  S2(8,9),S1,D  (синтаксис операции MOVE
                                      см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  0sss  11S0  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

         S1      sss
         Dn      nnn  ,   где nnn = 0-7

         S2      SSS
         Dn      nnn  ,   где nnn = 0-7

         S2      S
         D8      0
         D9      1

         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:MPYU
^MPYU                    УМНОЖЕНИЕ БЕЗ ЗНАКА                     MPYU
 --------------------------------------------------------------------
 Операция:   S1.L * S2.L --> D.M : D.L  (параллельная пересылка)

 Синтаксис:  MPYU  S1,S2,D (синтаксис операции MOVE см.описание MOVE)
             MPYU  S2,S1,D (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Перемножаются  два  беззнаковых  операнда и результат запоминается в
 указаном регистре-Приемнике. Операнды представляют  собой  32-битные
 целыми числа и выбираются из младших частей S1 и S2. Результат - это
 64-битное целое без знака, записываемое в среднюю и младшую части D.
 Регистры D8 и D9 могут использоваться как регистры-Источники.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 64-битное целое.

 Коды условия регистра CCR:

   C  - не меняется.
   V  - 0,  если  старшие  значащие 32 бита 64-битного результата
        результата являются нулями; иначе 1.
   Z  - 1, если результат равен 0; иначе 0.
   N  - всегда 0.
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: MPYU  S1,S2,D  (синтаксис операции MOVE
                                 см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  1sss  SSS1  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Формат команды: MPYU  S2(8,9),S1,D  (синтаксис операции MOVE
                                      см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  0sss  11S1  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

         S1      sss
         Dn      nnn  ,   где nnn = 0-7

         S2      SSS
         Dn      nnn  ,   где nnn = 0-7

         S2      S
         D8      0
         D9      1

         D       ddd
         Dn      nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:NEG
^NEG                     ИНВЕРТИРОВАНИЕ ЗНАКА                     NEG
 --------------------------------------------------------------------
 Операция:   0 - D.L --> D.L  (параллельная пересылка)

 Синтаксис:  NEG D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая часть операнда вычитается из нуля. Результат запоминается в
 младшей части D. Эта команда предпочтительнее SUB, т.к. нет необходи-
 мости обнулять входной операнд.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если был заем из старшего бита  результата; иначе 0.
   V  - 1, если переполнение результата; иначе 0.
   Z  - 1, если результат ноль; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: NEG D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0101  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:NEGC
^NEGC        ИНВЕРТИРОВАНИЕ ЗНАКА С УЧЕТОМ БИТА ПЕРЕНОСА         NEGC
 --------------------------------------------------------------------
 Операция:   0 - D.L - C --> D.L  (параллельная пересылка)

 Синтаксис:  NEGC D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая часть операнда вместе с битом C регистра кода условий  вычи-
 тается  из  нуля и результат запоминается в младшей части D. Эта ко-
 манда полезна, когда инвертируется знак числа с  кратной  точностью,
 т.к. нет необходимости сначала обнулять входной операнд, как это бы-
 ло бы в случае использования команды SUB. Отметим, что старшие части
 длинных  слов  исходных  переменных более высокой разрядности должны
 быть сдвинуты в нижнюю часть регистра Dn.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если был заем из старшего бита  результата; иначе 0.
   V  - 1, если переполнение результата; иначе 0.
   Z  - 1, если результат не ноль; иначе не меняется.
   N  - 1, если результат отрицательный; иначе 0.
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: NEGC D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0001  uu11  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:NOP
^NOP                     НЕТ ОПЕРАЦИИ                             NOP
 --------------------------------------------------------------------
 Операция:   отсутствует

 Синтаксис:  NOP

 Описание:

 Никакая операция не выполняется. Состояние процессора, за исключени-
 ем программного счетчика, не изменяется. Выполнение  продолжается  с
 команды, следующей за NOP.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: NOP

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  00  0000  0000   0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  отсутствуют

 Время исполнения: 2 такта
 Расход памяти:    1 слово
:NOT
^NOT                 ЛОГИЧЕСКОЕ ДОПОЛНЕНИЕ                        NOT
 --------------------------------------------------------------------
 Операция:   ~~D{31:0} --> D{31:0}  (параллельная пересылка)

 Синтаксис:  NOT D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Поразрядное дополнение до единицы младшей части операнда запоминает-
 ся  в  D. Эта операция выполняется над битами 0 - 31 регистра D. Ос-
 тальные биты D не меняются.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - не меняется
   V  - всегда 0
   Z  - 1, если результат ноль; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: NOT D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0010  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:OR
^OR                      ЛОГИЧЕСКОЕ "ИЛИ"                          OR
 --------------------------------------------------------------------
 Операция:   D.L v S.L --> D.L  (параллельная пересылка)

 Синтаксис:  OR  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычисляется дизъюнкция младших частей указанных операндов, результат
 запоминается в младшей части операнда-приемника D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: OR  S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  0sss  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:ORC
^ORC                 ЛОГИЧЕСКОЕ "ИЛИ" С ДОПОЛНЕНИЕМ               ORC
 --------------------------------------------------------------------
 Операция:  D.L v ~~S.L --> D.L (параллельная пересылка)

 Синтаксис: ORC  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычисляется дизъюнкция младшей части D и дополнения младшей части S,
 и результат запоминается в младшей части операнда-Приемника  D.  Ко-
 манда  полезна  при  манипулировании  битовыми картами в графических
 приложениях.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - Не меняется.
   V  - Всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ORC  S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   11  0sss  1001  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │          необязательное слово исполнительного адреса             │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:ORI
^ORI                                                              ORI
^   ЛОГИЧЕСКОЕ "ИЛИ" НЕПОСРЕДСТВЕННЫХ ДАННЫХ И РЕГИСТРА УПРАВЛЕНИЯ
 --------------------------------------------------------------------
 Операция:   D v #xx --> D

 Синтаксис:  OR(I) #маска,D

 Описание:

 Вычисляется дизъюнкция содержимого регистра управления  и  8-битного
 непосредственного операнда. Результат запоминается в регистре управ-
 ления. Ограничения см. в Разделе A.10.

 Коды условия регистра CCR:

 Если операнд CCR:
   C  - 1, если бит 0 непосредственного операнда равен 1;
           иначе не меняется.
   V  - 1, если бит 1 непосредственного операнда равен 1;
           иначе не меняется.
   Z  - 1, если бит 2 непосредственного операнда равен 1;
           иначе не меняется.
   N  - 1, если бит 3 непосредственного операнда равен 1;
           иначе не меняется.
   I  - 1, если бит 4 непосредственного операнда равен 1;
           иначе не меняется.
   LR - 1, если бит 5 непосредственного операнда равен 1;
           иначе не меняется.
   ^R - 1, если бит 6 непосредственного операнда равен 1;
           иначе не меняется.
   A  - 1, если бит 7 непосредственного операнда равен 1;
           иначе не меняется.

 Если операнды OMR,MR,IER или ER:
   C  - Не меняется.
   V  - Не меняется.
   Z  - Не меняется.
   N  - Не меняется.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER:

 Если операнд ER:
   INX   - 1, если бит 0 непосредственного операнда равен 1;
              иначе не меняется.
   DZ    - 1, если бит 1 непосредственного операнда равен 1;
              иначе не меняется.
   UNF   - 1, если бит 2 непосредственного операнда равен 1;
              иначе не меняется.
   OVF   - 1, если бит 3 непосредственного операнда равен 1;
              иначе не меняется.
   OPERR - 1, если бит 4 непосредственного операнда равен 1;
              иначе не меняется.
   SNAN  - 1, если бит 5 непосредственного операнда равен 1;
              иначе не меняется.
   NAN   - 1, если бит 6 непосредственного операнда равен 1;
              иначе не меняется.
   UNCC  - 1, если бит 7 непосредственного операнда равен 1;
              иначе не меняется.

 Если операнды OMR,MR,IER или CCR:
   INX   - Не меняется.
   DZ    - Не меняется.
   UNF   - Не меняется.
   OVF   - Не меняется.
   OPERR - Не меняется.
   SNAN  - Не меняется.
   NAN   - Не меняется.
   UNCC  - Не меняется.

 Флаги регистра IER:

 Если операнд IER:
   SINX  - 1, если бит 0 непосредственного операнда равен 1;
              иначе не меняется.
   SDZ   - 1, если бит 1 непосредственного операнда равен 1;
              иначе не меняется.
   SUNF  - 1, если бит 2 непосредственного операнда равен 1;
              иначе не меняется.
   SOVF  - 1, если бит 3 непосредственного операнда равен 1;
              иначе не меняется.
   SIOP  - 1, если бит 4 непосредственного операнда равен 1;
              иначе не меняется.

 Если операнды OMR,MR,ER или CCR:
   SINX  - Не меняется.
   SDZ   - Не меняется.
   SUNF  - Не меняется.
   SOVF  - Не меняется.
   SIOP  - Не меняется.

 Формат команды: OR(I) #маска,D

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0001   0001    iiii   ii   │  ii   00ff  1111  10EE   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

 Непосредственный короткий операнд - iiiiiiii (8 бит)

          D     EEff
          CCR   0100
          ER    0101
          IER   0110
          MR    0111
          OMR   1000

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 слово
:REP
^REP                  ПОВТОРЕНИЕ СЛЕДУЩЕЙ КОМАНДЫ                 REP
 --------------------------------------------------------------------
 Операция:   LC   --> TEMP
             X:ea --> LC   либо  Y:ea --> LC
                           либо  S    --> LC
                           либо  #xxx --> LC
             Повторять следущую  команду,  пока LC не равен 1.
             TEMP --> LC

 Синтаксис:  REP X:ea
             REP Y:ea
             REP S
             REP #число_повторений

 Описание:

 Выполнение  однословной команды, следующей за командой REP, повторя-
 ется LC раз, где LC - это значение счетчика цикла. Если LC=0, то ко-
 манда повторяется 2**32 раз. Текущее значение  счетчика  цикла  (LC)
 запоминается  во внутреннем временном регистре. Исполнительный адрес
 указывает на счетчик повторений, который загружается в LC. Могут ис-
 пользоваться все косвенные регистровые режимы адресации, кроме адре-
 сации с длинным смещением. Могут также использоваться режимы адреса-
 ции  с непосредственным коротким операндом и прямая регистровая. 19-
 битный непосредственный операнд  расширяется  нулями  для  получения
 значения счетчика циклов.

 При отработке команды REP повторяемая команда извлекается только од-
 нажды и остается в регистре команд, пока не закончатся повторения.

 REP невозможно прервать, и она может повторять любую однословную ко-
 манду,  которая  не  изменяет  последовательность выполнения команд.
 Полный список ограничений см. в Разделе A.10.

 Если регистр системного стека SSH указан  как  операнд-Источник,  то
 после выборки из SSH указатель системного стека SP уменьшится на 1.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: REP  #число_повторений

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0001   1111    iiii   ii   │  ii   iiii  1iii  iiii   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: REP     S

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0001   1110    0000   00   │  00   0000  1ddd  dddd   │
 └───────────────────────────────────────┴──────────────────────────┘

 Формат команды: REP     X:ea
                 REP     Y:ea

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0001   110S    MMMR   RR   │  00   0000  1000  0000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:
 <ea>  Rn - R0-R7 (косвенные режимы адресации через адресный регистр,
                   кроме (Rn+xxxx))

 Непосредственный короткий операнд - iiiiiiiiiiiiiiiiiii (19 бит)

 Тип памяти   S
 X-память     0
 Y-память     1

 D             ddddddd
 D0.S - D7.S   0000nnn  ,  где nnn = 0-7
 D0.L - D7.L   0001nnn
 D0.M - D7.M   0010nnn
 D0.H - D7.H   0011nnn
 D8.L          0100000
 D9.L          0100001
 D8.M          0100010
 D9.M          0100011
 D8.H          0100100
 D9.H          0100101
 D8.S          0100110
 D9.S          0100111
 R0 - R7       0101nnn
 N0 - N7       0110nnn
 M0 - M7       0111nnn
 SR            1111001
 OMR           1111010
 SP            1111011
 SSH           1111100
 SSL           1111101
 LA            1111110
 LC            1111111

 Время исполнения: 4 + mv  тактов
 Расход памяти:    1 слово
:RESET
^RESET               СБРОС ВНЕШНИХ УСТРОЙСТВ                    RESET
 --------------------------------------------------------------------
 Операция:   Сбрасывает  все  накристальные  внешние устройства и ре-
             гистр приоритета прерываний

 Синтаксис:  RESET

 Описание:

 Сбрасываются все накристальные внешние устройства и регистр  приори-
 тета прерываний. Воздействие команды RESET на внешние устройства см.
 в Разделе 7. Состояние процессора не изменяется и выполнение продол-
 жается со следующей команды, но все маскируемые источники прерываний
 сбрасываются (прерывания запрещаются). Прерывания, которые могут за-
 тем  произойти,  - это по ошибке стека (Stack Error), по аппаратному
 сбросу (Hardware Reset), по неправильной команде (ILLEGAL), TRAPcc и
 FTRAPcc.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: RESET

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  00  0000  0000   0100   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  Отсутствуют

 Время исполнения: 4 такта
 Расход памяти:    1 слово
:ROL
^ROL                     ЦИКЛИЧЕСКИЙ СДВИГ ВЛЕВО                  ROL
 --------------------------------------------------------------------
 Операция:   (параллельная пересылка)

        31...............0
       ┌──────────────────┐
 C <---  <-- ........ <--  <──┐
       └──────────────────┘   │
 └────────────────────────────┘

 Синтаксис:   ROL  D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Циклический сдвиг влево на один бит младшей части указанного операн-
 да.  В бит переноса C заносится 31-й бит операнда. Предыдущее значе-
 ние бита переноса заносится в бит 0 операнда. Результат запоминается
 в младшей части D. Команда выполняется над битами 0-31  регистра  D.
 Остальные биты D не меняются.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если последний вытесненный бит операнда = 1; иначе 0.
   V  - всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ROL D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0011  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:ROR
^ROR                     ЦИКЛИЧЕСКИЙ СДВИГ ВПРАВО                 ROR
 --------------------------------------------------------------------
 Операция:  (параллельная пересылка)

        31...............0
       ┌──────────────────┐
    ┌─>  --> ........ -->  --> C
    │  └──────────────────┘
    └──────────────────────────┘

 Синтаксис:  ROR  D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Циклический  сдвиг  вправо на один бит младшей части указанного опе-
 ранда. В бит переноса C заносится значение нулевого  бита  операнда.
 Предыдущее  значение  бита переноса заносится в бит 31 операнда. Ре-
 зультат запоминается в младшей части D. Команда выполняется над  би-
 тами 0-31 регистра D. Остальные биты D не меняются.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если последний вытесненный бит операнда = 1; иначе 0.
   V  - всегда 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: ROR D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   10  0011  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:RTI
^RTI                     ВОЗВРАТ ИЗ ПРЕРЫВАНИЯ                    RTI
 --------------------------------------------------------------------
 Операция:   SSH    --> PC
             SSL    --> SR
             SP - 1 --> SP

 Синтаксис:  RTI

 Описание:

 Программный  счетчик и регистр состояния выталкиваются из системного
 стека. Програмный счетчик и регистр  состояния  программы  обработки
 прерывания теряются. RTI функционально идентична RTR, но была реали-
 зована  как  отдельная команда для совместимости с будущими реализа-
 циями и для упрощения переносимости програмнного обеспечения.

 Из-за конвейеризации команде RTI не могут  предшествовать  некоторые
 инструкции. Список этих инструкций см. в Разделе A.10.

 Коды условия регистра CCR:

   C  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   V  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   Z  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   N  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   I  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
  LR  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
  ^R  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   A  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.

 Биты состояния регистра ER:

   INX   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   DZ    - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   UNF   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   OVF   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   OPERR - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SNAN  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   NAN   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   UNCC  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.

 Флаги регистра IER:

   SINX  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SDZ   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SUNF  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SOVF  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SIOP  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.

 Формат команды: RTI

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0000   0000    0000   00   │  00   0000  0000  1100   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  отсутствуют

 Время исполнения: 4 + rx  тактов
 Расход памяти:    1 слово
:RTR
^RTR         Возврат из подпрограммы с восстановлением            RTR
 --------------------------------------------------------------------
 Операция:   SSH    --> PC
             SSL    --> SR
             SP - 1 --> SP

 Синтаксис:  RTR

 Описание:

 Программный  счетчик и регистр состояния выталкиваются из системного
 стека. Програмный счетчик и регистр состояния подпрограммы теряются.
 RTR функционально идентична RTI, но была реализована  как  отдельная
 команда  для  совместимости  с будущими реализациями и для упрощения
 переносимости програмнного обеспечения.

 Из-за конвейеризации команде RTR не могут предшествовать  некоторые
 инструкции. Список этих инструкций см. в Разделе A.10.

 Коды условия регистра CCR:

   C  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   V  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   Z  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   N  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   I  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
  LR  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
  ^R  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.
   A  - Устанавливается  в  соответствии со значением,
        вытолкнутым из стека.

 Биты состояния регистра ER:

   INX   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   DZ    - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   UNF   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   OVF   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   OPERR - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SNAN  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   NAN   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   UNCC  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.

 Флаги регистра IER:

   SINX  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SDZ   - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SUNF  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SOVF  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.
   SIOP  - Устанавливается  в  соответствии со значением,
           вытолкнутым из стека.

 Формат команды: RTR

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0000   0000    0000   00   │  00   0000  0000  1000   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  отсутствуют

 Время исполнения: 4 + rx  тактов
 Расход памяти:    1 слово
:RTS
^RTS                   ВОЗВРАТ ИЗ ПОДПРОГРАММЫ                    RTS
 --------------------------------------------------------------------
 Операция:   SSH    --> PC
             SP - 1 --> SP

 Синтаксис:  RTS

 Описание:

 Программный счетчик выталкивается из системного стека. Регистр  сос-
 тояния не меняется. Програмный счетчик подпрограммы теряется.

 Из-за  конвейеризации  команде RTS не могут предшествовать некоторые
 инструкции. Список этих инструкций см. в Разделе A.10.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: RTS

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     0000   0000   0000    0000   00   │  00   0000  0000  1101   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  отсутствуют

 Время исполнения: 4 + rx  тактов
 Расход памяти:    1 слово
:SETW
^SETW            УСТАНОВКА ВСЕХ БИТОВ ДЛИННОГО ОПЕРАНДА          SETW
 --------------------------------------------------------------------
 Операция:   $FFFFFFFF --> D.L  (параллельная пересылка)

 Синтаксис:  SETW D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Все биты младшей части (длинное слово) операнда-Приемника устанавли-
 ваются равными 1.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - не меняется
   V  - всегда 0
   Z  - всегда 0
   N  - всегда 1
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: SETW D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  0uuu  1001  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                (uuu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv  тактов
 Расход памяти:    1 + mv  слов
:SPLIT
^SPLIT               ВЫДЕЛЕНИЕ 16-БИТНОГО ЦЕЛОГО                SPLIT
 --------------------------------------------------------------------
 Операция:   S.L{31:16} --> D.L{15:0}  (параллельная пересылка)
             S.L{31} --> D.L{31:16}

 Синтаксис:  SPLIT  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Старшие 16 бит младшей части  операнда-Источника  S  пересылаются  в
 младшие 16 бит младшей части операнда-Приемника и расширяются знако-
 вым разрядом до 32 бит.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - не меняется
   V  - всегда 0
   Z  - 1, если результат равен 0; иначе 0
   N  - 1, если результат отрицательный; иначе 0
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: SPLIT S,D (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  0sss  1011  0ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:SPLITB
^SPLITB                ВЫДЕЛЕНИЕ 8-БИТНОГО ЦЕЛОГО              SPLITB
 --------------------------------------------------------------------
 Операция:   S.L{15:8} --> D.L{7:0}  (параллельная пересылка)
             S.L{15} --> D.L{31:8}

 Синтаксис:  SPLITB  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Биты  15-8 младшей части операнда-Источника S пересылаются в младшие
 8 бит младшей части операнда-Приемника и расширяются знаковым разря-
 дом до 32 бит.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - не меняется
   V  - всегда 0
   Z  - 1, если результат равен 0; иначе 0
   N  - 1, если результат отрицательный; иначе 0
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: SPLITB  S,D  (синтаксис операции MOVE
                               см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   11  0sss  1011  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:

         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:STOP
^STOP                    ОСТАНОВ                                 STOP
 --------------------------------------------------------------------
 Операция:   Переходит в состояние обработки
             STOP и останавливает генератор

 Синтаксис:  STOP

 Описание:

 При выполнении команды STOP процессор переходит в состояние  остано-
 ва.  Тактовый генератор отключается. Рабора процессора приостанавли-
 вается до появления сигналов ^RESET или ^IRQA. В состоянии  останова
 потребляется минимальная энергия.

 В состоянии останова порт A  бездействует,  поддерживая  управляющие
 сигналы  в  неактивном состоянии (т.е. ^RD = ^WR = Vcc и т.д., линии
 данных (D0-D23) находятся в высокоимпедансном состоянии, а на адрес-
 ных линиях (A1-A15) остается комбинация от предыдущего цикла обраще-
 ния). Если при выполнении команды STOP  было  выставлено  разрешение
 передачи  по шине, то порт A останется в высокоимпедансном состоянии
 до тех пор, пока DSP не выйдет из состояния останова.

 Если выход из состояния останова был вызван сигналом ^RESET, то про-
 цессор начнет отрабатывать процедуру сброса. Временную диаграмму см.
 в DSP96002 Technical Data Sheet.

 Если выход из состояния останова был вызван сигналом ^IRQA, то  про-
 цессор  будет обслуживать отложенный запрос на прерывание наивысшего
 приоритета, а не прерывание, вызвавшее ^IRQA (если оно не наивысшего
 приоритета). Прерывание будет обслужено после  некоторой  внутренней
 задержки  (подробности см. в DSP96002 Technical Data Sheet). Процес-
 сор возобновит выполнение программы с команды, следущей за  командой
 STOP,  которая вызвала переход в состояние останова, после облужива-
 ния прерывания или если никакого отложенного запроса прерывания сра-
 зу после задержки обнаружено не было. Если сигнал ^IRQA был  выстав-
 лен при выполнении команды STOP, то тактовый генератор не будет отк-
 лючен, а запустится счетчик внутренней задержки.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: STOP

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  00  0000  0000   1111   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:  отсутствуют

 Время исполнения: неопределенное
 Расход памяти:    1 слово
:SUB
^SUB                         ВЫЧИТАНИЕ                            SUB
 --------------------------------------------------------------------
 Операция:   D.L - S.L --> D.L (параллельная пересылка)

 Синтаксис:  SUB  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычитается  младшая часть операнда-Источника S из младшей части опе-
 ранда-Приемника D и результат запоминается в младшей части D.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если был перенос из старшего бита результата; иначе 0.
   V  - 1, если было переполнение; иначе 0.
   Z  - 1, если результат равен 0; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: SUB  S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  1sss  uu00  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:SUBC
^SUBC                ВЫЧИТАНИЕ С ПЕРЕНОСОМ                       SUBC
 --------------------------------------------------------------------
 Операция:   D.L - S.L - C --> D.L  (параллельная пересылка)

 Синтаксис:  SUBC  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Вычитается младшая часть указанного операнда-Источника S из  младшей
 части  операнда-Приемника D вместе с битом C регистра кода условия и
 результат запоминается в младшей части  D.  Эта  команда  полезна  в
 арифметических  процедурах с целыми числами повышенной точности. От-
 метим, что старшие части длинных слов исходных переменных более  вы-
 сокой разрядности должны быть сдвинуты в нижнюю часть регистра Dn.

 Разрядность операндов:  32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:

   C  - 1, если был заем из старшего бита; иначе 0.
   V  - 1, если было переполнение; иначе 0.
   Z  - 0, если результат не равен 0; иначе не меняется.
   N  - 1, если результат отрицательный; иначе 0.
   I  - Не меняется.
  LR  - Не меняется.
  ^R  - Не меняется.
   A  - Не меняется.

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: SUBC S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │      поле операции пересылки MOVE     │   00  1sss  uu10  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:TFR
^TFR               ПЕРЕСЫЛКА ДАННЫХ РЕГИСТРА АЛУ                  TFR
 --------------------------------------------------------------------
 Операция:   S.L --> D.L (параллельная пересылка)

 Синтаксис:  TFR  S,D  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Пересылаются  данные  из младшей части указанного регистра-Источника
 АЛУ в младшую часть указанного регистра-Приемника АЛУ. TFR использу-
 ет внутренние каналы АЛУ, но не изменяет коды условия. Если S и D  -
 один и тот же регистр, то эта команда эквивалентна операции целочис-
 ленного округления.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: 32-битное целое.

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: TFR S,D  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  1sss  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

         S       sss
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:TRAPcc
^TRAPcc              УСЛОВНОЕ ПРОГРАММНОЕ ПРЕРЫВАНИЕ           TRAPcc
 --------------------------------------------------------------------
 Операция:   Если  cc, то начать обработку программного
             исключительного состояния

 Синтаксис:  TRAPcc

 Описание:

 Если указанное условие истинно, то нормальное выполнение команд при-
 останавливается и запускается обработка программного исключительного
 состояния.  Приоритет  прерывания в регистре состояния (I1,I0) уста-
 навливается равным 3, если используется длинная процедура обслужива-
 ния прерывания. Если указанное условие ложно, то выполняется следую-
 щая команда. Ограничения см. в Разделе A.10.

 "cc" может задавать следующие условия:

       Мнемоника                                 Условие
 --------------------------------------------------------------------
       CC(HS) - переноса не было (не ниже)       C = 0
       CS(LO) - был перенос (ниже)               C = 1
       EQ     - равно                            Z = 1
       GE     - больше или равно                 N && V = 0
       GT     - больше                           Z v (N && V) = 0
       HI     - выше                             Z v C = 0
       LE     - меньше или равно                 Z v (N && V) = 1
       LS     - не выше                          Z v C = 1
       LT     - меньше                           N && V = 1
       MI     - минус                            N = 1
       NE(Q)  - не равно                         Z = 0
       PL     - плюс                             N = 0
       VC     - переполнения не было             V = 0
       VS     - было переполнение                V = 1

 Коды условия регистра CCR:  Не меняются.
 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: TRAPcc

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  1c  cccc  0000   0011   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды:

         Мнемоника  ccccc        Мнемоника  ccccc
         EQ         01000        NE(Q)      11000
         PL         01001        MI         11001
         CC(HS)     01010        CS(LO)     11010
         GE         01011        LT         11011
         GT         01100        LE         11100
         VC         01101        VS         11101
         HI         01110        LS         11110
         AL         11111

 Время исполнения: 10 тактов
 Расход памяти:     1 слово
:TST
^TST                 ПРОВЕРКА ОПЕРАНДА                            TST
 --------------------------------------------------------------------
 Операция:    S - 0   (параллельная пересылка)

 Синтаксис:   TST S  (синтаксис операции MOVE см.описание MOVE)

 Описание:

 Младшая часть указанного операнда сравнивается с нулем. Результат не
 запоминается, однако коды условия устанавливаются.

 Разрядность операнда:   32-битное целое.
 Разрядность результата: отсутствует

 Коды условия регистра CCR:

   C  - не изменяется
   V  - всегда 0
   Z  - 1, если результат ноль; иначе 0.
   N  - 1, если результат отрицательный; иначе 0.
   I  - не меняется
  LR  - не меняется
  ^R  - не меняется
   A  - не меняется

 Биты состояния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: TST S  (синтаксис операции MOVE см.описание MOVE)

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │     поле операции пересылки MOVE      │   10  0110  uu01  1ddd   │
 ├───────────────────────────────────────┴──────────────────────────┤
 │ необязательное дополнительное слово, содержащее исполнительный   │
 │            адрес или непосредственный длинный операнд            │
 └──────────────────────────────────────────────────────────────────┘

 Поля команды:
                 (uu)
         D       ddd
         Dn.L    nnn  ,   где nnn = 0-7

 Время исполнения: 2 + mv тактов
 Расход памяти:    1 + mv слов
:WAIT
^WAIT                    ОЖИДАНИЕ                                WAIT
 --------------------------------------------------------------------
 Операция:   Приостановка работы. Ожидание немаскируемого прерывания.

 Синтаксис:  WAIT

 Описание:

 При  выполнении  команды WAIT процессор переходит в состояние ожида-
 ния. Внутренние сигналы синхронизации перестают поступать к  процес-
 сору,  к памяти и DMA, и вся деятельность в процессоре приостанавли-
 вается, пока не произойдет немаскируемое прерывание. Однако тактовый
 генератор и внутренние генераторы внешних устройств продолжают рабо-
 тать. Если при выполнении команды WAIT приходит запрос  на  прерыва-
 ние, то прерывание будет обработано; эффект будет такой же, как если
 бы  процессор  никогда  не  выполнял команду WAIT и за командой WAIT
 следовало бы три команды NOP. Если происходит немаскируемое прерыва-
 ние или приходит внешний (аппаратный)  сигнал  сбороса  (RESET),  то
 процессор  выходит из состояния ожидания и начинается обработка иск-
 лючительного состояния. Выводы ^BR/^BG в состоянии ожидания активны.
 Процессор всегда выходит из  состояния  ожидания  на  фазе  импульса
 синхронизации T2 (См. DSP96002 Technical Data Sheet). Следовательно,
 можно синхронизовать несколько процессоров, переведя их все в состо-
 яние ожидания и затем подавая общий сигнал прерывания. WAIT - состо-
 яние со сниженным потреблением энергии.

 Коды условия:               Не меняются.
 Биты состаяния регистра ER: Не меняются.
 Флаги регистра IER:         Не меняются.

 Формат команды: WAIT

 31                                    14 13                       0
 ┌───────────────────────────────────────┬──────────────────────────┐
 │    0000   0000    0000    0000    00  │  00  0000  0000   1110   │
 └───────────────────────────────────────┴──────────────────────────┘

 Поля команды: отсутствуют

 Время исполнения: неопределенное
 Расход памяти:    1 слово
